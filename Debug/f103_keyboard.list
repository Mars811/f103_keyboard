
f103_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008848  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008954  08008954  00009954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089cc  080089cc  0000a158  2**0
                  CONTENTS
  4 .ARM          00000000  080089cc  080089cc  0000a158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089cc  080089cc  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089cc  080089cc  000099cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089d0  080089d0  000099d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080089d4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20000158  08008b2c  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  08008b2c  0000a9e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014333  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003345  00000000  00000000  0001e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00021800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfc  00000000  00000000  00022a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b9  00000000  00000000  0002382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017df4  00000000  00000000  0003d9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee79  00000000  00000000  000557d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  000e4698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e9204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	0800893c 	.word	0x0800893c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	0800893c 	.word	0x0800893c

0800014c <GetPointerData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* 获取键位 */
static void GetPointerData(uint8_t *pbuf)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  // 清空报告缓冲区（8字节全0）
  memset(pbuf, 0, 8);
 8000154:	2208      	movs	r2, #8
 8000156:	2100      	movs	r1, #0
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f008 fbc3 	bl	80088e4 <memset>

  if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == 1) {
 800015e:	2102      	movs	r1, #2
 8000160:	480e      	ldr	r0, [pc, #56]	@ (800019c <GetPointerData+0x50>)
 8000162:	f000 feb5 	bl	8000ed0 <HAL_GPIO_ReadPin>
 8000166:	4603      	mov	r3, r0
 8000168:	2b01      	cmp	r3, #1
 800016a:	d105      	bne.n	8000178 <GetPointerData+0x2c>
    // pbuf[0] = 0x01;   // 左Ctrl修饰键
    pbuf[2] = 0x52;   // V键
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3302      	adds	r3, #2
 8000170:	2252      	movs	r2, #82	@ 0x52
 8000172:	701a      	strb	r2, [r3, #0]
    led_flash();
 8000174:	f000 f9a0 	bl	80004b8 <led_flash>
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 8000178:	2108      	movs	r1, #8
 800017a:	4808      	ldr	r0, [pc, #32]	@ (800019c <GetPointerData+0x50>)
 800017c:	f000 fea8 	bl	8000ed0 <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	2b01      	cmp	r3, #1
 8000184:	d105      	bne.n	8000192 <GetPointerData+0x46>
    // pbuf[0] = 0x01;   // 左Ctrl修饰键
    pbuf[2] = 0x51;   // C键
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3302      	adds	r3, #2
 800018a:	2251      	movs	r2, #81	@ 0x51
 800018c:	701a      	strb	r2, [r3, #0]
    led_flash();
 800018e:	f000 f993 	bl	80004b8 <led_flash>
  }
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a4:	f000 faee 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a8:	f000 f810 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ac:	f000 f8de 	bl	800036c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001b0:	f000 f8b2 	bl	8000318 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001b4:	f007 ffec 	bl	8008190 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001b8:	f000 f862 	bl	8000280 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* 主函数 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001bc:	4802      	ldr	r0, [pc, #8]	@ (80001c8 <main+0x28>)
 80001be:	f003 f923 	bl	8003408 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c2:	bf00      	nop
 80001c4:	e7fd      	b.n	80001c2 <main+0x22>
 80001c6:	bf00      	nop
 80001c8:	20000174 	.word	0x20000174

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b094      	sub	sp, #80	@ 0x50
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d6:	2228      	movs	r2, #40	@ 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f008 fb82 	bl	80088e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000216:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000218:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800021c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fbda 	bl	80029dc <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022e:	f000 f983 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000242:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fe46 	bl	8002ee0 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800025a:	f000 f96d 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800025e:	2310      	movs	r3, #16
 8000260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f002 ffc7 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000274:	f000 f960 	bl	8000538 <Error_Handler>
  }
}
 8000278:	bf00      	nop
 800027a:	3750      	adds	r7, #80	@ 0x50
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000294:	463b      	mov	r3, r7
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800029c:	4b1d      	ldr	r3, [pc, #116]	@ (8000314 <MX_TIM2_Init+0x94>)
 800029e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80002a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002a6:	2247      	movs	r2, #71	@ 0x47
 80002a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002b0:	4b18      	ldr	r3, [pc, #96]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b8:	4b16      	ldr	r3, [pc, #88]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002be:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c4:	4813      	ldr	r0, [pc, #76]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002c6:	f003 f84f 	bl	8003368 <HAL_TIM_Base_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002d0:	f000 f932 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002da:	f107 0308 	add.w	r3, r7, #8
 80002de:	4619      	mov	r1, r3
 80002e0:	480c      	ldr	r0, [pc, #48]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002e2:	f003 f9eb 	bl	80036bc <HAL_TIM_ConfigClockSource>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002ec:	f000 f924 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f0:	2300      	movs	r3, #0
 80002f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f4:	2300      	movs	r3, #0
 80002f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002f8:	463b      	mov	r3, r7
 80002fa:	4619      	mov	r1, r3
 80002fc:	4805      	ldr	r0, [pc, #20]	@ (8000314 <MX_TIM2_Init+0x94>)
 80002fe:	f003 fbc1 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000308:	f000 f916 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	3718      	adds	r7, #24
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000174 	.word	0x20000174

08000318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800031c:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 800031e:	4a12      	ldr	r2, [pc, #72]	@ (8000368 <MX_USART1_UART_Init+0x50>)
 8000320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000322:	4b10      	ldr	r3, [pc, #64]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 8000324:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 800033e:	220c      	movs	r2, #12
 8000340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000342:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	@ (8000364 <MX_USART1_UART_Init+0x4c>)
 8000350:	f003 fc08 	bl	8003b64 <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035a:	f000 f8ed 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200001bc 	.word	0x200001bc
 8000368:	40013800 	.word	0x40013800

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000380:	4b2a      	ldr	r3, [pc, #168]	@ (800042c <MX_GPIO_Init+0xc0>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a29      	ldr	r2, [pc, #164]	@ (800042c <MX_GPIO_Init+0xc0>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b27      	ldr	r3, [pc, #156]	@ (800042c <MX_GPIO_Init+0xc0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <MX_GPIO_Init+0xc0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a23      	ldr	r2, [pc, #140]	@ (800042c <MX_GPIO_Init+0xc0>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <MX_GPIO_Init+0xc0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_GPIO_Init+0xc0>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	@ (800042c <MX_GPIO_Init+0xc0>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_GPIO_Init+0xc0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0310 	and.w	r3, r3, #16
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80003c8:	2302      	movs	r3, #2
 80003ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4815      	ldr	r0, [pc, #84]	@ (8000430 <MX_GPIO_Init+0xc4>)
 80003dc:	f000 fbf4 	bl	8000bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* GPIO配置 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003e0:	2308      	movs	r3, #8
 80003e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	480f      	ldr	r0, [pc, #60]	@ (8000430 <MX_GPIO_Init+0xc4>)
 80003f4:	f000 fbe8 	bl	8000bc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2302      	movs	r3, #2
 8000404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4808      	ldr	r0, [pc, #32]	@ (8000434 <MX_GPIO_Init+0xc8>)
 8000412:	f000 fbd9 	bl	8000bc8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800041c:	4805      	ldr	r0, [pc, #20]	@ (8000434 <MX_GPIO_Init+0xc8>)
 800041e:	f000 fd6e 	bl	8000efe <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40010800 	.word	0x40010800
 8000434:	40011000 	.word	0x40011000

08000438 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t xus)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  SysTick->LOAD = 6 * xus; 
 8000440:	4914      	ldr	r1, [pc, #80]	@ (8000494 <delay_us+0x5c>)
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	4613      	mov	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	4413      	add	r3, r2
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	604b      	str	r3, [r1, #4]
  SysTick->VAL = 0x00; 
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <delay_us+0x5c>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = 0X00000001; 
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <delay_us+0x5c>)
 8000456:	2201      	movs	r2, #1
 8000458:	601a      	str	r2, [r3, #0]
  while(!(SysTick->CTRL & 0X00010000))
 800045a:	e00d      	b.n	8000478 <delay_us+0x40>
  {
    if((SysTick->CTRL &= 0X00000001)==0)
 800045c:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <delay_us+0x5c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a0c      	ldr	r2, [pc, #48]	@ (8000494 <delay_us+0x5c>)
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d105      	bne.n	8000478 <delay_us+0x40>
      SysTick->CTRL |= 0X00000001; 
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <delay_us+0x5c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <delay_us+0x5c>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]
  while(!(SysTick->CTRL & 0X00010000))
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <delay_us+0x5c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0eb      	beq.n	800045c <delay_us+0x24>
  }
  SysTick->CTRL = 0X00000000; 
 8000484:	4b03      	ldr	r3, [pc, #12]	@ (8000494 <delay_us+0x5c>)
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	e000e010 	.word	0xe000e010

08000498 <delay_ms>:

void delay_ms(uint32_t xms){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  delay_us(1000 * xms);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004a6:	fb02 f303 	mul.w	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ffc4 	bl	8000438 <delay_us>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <led_flash>:

void led_flash(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004c2:	4807      	ldr	r0, [pc, #28]	@ (80004e0 <led_flash+0x28>)
 80004c4:	f000 fd1b 	bl	8000efe <HAL_GPIO_WritePin>
  delay_ms(50);
 80004c8:	2032      	movs	r0, #50	@ 0x32
 80004ca:	f7ff ffe5 	bl	8000498 <delay_ms>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <led_flash+0x28>)
 80004d6:	f000 fd12 	bl	8000efe <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40011000 	.word	0x40011000

080004e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* 定时器中断回调函数 */
  static volatile uint32_t counter = 0;
    if (htim->Instance == TIM2)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004f4:	d115      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      // 每10ms执行一次PC的轮询回应
      if(counter++ == USBD_HID_GetPollingInterval(&hUsbDeviceFS))
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004f8:	681c      	ldr	r4, [r3, #0]
 80004fa:	1c63      	adds	r3, r4, #1
 80004fc:	4a0b      	ldr	r2, [pc, #44]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	480b      	ldr	r0, [pc, #44]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000502:	f006 fd65 	bl	8006fd0 <USBD_HID_GetPollingInterval>
 8000506:	4603      	mov	r3, r0
 8000508:	429c      	cmp	r4, r3
 800050a:	d10a      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
        GetPointerData(HID_Buffer);
 800050c:	4809      	ldr	r0, [pc, #36]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800050e:	f7ff fe1d 	bl	800014c <GetPointerData>
        USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000512:	2208      	movs	r2, #8
 8000514:	4907      	ldr	r1, [pc, #28]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000516:	4806      	ldr	r0, [pc, #24]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000518:	f006 fd38 	bl	8006f8c <USBD_HID_SendReport>
        counter = 0;
 800051c:	4b03      	ldr	r3, [pc, #12]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
      }
    }
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	bf00      	nop
 800052c:	2000020c 	.word	0x2000020c
 8000530:	20000218 	.word	0x20000218
 8000534:	20000204 	.word	0x20000204

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <Error_Handler+0x8>

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a14      	ldr	r2, [pc, #80]	@ (80005a0 <HAL_MspInit+0x5c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a0e      	ldr	r2, [pc, #56]	@ (80005a0 <HAL_MspInit+0x5c>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <HAL_MspInit+0x60>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <HAL_MspInit+0x60>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010000 	.word	0x40010000

080005a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005b8:	d113      	bne.n	80005e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_TIM_Base_MspInit+0x44>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <HAL_TIM_Base_MspInit+0x44>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_TIM_Base_MspInit+0x44>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	201c      	movs	r0, #28
 80005d8:	f000 fa0d 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005dc:	201c      	movs	r0, #28
 80005de:	f000 fa26 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <HAL_UART_MspInit+0x9c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d139      	bne.n	8000684 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <HAL_UART_MspInit+0xa0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <HAL_UART_MspInit+0xa0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <HAL_UART_MspInit+0xa0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <HAL_UART_MspInit+0xa0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <HAL_UART_MspInit+0xa0>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <HAL_UART_MspInit+0xa0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000644:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4619      	mov	r1, r3
 8000654:	480f      	ldr	r0, [pc, #60]	@ (8000694 <HAL_UART_MspInit+0xa4>)
 8000656:	f000 fab7 	bl	8000bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800065a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800065e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4809      	ldr	r0, [pc, #36]	@ (8000694 <HAL_UART_MspInit+0xa4>)
 8000670:	f000 faaa 	bl	8000bc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2025      	movs	r0, #37	@ 0x25
 800067a:	f000 f9bc 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800067e:	2025      	movs	r0, #37	@ 0x25
 8000680:	f000 f9d5 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <NMI_Handler+0x4>

080006a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <MemManage_Handler+0x4>

080006b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <UsageFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 f892 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006f4:	4802      	ldr	r0, [pc, #8]	@ (8000700 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006f6:	f000 fd3f 	bl	8001178 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200006dc 	.word	0x200006dc

08000704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000708:	4802      	ldr	r0, [pc, #8]	@ (8000714 <TIM2_IRQHandler+0x10>)
 800070a:	f002 fecf 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000174 	.word	0x20000174

08000718 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800071c:	4802      	ldr	r0, [pc, #8]	@ (8000728 <USART1_IRQHandler+0x10>)
 800071e:	f003 fa71 	bl	8003c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001bc 	.word	0x200001bc

0800072c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000738:	f7ff fff8 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480b      	ldr	r0, [pc, #44]	@ (800076c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800073e:	490c      	ldr	r1, [pc, #48]	@ (8000770 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000740:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000754:	4c09      	ldr	r4, [pc, #36]	@ (800077c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f008 f8c7 	bl	80088f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd1b 	bl	80001a0 <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000774:	080089d4 	.word	0x080089d4
  ldr r2, =_sbss
 8000778:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800077c:	200009e0 	.word	0x200009e0

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	@ (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f923 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	200f      	movs	r0, #15
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fed0 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f93b 	bl	8000a4a <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f903 	bl	80009f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	@ (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	@ (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000008 	.word	0x20000008
 8000830:	20000210 	.word	0x20000210

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	@ (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000210 	.word	0x20000210

08000848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	@ (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4906      	ldr	r1, [pc, #24]	@ (80008e0 <__NVIC_EnableIRQ+0x34>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	@ (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	@ (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	@ 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	@ 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff ff90 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff2d 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff42 	bl	8000890 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff90 	bl	8000938 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5f 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff35 	bl	80008ac <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffa2 	bl	800099c <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d008      	beq.n	8000a8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e020      	b.n	8000ace <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 020e 	bic.w	r2, r2, #14
 8000a9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0201 	bic.w	r2, r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d005      	beq.n	8000afc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2204      	movs	r2, #4
 8000af4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e051      	b.n	8000ba0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 020e 	bic.w	r2, r2, #14
 8000b0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 0201 	bic.w	r2, r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <HAL_DMA_Abort_IT+0xd4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d029      	beq.n	8000b7a <HAL_DMA_Abort_IT+0xa2>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a21      	ldr	r2, [pc, #132]	@ (8000bb0 <HAL_DMA_Abort_IT+0xd8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d022      	beq.n	8000b76 <HAL_DMA_Abort_IT+0x9e>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb4 <HAL_DMA_Abort_IT+0xdc>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d01a      	beq.n	8000b70 <HAL_DMA_Abort_IT+0x98>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb8 <HAL_DMA_Abort_IT+0xe0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d012      	beq.n	8000b6a <HAL_DMA_Abort_IT+0x92>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1c      	ldr	r2, [pc, #112]	@ (8000bbc <HAL_DMA_Abort_IT+0xe4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d00a      	beq.n	8000b64 <HAL_DMA_Abort_IT+0x8c>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc0 <HAL_DMA_Abort_IT+0xe8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d102      	bne.n	8000b5e <HAL_DMA_Abort_IT+0x86>
 8000b58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b5c:	e00e      	b.n	8000b7c <HAL_DMA_Abort_IT+0xa4>
 8000b5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b62:	e00b      	b.n	8000b7c <HAL_DMA_Abort_IT+0xa4>
 8000b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b68:	e008      	b.n	8000b7c <HAL_DMA_Abort_IT+0xa4>
 8000b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6e:	e005      	b.n	8000b7c <HAL_DMA_Abort_IT+0xa4>
 8000b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b74:	e002      	b.n	8000b7c <HAL_DMA_Abort_IT+0xa4>
 8000b76:	2310      	movs	r3, #16
 8000b78:	e000      	b.n	8000b7c <HAL_DMA_Abort_IT+0xa4>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	4a11      	ldr	r2, [pc, #68]	@ (8000bc4 <HAL_DMA_Abort_IT+0xec>)
 8000b7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	4798      	blx	r3
    } 
  }
  return status;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40020008 	.word	0x40020008
 8000bb0:	4002001c 	.word	0x4002001c
 8000bb4:	40020030 	.word	0x40020030
 8000bb8:	40020044 	.word	0x40020044
 8000bbc:	40020058 	.word	0x40020058
 8000bc0:	4002006c 	.word	0x4002006c
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b08b      	sub	sp, #44	@ 0x2c
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e169      	b.n	8000eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 8158 	bne.w	8000eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4a9a      	ldr	r2, [pc, #616]	@ (8000e68 <HAL_GPIO_Init+0x2a0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d05e      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c04:	4a98      	ldr	r2, [pc, #608]	@ (8000e68 <HAL_GPIO_Init+0x2a0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d875      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c0a:	4a98      	ldr	r2, [pc, #608]	@ (8000e6c <HAL_GPIO_Init+0x2a4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d058      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c10:	4a96      	ldr	r2, [pc, #600]	@ (8000e6c <HAL_GPIO_Init+0x2a4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d86f      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c16:	4a96      	ldr	r2, [pc, #600]	@ (8000e70 <HAL_GPIO_Init+0x2a8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d052      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c1c:	4a94      	ldr	r2, [pc, #592]	@ (8000e70 <HAL_GPIO_Init+0x2a8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d869      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c22:	4a94      	ldr	r2, [pc, #592]	@ (8000e74 <HAL_GPIO_Init+0x2ac>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d04c      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c28:	4a92      	ldr	r2, [pc, #584]	@ (8000e74 <HAL_GPIO_Init+0x2ac>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d863      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c2e:	4a92      	ldr	r2, [pc, #584]	@ (8000e78 <HAL_GPIO_Init+0x2b0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d046      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c34:	4a90      	ldr	r2, [pc, #576]	@ (8000e78 <HAL_GPIO_Init+0x2b0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d85d      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c3a:	2b12      	cmp	r3, #18
 8000c3c:	d82a      	bhi.n	8000c94 <HAL_GPIO_Init+0xcc>
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d859      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c42:	a201      	add	r2, pc, #4	@ (adr r2, 8000c48 <HAL_GPIO_Init+0x80>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000cc3 	.word	0x08000cc3
 8000c4c:	08000c9d 	.word	0x08000c9d
 8000c50:	08000caf 	.word	0x08000caf
 8000c54:	08000cf1 	.word	0x08000cf1
 8000c58:	08000cf7 	.word	0x08000cf7
 8000c5c:	08000cf7 	.word	0x08000cf7
 8000c60:	08000cf7 	.word	0x08000cf7
 8000c64:	08000cf7 	.word	0x08000cf7
 8000c68:	08000cf7 	.word	0x08000cf7
 8000c6c:	08000cf7 	.word	0x08000cf7
 8000c70:	08000cf7 	.word	0x08000cf7
 8000c74:	08000cf7 	.word	0x08000cf7
 8000c78:	08000cf7 	.word	0x08000cf7
 8000c7c:	08000cf7 	.word	0x08000cf7
 8000c80:	08000cf7 	.word	0x08000cf7
 8000c84:	08000cf7 	.word	0x08000cf7
 8000c88:	08000cf7 	.word	0x08000cf7
 8000c8c:	08000ca5 	.word	0x08000ca5
 8000c90:	08000cb9 	.word	0x08000cb9
 8000c94:	4a79      	ldr	r2, [pc, #484]	@ (8000e7c <HAL_GPIO_Init+0x2b4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9a:	e02c      	b.n	8000cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e029      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e024      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e01f      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	623b      	str	r3, [r7, #32]
          break;
 8000cc0:	e01a      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e013      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	611a      	str	r2, [r3, #16]
          break;
 8000ce2:	e009      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	615a      	str	r2, [r3, #20]
          break;
 8000cee:	e003      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          break;
 8000cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2bff      	cmp	r3, #255	@ 0xff
 8000cfc:	d801      	bhi.n	8000d02 <HAL_GPIO_Init+0x13a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	e001      	b.n	8000d06 <HAL_GPIO_Init+0x13e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3304      	adds	r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2bff      	cmp	r3, #255	@ 0xff
 8000d0c:	d802      	bhi.n	8000d14 <HAL_GPIO_Init+0x14c>
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x152>
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	3b08      	subs	r3, #8
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	210f      	movs	r1, #15
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	6a39      	ldr	r1, [r7, #32]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d48:	4b4d      	ldr	r3, [pc, #308]	@ (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a4c      	ldr	r2, [pc, #304]	@ (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d60:	4a48      	ldr	r2, [pc, #288]	@ (8000e84 <HAL_GPIO_Init+0x2bc>)
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a40      	ldr	r2, [pc, #256]	@ (8000e88 <HAL_GPIO_Init+0x2c0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d013      	beq.n	8000db4 <HAL_GPIO_Init+0x1ec>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e8c <HAL_GPIO_Init+0x2c4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d00d      	beq.n	8000db0 <HAL_GPIO_Init+0x1e8>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3e      	ldr	r2, [pc, #248]	@ (8000e90 <HAL_GPIO_Init+0x2c8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d007      	beq.n	8000dac <HAL_GPIO_Init+0x1e4>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e94 <HAL_GPIO_Init+0x2cc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d101      	bne.n	8000da8 <HAL_GPIO_Init+0x1e0>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e006      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000da8:	2304      	movs	r3, #4
 8000daa:	e004      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e002      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000db4:	2300      	movs	r3, #0
 8000db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db8:	f002 0203 	and.w	r2, r2, #3
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dc6:	492f      	ldr	r1, [pc, #188]	@ (8000e84 <HAL_GPIO_Init+0x2bc>)
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	492c      	ldr	r1, [pc, #176]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	608b      	str	r3, [r1, #8]
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	4928      	ldr	r1, [pc, #160]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e08:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	4922      	ldr	r1, [pc, #136]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	60cb      	str	r3, [r1, #12]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	491e      	ldr	r1, [pc, #120]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4918      	ldr	r1, [pc, #96]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4914      	ldr	r1, [pc, #80]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d021      	beq.n	8000e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	490e      	ldr	r1, [pc, #56]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
 8000e64:	e021      	b.n	8000eaa <HAL_GPIO_Init+0x2e2>
 8000e66:	bf00      	nop
 8000e68:	10320000 	.word	0x10320000
 8000e6c:	10310000 	.word	0x10310000
 8000e70:	10220000 	.word	0x10220000
 8000e74:	10210000 	.word	0x10210000
 8000e78:	10120000 	.word	0x10120000
 8000e7c:	10110000 	.word	0x10110000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	40010c00 	.word	0x40010c00
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40011400 	.word	0x40011400
 8000e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_GPIO_Init+0x304>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4909      	ldr	r1, [pc, #36]	@ (8000ecc <HAL_GPIO_Init+0x304>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	3301      	adds	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f47f ae8e 	bne.w	8000bdc <HAL_GPIO_Init+0x14>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	372c      	adds	r7, #44	@ 0x2c
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e001      	b.n	8000ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	460b      	mov	r3, r1
 8000f08:	807b      	strh	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f0e:	787b      	ldrb	r3, [r7, #1]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f14:	887a      	ldrh	r2, [r7, #2]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f1a:	e003      	b.n	8000f24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	041a      	lsls	r2, r3, #16
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	611a      	str	r2, [r3, #16]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f30:	b08b      	sub	sp, #44	@ 0x2c
 8000f32:	af06      	add	r7, sp, #24
 8000f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0f1      	b.n	8001124 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d106      	bne.n	8000f5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f007 fa3f 	bl	80083d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fb54 	bl	8004614 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	687e      	ldr	r6, [r7, #4]
 8000f74:	466d      	mov	r5, sp
 8000f76:	f106 0410 	add.w	r4, r6, #16
 8000f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	602b      	str	r3, [r5, #0]
 8000f82:	1d33      	adds	r3, r6, #4
 8000f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f003 fb1e 	bl	80045c8 <USB_CoreInit>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2202      	movs	r2, #2
 8000f96:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0c2      	b.n	8001124 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fb4f 	bl	8004648 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e040      	b.n	8001032 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3303      	adds	r3, #3
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3338      	adds	r3, #56	@ 0x38
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	333c      	adds	r3, #60	@ 0x3c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	3340      	adds	r3, #64	@ 0x40
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	3301      	adds	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3b9      	bcc.n	8000fb0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e044      	b.n	80010cc <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3b5      	bcc.n	8001042 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	687e      	ldr	r6, [r7, #4]
 80010de:	466d      	mov	r5, sp
 80010e0:	f106 0410 	add.w	r4, r6, #16
 80010e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	602b      	str	r3, [r5, #0]
 80010ec:	1d33      	adds	r3, r6, #4
 80010ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f003 fab5 	bl	8004660 <USB_DevInit>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2202      	movs	r2, #2
 8001100:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e00d      	b.n	8001124 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fd36 	bl	8006b8e <USB_DevDisconnect>

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800112c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_PCD_Start+0x16>
 800113e:	2302      	movs	r3, #2
 8001140:	e016      	b.n	8001170 <HAL_PCD_Start+0x44>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fa4a 	bl	80045e8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001154:	2101      	movs	r1, #1
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f007 fb8d 	bl	8008876 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f005 fd0a 	bl	8006b7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fd0c 	bl	8006ba2 <USB_ReadInterrupts>
 800118a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 fb04 	bl	80017a4 <PCD_EP_ISR_Handler>

    return;
 800119c:	e119      	b.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011ba:	b292      	uxth	r2, r2
 80011bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f007 f984 	bl	80084ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011c6:	2100      	movs	r1, #0
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f905 	bl	80013d8 <HAL_PCD_SetAddress>

    return;
 80011ce:	e100      	b.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00c      	beq.n	80011f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011ec:	b292      	uxth	r2, r2
 80011ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011f2:	e0ee      	b.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00c      	beq.n	8001218 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001210:	b292      	uxth	r2, r2
 8001212:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001216:	e0dc      	b.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d027      	beq.n	8001272 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0204 	bic.w	r2, r2, #4
 8001234:	b292      	uxth	r2, r2
 8001236:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0208 	bic.w	r2, r2, #8
 800124c:	b292      	uxth	r2, r2
 800124e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f007 f974 	bl	8008540 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800126a:	b292      	uxth	r2, r2
 800126c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001270:	e0af      	b.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8083 	beq.w	8001384 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	77fb      	strb	r3, [r7, #31]
 8001282:	e010      	b.n	80012a6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	7ffb      	ldrb	r3, [r7, #31]
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	441a      	add	r2, r3
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	8812      	ldrh	r2, [r2, #0]
 8001294:	b292      	uxth	r2, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	3320      	adds	r3, #32
 800129a:	443b      	add	r3, r7
 800129c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	3301      	adds	r3, #1
 80012a4:	77fb      	strb	r3, [r7, #31]
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	d9eb      	bls.n	8001284 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	b292      	uxth	r2, r2
 80012c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80012dc:	bf00      	nop
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f6      	beq.n	80012de <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001302:	b292      	uxth	r2, r2
 8001304:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	e00f      	b.n	800132e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4611      	mov	r1, r2
 8001316:	7ffa      	ldrb	r2, [r7, #31]
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	440a      	add	r2, r1
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3320      	adds	r3, #32
 8001320:	443b      	add	r3, r7
 8001322:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001326:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001328:	7ffb      	ldrb	r3, [r7, #31]
 800132a:	3301      	adds	r3, #1
 800132c:	77fb      	strb	r3, [r7, #31]
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	2b07      	cmp	r3, #7
 8001332:	d9ec      	bls.n	800130e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0208 	orr.w	r2, r2, #8
 8001346:	b292      	uxth	r2, r2
 8001348:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800135e:	b292      	uxth	r2, r2
 8001360:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800136c:	b29a      	uxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0204 	orr.w	r2, r2, #4
 8001376:	b292      	uxth	r2, r2
 8001378:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f007 f8c5 	bl	800850c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001382:	e026      	b.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00f      	beq.n	80013ae <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001396:	b29a      	uxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013a0:	b292      	uxth	r2, r2
 80013a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f007 f883 	bl	80084b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013ac:	e011      	b.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00c      	beq.n	80013d2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013ca:	b292      	uxth	r2, r2
 80013cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013d0:	bf00      	nop
  }
}
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_PCD_SetAddress+0x1a>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e013      	b.n	800141a <HAL_PCD_SetAddress+0x42>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	78fa      	ldrb	r2, [r7, #3]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f005 fba2 	bl	8006b54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	4608      	mov	r0, r1
 800142c:	4611      	mov	r1, r2
 800142e:	461a      	mov	r2, r3
 8001430:	4603      	mov	r3, r0
 8001432:	70fb      	strb	r3, [r7, #3]
 8001434:	460b      	mov	r3, r1
 8001436:	803b      	strh	r3, [r7, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da0e      	bge.n	8001466 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2201      	movs	r2, #1
 8001462:	705a      	strb	r2, [r3, #1]
 8001464:	e00e      	b.n	8001484 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	f003 0207 	and.w	r2, r3, #7
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001490:	883a      	ldrh	r2, [r7, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	78ba      	ldrb	r2, [r7, #2]
 800149a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800149c:	78bb      	ldrb	r3, [r7, #2]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d102      	bne.n	80014a8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_PCD_EP_Open+0x94>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e00e      	b.n	80014d4 <HAL_PCD_EP_Open+0xb2>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68f9      	ldr	r1, [r7, #12]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 f8eb 	bl	80046a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80014d2:	7afb      	ldrb	r3, [r7, #11]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da0e      	bge.n	800150e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	705a      	strb	r2, [r3, #1]
 800150c:	e00e      	b.n	800152c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	f003 0207 	and.w	r2, r3, #7
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	b2da      	uxtb	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_PCD_EP_Close+0x6a>
 8001542:	2302      	movs	r3, #2
 8001544:	e00e      	b.n	8001564 <HAL_PCD_EP_Close+0x88>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fc63 	bl	8004e20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	460b      	mov	r3, r1
 800157a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	f003 0207 	and.w	r2, r3, #7
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2200      	movs	r2, #0
 80015aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6979      	ldr	r1, [r7, #20]
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fe1a 	bl	80051f8 <USB_EPStartXfer>

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	460b      	mov	r3, r1
 80015dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2201      	movs	r2, #1
 8001618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	b2da      	uxtb	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fde3 	bl	80051f8 <USB_EPStartXfer>

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	f003 0207 	and.w	r2, r3, #7
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	d901      	bls.n	800165a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e04c      	b.n	80016f4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800165a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	da0e      	bge.n	8001680 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	705a      	strb	r2, [r3, #1]
 800167e:	e00c      	b.n	800169a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_PCD_EP_SetStall+0x7e>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e01c      	b.n	80016f4 <HAL_PCD_EP_SetStall+0xb8>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 f946 	bl	800695a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f005 fa6b 	bl	8006bc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f003 020f 	and.w	r2, r3, #15
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	d901      	bls.n	800171a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e040      	b.n	800179c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800171a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800171e:	2b00      	cmp	r3, #0
 8001720:	da0e      	bge.n	8001740 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	705a      	strb	r2, [r3, #1]
 800173e:	e00e      	b.n	800175e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	f003 0207 	and.w	r2, r3, #7
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	b2da      	uxtb	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_PCD_EP_ClrStall+0x82>
 800177a:	2302      	movs	r3, #2
 800177c:	e00e      	b.n	800179c <HAL_PCD_EP_ClrStall+0xa0>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	4618      	mov	r0, r3
 800178e:	f005 f934 	bl	80069fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b096      	sub	sp, #88	@ 0x58
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017ac:	e3be      	b.n	8001f2c <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80017ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80017c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f040 8178 	bne.w	8001ac2 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d151      	bne.n	8001882 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80017ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017fe:	b29b      	uxth	r3, r3
 8001800:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3328      	adds	r3, #40	@ 0x28
 8001806:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001810:	b29b      	uxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	3302      	adds	r3, #2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001832:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	441a      	add	r2, r3
 800183e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001840:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001842:	2100      	movs	r1, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f006 fe1a 	bl	800847e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 836a 	beq.w	8001f2c <PCD_EP_ISR_Handler+0x788>
 8001858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f040 8365 	bne.w	8001f2c <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800186e:	b2da      	uxtb	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001880:	e354      	b.n	8001f2c <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001888:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001894:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800189c:	2b00      	cmp	r3, #0
 800189e:	d034      	beq.n	800190a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	3306      	adds	r3, #6
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ca:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80018d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018dc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f005 f9be 	bl	8006c60 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018f0:	4013      	ands	r3, r2
 80018f2:	823b      	strh	r3, [r7, #16]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	8a3a      	ldrh	r2, [r7, #16]
 80018fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018fe:	b292      	uxth	r2, r2
 8001900:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f006 fd8e 	bl	8008424 <HAL_PCD_SetupStageCallback>
 8001908:	e310      	b.n	8001f2c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800190a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800190e:	2b00      	cmp	r3, #0
 8001910:	f280 830c 	bge.w	8001f2c <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b29a      	uxth	r2, r3
 800191c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001920:	4013      	ands	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	8bfa      	ldrh	r2, [r7, #30]
 800192a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800192e:	b292      	uxth	r2, r2
 8001930:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	3306      	adds	r3, #6
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800195a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800195e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d019      	beq.n	800199a <PCD_EP_ISR_Handler+0x1f6>
 8001966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d015      	beq.n	800199a <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001974:	6959      	ldr	r1, [r3, #20]
 8001976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001978:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800197a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800197e:	b29b      	uxth	r3, r3
 8001980:	f005 f96e 	bl	8006c60 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	441a      	add	r2, r3
 800198e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001990:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001992:	2100      	movs	r1, #0
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f006 fd57 	bl	8008448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 82bd 	bne.w	8001f2c <PCD_EP_ISR_Handler+0x788>
 80019b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80019ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80019be:	f000 82b5 	beq.w	8001f2c <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4413      	add	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80019f8:	d91d      	bls.n	8001a36 <PCD_EP_ISR_Handler+0x292>
 80019fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <PCD_EP_ISR_Handler+0x270>
 8001a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a10:	3b01      	subs	r3, #1
 8001a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e026      	b.n	8001a84 <PCD_EP_ISR_Handler+0x2e0>
 8001a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <PCD_EP_ISR_Handler+0x2b0>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	e017      	b.n	8001a84 <PCD_EP_ISR_Handler+0x2e0>
 8001a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <PCD_EP_ISR_Handler+0x2ca>
 8001a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	029b      	lsls	r3, r3, #10
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a94:	827b      	strh	r3, [r7, #18]
 8001a96:	8a7b      	ldrh	r3, [r7, #18]
 8001a98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a9c:	827b      	strh	r3, [r7, #18]
 8001a9e:	8a7b      	ldrh	r3, [r7, #18]
 8001aa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001aa4:	827b      	strh	r3, [r7, #18]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	8a7b      	ldrh	r3, [r7, #18]
 8001aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	8013      	strh	r3, [r2, #0]
 8001ac0:	e234      	b.n	8001f2c <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ad6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f280 80fc 	bge.w	8001cd8 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001af6:	4013      	ands	r3, r2
 8001af8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001b0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b12:	b292      	uxth	r2, r2
 8001b14:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b16:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2e:	7b1b      	ldrb	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d125      	bne.n	8001b80 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	3306      	adds	r3, #6
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8092 	beq.w	8001c8e <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b70:	6959      	ldr	r1, [r3, #20]
 8001b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b74:	88da      	ldrh	r2, [r3, #6]
 8001b76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b7a:	f005 f871 	bl	8006c60 <USB_ReadPMA>
 8001b7e:	e086      	b.n	8001c8e <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b82:	78db      	ldrb	r3, [r3, #3]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d10a      	bne.n	8001b9e <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f9d9 	bl	8001f48 <HAL_PCD_EP_DB_Receive>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001b9c:	e077      	b.n	8001c8e <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	441a      	add	r2, r3
 8001bca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d024      	beq.n	8001c46 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3302      	adds	r3, #2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c24:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d02e      	beq.n	8001c8e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c36:	6959      	ldr	r1, [r3, #20]
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	891a      	ldrh	r2, [r3, #8]
 8001c3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c40:	f005 f80e 	bl	8006c60 <USB_ReadPMA>
 8001c44:	e023      	b.n	8001c8e <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3306      	adds	r3, #6
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c80:	6959      	ldr	r1, [r3, #20]
 8001c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c84:	895a      	ldrh	r2, [r3, #10]
 8001c86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c8a:	f004 ffe9 	bl	8006c60 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c96:	441a      	add	r2, r3
 8001c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ca4:	441a      	add	r2, r3
 8001ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <PCD_EP_ISR_Handler+0x51a>
 8001cb2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d206      	bcs.n	8001ccc <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f006 fbbf 	bl	8008448 <HAL_PCD_DataOutStageCallback>
 8001cca:	e005      	b.n	8001cd8 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fa90 	bl	80051f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001cd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8123 	beq.w	8001f2c <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ce6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d38:	78db      	ldrb	r3, [r3, #3]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	f040 80a2 	bne.w	8001e84 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d48:	7b1b      	ldrb	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8093 	beq.w	8001e76 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d046      	beq.n	8001dea <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d126      	bne.n	8001db2 <PCD_EP_ISR_Handler+0x60e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	4413      	add	r3, r2
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	011a      	lsls	r2, r3, #4
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	4413      	add	r3, r2
 8001d86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e061      	b.n	8001e76 <PCD_EP_ISR_Handler+0x6d2>
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d15d      	bne.n	8001e76 <PCD_EP_ISR_Handler+0x6d2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dce:	4413      	add	r3, r2
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	011a      	lsls	r2, r3, #4
 8001dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dda:	4413      	add	r3, r2
 8001ddc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	2200      	movs	r2, #0
 8001de6:	801a      	strh	r2, [r3, #0]
 8001de8:	e045      	b.n	8001e76 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d126      	bne.n	8001e46 <PCD_EP_ISR_Handler+0x6a2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0c:	4413      	add	r3, r2
 8001e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	011a      	lsls	r2, r3, #4
 8001e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e18:	4413      	add	r3, r2
 8001e1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2e:	801a      	strh	r2, [r3, #0]
 8001e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	e017      	b.n	8001e76 <PCD_EP_ISR_Handler+0x6d2>
 8001e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d113      	bne.n	8001e76 <PCD_EP_ISR_Handler+0x6d2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e5c:	4413      	add	r3, r2
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	011a      	lsls	r2, r3, #4
 8001e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e68:	4413      	add	r3, r2
 8001e6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e72:	2200      	movs	r2, #0
 8001e74:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f006 fafe 	bl	800847e <HAL_PCD_DataInStageCallback>
 8001e82:	e053      	b.n	8001f2c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d146      	bne.n	8001f1e <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d907      	bls.n	8001ed8 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ed0:	1ad2      	subs	r2, r2, r3
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed4:	619a      	str	r2, [r3, #24]
 8001ed6:	e002      	b.n	8001ede <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f006 fac6 	bl	800847e <HAL_PCD_DataInStageCallback>
 8001ef2:	e01b      	b.n	8001f2c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001efc:	441a      	add	r2, r3
 8001efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f00:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f0a:	441a      	add	r2, r3
 8001f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 f96e 	bl	80051f8 <USB_EPStartXfer>
 8001f1c:	e006      	b.n	8001f2c <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f22:	461a      	mov	r2, r3
 8001f24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f91b 	bl	8002162 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f6ff ac38 	blt.w	80017ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3758      	adds	r7, #88	@ 0x58
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d07e      	beq.n	800205e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	3302      	adds	r3, #2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f88:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	8b7b      	ldrh	r3, [r7, #26]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d306      	bcc.n	8001fa2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	8b7b      	ldrh	r3, [r7, #26]
 8001f9a:	1ad2      	subs	r2, r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	619a      	str	r2, [r3, #24]
 8001fa0:	e002      	b.n	8001fa8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d123      	bne.n	8001ff8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fca:	833b      	strh	r3, [r7, #24]
 8001fcc:	8b3b      	ldrh	r3, [r7, #24]
 8001fce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fd2:	833b      	strh	r3, [r7, #24]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	441a      	add	r2, r3
 8001fe2:	8b3b      	ldrh	r3, [r7, #24]
 8001fe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01f      	beq.n	8002042 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800201c:	82fb      	strh	r3, [r7, #22]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	441a      	add	r2, r3
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800203a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800203e:	b29b      	uxth	r3, r3
 8002040:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002042:	8b7b      	ldrh	r3, [r7, #26]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8087 	beq.w	8002158 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6959      	ldr	r1, [r3, #20]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	891a      	ldrh	r2, [r3, #8]
 8002056:	8b7b      	ldrh	r3, [r7, #26]
 8002058:	f004 fe02 	bl	8006c60 <USB_ReadPMA>
 800205c:	e07c      	b.n	8002158 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	3306      	adds	r3, #6
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002086:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	8b7b      	ldrh	r3, [r7, #26]
 800208e:	429a      	cmp	r2, r3
 8002090:	d306      	bcc.n	80020a0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	8b7b      	ldrh	r3, [r7, #26]
 8002098:	1ad2      	subs	r2, r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	619a      	str	r2, [r3, #24]
 800209e:	e002      	b.n	80020a6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d123      	bne.n	80020f6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020c8:	83fb      	strh	r3, [r7, #30]
 80020ca:	8bfb      	ldrh	r3, [r7, #30]
 80020cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020d0:	83fb      	strh	r3, [r7, #30]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	441a      	add	r2, r3
 80020e0:	8bfb      	ldrh	r3, [r7, #30]
 80020e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11f      	bne.n	8002140 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800211a:	83bb      	strh	r3, [r7, #28]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	8bbb      	ldrh	r3, [r7, #28]
 800212c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002138:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800213c:	b29b      	uxth	r3, r3
 800213e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002140:	8b7b      	ldrh	r3, [r7, #26]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	895a      	ldrh	r2, [r3, #10]
 8002152:	8b7b      	ldrh	r3, [r7, #26]
 8002154:	f004 fd84 	bl	8006c60 <USB_ReadPMA>
    }
  }

  return count;
 8002158:	8b7b      	ldrh	r3, [r7, #26]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b0a4      	sub	sp, #144	@ 0x90
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 81dd 	beq.w	8002536 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002184:	b29b      	uxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	3302      	adds	r3, #2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d907      	bls.n	80021c4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	619a      	str	r2, [r3, #24]
 80021c2:	e002      	b.n	80021ca <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 80b9 	bne.w	8002346 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d126      	bne.n	800222a <HAL_PCD_EP_DB_Transmit+0xc8>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f0:	4413      	add	r3, r2
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	011a      	lsls	r2, r3, #4
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	4413      	add	r3, r2
 80021fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220e:	b29a      	uxth	r2, r3
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29a      	uxth	r2, r3
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	e01a      	b.n	8002260 <HAL_PCD_EP_DB_Transmit+0xfe>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d116      	bne.n	8002260 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002246:	4413      	add	r3, r2
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	011a      	lsls	r2, r3, #4
 8002250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002252:	4413      	add	r3, r2
 8002254:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002258:	633b      	str	r3, [r7, #48]	@ 0x30
 800225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225c:	2200      	movs	r2, #0
 800225e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d126      	bne.n	80022bc <HAL_PCD_EP_DB_Transmit+0x15a>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	011a      	lsls	r2, r3, #4
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	e017      	b.n	80022ec <HAL_PCD_EP_DB_Transmit+0x18a>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d113      	bne.n	80022ec <HAL_PCD_EP_DB_Transmit+0x18a>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	4413      	add	r3, r2
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	011a      	lsls	r2, r3, #4
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	4413      	add	r3, r2
 80022e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2200      	movs	r2, #0
 80022ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f006 f8c3 	bl	800847e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 82fc 	beq.w	80028fc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800231a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800231e:	82fb      	strh	r3, [r7, #22]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	8afb      	ldrh	r3, [r7, #22]
 8002330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800233c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002340:	b29b      	uxth	r3, r3
 8002342:	8013      	strh	r3, [r2, #0]
 8002344:	e2da      	b.n	80028fc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d021      	beq.n	8002394 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	441a      	add	r2, r3
 800237c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002380:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002384:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002388:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800238c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002390:	b29b      	uxth	r3, r3
 8002392:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800239a:	2b01      	cmp	r3, #1
 800239c:	f040 82ae 	bne.w	80028fc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023a8:	441a      	add	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	69da      	ldr	r2, [r3, #28]
 80023b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023b6:	441a      	add	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d30b      	bcc.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	621a      	str	r2, [r3, #32]
 80023de:	e017      	b.n	8002410 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d108      	bne.n	80023fa <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023f8:	e00a      	b.n	8002410 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d165      	bne.n	80024e4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800242c:	4413      	add	r3, r2
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	011a      	lsls	r2, r3, #4
 8002436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002438:	4413      	add	r3, r2
 800243a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800243e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244a:	b29a      	uxth	r2, r3
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002454:	2b3e      	cmp	r3, #62	@ 0x3e
 8002456:	d91d      	bls.n	8002494 <HAL_PCD_EP_DB_Transmit+0x332>
 8002458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_PCD_EP_DB_Transmit+0x310>
 800246c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800246e:	3b01      	subs	r3, #1
 8002470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
 8002478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247a:	b29b      	uxth	r3, r3
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	b29b      	uxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b29b      	uxth	r3, r3
 8002484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248c:	b29a      	uxth	r2, r3
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e044      	b.n	800251e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x350>
 800249c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e035      	b.n	800251e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_PCD_EP_DB_Transmit+0x36a>
 80024c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024c8:	3301      	adds	r3, #1
 80024ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	e01c      	b.n	800251e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	785b      	ldrb	r3, [r3, #1]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d118      	bne.n	800251e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002500:	4413      	add	r3, r2
 8002502:	647b      	str	r3, [r7, #68]	@ 0x44
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	011a      	lsls	r2, r3, #4
 800250a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800250c:	4413      	add	r3, r2
 800250e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002512:	643b      	str	r3, [r7, #64]	@ 0x40
 8002514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002518:	b29a      	uxth	r2, r3
 800251a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800251c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6959      	ldr	r1, [r3, #20]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	891a      	ldrh	r2, [r3, #8]
 800252a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800252e:	b29b      	uxth	r3, r3
 8002530:	f004 fb51 	bl	8006bd6 <USB_WritePMA>
 8002534:	e1e2      	b.n	80028fc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	3306      	adds	r3, #6
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800256a:	429a      	cmp	r2, r3
 800256c:	d307      	bcc.n	800257e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	619a      	str	r2, [r3, #24]
 800257c:	e002      	b.n	8002584 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 80c0 	bne.w	800270e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d126      	bne.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x482>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025aa:	4413      	add	r3, r2
 80025ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	011a      	lsls	r2, r3, #4
 80025b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29a      	uxth	r2, r3
 80025de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e01a      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d116      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002600:	4413      	add	r3, r2
 8002602:	667b      	str	r3, [r7, #100]	@ 0x64
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	011a      	lsls	r2, r3, #4
 800260a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260c:	4413      	add	r3, r2
 800260e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002612:	663b      	str	r3, [r7, #96]	@ 0x60
 8002614:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d12b      	bne.n	8002680 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263c:	4413      	add	r3, r2
 800263e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011a      	lsls	r2, r3, #4
 8002646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002648:	4413      	add	r3, r2
 800264a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800264e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265e:	b29a      	uxth	r2, r3
 8002660:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002676:	b29a      	uxth	r2, r3
 8002678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e017      	b.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d113      	bne.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002696:	4413      	add	r3, r2
 8002698:	677b      	str	r3, [r7, #116]	@ 0x74
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	011a      	lsls	r2, r3, #4
 80026a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a2:	4413      	add	r3, r2
 80026a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80026aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ac:	2200      	movs	r2, #0
 80026ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f005 fee1 	bl	800847e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 811a 	bne.w	80028fc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026e2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	441a      	add	r2, r3
 80026f4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002708:	b29b      	uxth	r3, r3
 800270a:	8013      	strh	r3, [r2, #0]
 800270c:	e0f6      	b.n	80028fc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d121      	bne.n	800275c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800272e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002732:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	441a      	add	r2, r3
 8002744:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800274c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002758:	b29b      	uxth	r3, r3
 800275a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002762:	2b01      	cmp	r3, #1
 8002764:	f040 80ca 	bne.w	80028fc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002770:	441a      	add	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800277e:	441a      	add	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	429a      	cmp	r2, r3
 800278e:	d30b      	bcc.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a0:	1ad2      	subs	r2, r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	621a      	str	r2, [r3, #32]
 80027a6:	e017      	b.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d108      	bne.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80027b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80027c0:	e00a      	b.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d165      	bne.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x750>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027fa:	4413      	add	r3, r2
 80027fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	011a      	lsls	r2, r3, #4
 8002804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002806:	4413      	add	r3, r2
 8002808:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800280c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800280e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002818:	b29a      	uxth	r2, r3
 800281a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002822:	2b3e      	cmp	r3, #62	@ 0x3e
 8002824:	d91d      	bls.n	8002862 <HAL_PCD_EP_DB_Transmit+0x700>
 8002826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800282e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <HAL_PCD_EP_DB_Transmit+0x6de>
 800283a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800283c:	3b01      	subs	r3, #1
 800283e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29a      	uxth	r2, r3
 8002846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002848:	b29b      	uxth	r3, r3
 800284a:	029b      	lsls	r3, r3, #10
 800284c:	b29b      	uxth	r3, r3
 800284e:	4313      	orrs	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285a:	b29a      	uxth	r2, r3
 800285c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	e041      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <HAL_PCD_EP_DB_Transmit+0x71e>
 800286a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002878:	b29a      	uxth	r2, r3
 800287a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	e032      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_PCD_EP_DB_Transmit+0x738>
 8002894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002896:	3301      	adds	r3, #1
 8002898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800289a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	029b      	lsls	r3, r3, #10
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	e019      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x784>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d115      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x784>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c8:	4413      	add	r3, r2
 80028ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	011a      	lsls	r2, r3, #4
 80028d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d4:	4413      	add	r3, r2
 80028d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028da:	653b      	str	r3, [r7, #80]	@ 0x50
 80028dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	6959      	ldr	r1, [r3, #20]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	895a      	ldrh	r2, [r3, #10]
 80028f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f004 f96d 	bl	8006bd6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002916:	82bb      	strh	r3, [r7, #20]
 8002918:	8abb      	ldrh	r3, [r7, #20]
 800291a:	f083 0310 	eor.w	r3, r3, #16
 800291e:	82bb      	strh	r3, [r7, #20]
 8002920:	8abb      	ldrh	r3, [r7, #20]
 8002922:	f083 0320 	eor.w	r3, r3, #32
 8002926:	82bb      	strh	r3, [r7, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	441a      	add	r2, r3
 8002936:	8abb      	ldrh	r3, [r7, #20]
 8002938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800293c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002948:	b29b      	uxth	r3, r3
 800294a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3790      	adds	r7, #144	@ 0x90
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	817b      	strh	r3, [r7, #10]
 8002964:	4613      	mov	r3, r2
 8002966:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002968:	897b      	ldrh	r3, [r7, #10]
 800296a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	897b      	ldrh	r3, [r7, #10]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e009      	b.n	80029a0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800298c:	897a      	ldrh	r2, [r7, #10]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029a0:	893b      	ldrh	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	80da      	strh	r2, [r3, #6]
 80029b4:	e00b      	b.n	80029ce <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2201      	movs	r2, #1
 80029ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e272      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8087 	beq.w	8002b0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029fc:	4b92      	ldr	r3, [pc, #584]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d00c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a08:	4b8f      	ldr	r3, [pc, #572]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d112      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5e>
 8002a14:	4b8c      	ldr	r3, [pc, #560]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a20:	d10b      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a22:	4b89      	ldr	r3, [pc, #548]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d06c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x12c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d168      	bne.n	8002b08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e24c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x76>
 8002a44:	4b80      	ldr	r3, [pc, #512]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7f      	ldr	r2, [pc, #508]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e02e      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x98>
 8002a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b78      	ldr	r3, [pc, #480]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a77      	ldr	r2, [pc, #476]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0xbc>
 8002a7e:	4b72      	ldr	r3, [pc, #456]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a71      	ldr	r2, [pc, #452]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd4>
 8002a98:	4b6b      	ldr	r3, [pc, #428]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b68      	ldr	r3, [pc, #416]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a67      	ldr	r2, [pc, #412]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fd febc 	bl	8000834 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fd feb8 	bl	8000834 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	@ 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e200      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xe4>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fd fea8 	bl	8000834 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fd fea4 	bl	8000834 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1ec      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	4b53      	ldr	r3, [pc, #332]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x10c>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b16:	4b4c      	ldr	r3, [pc, #304]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b22:	4b49      	ldr	r3, [pc, #292]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x18c>
 8002b2e:	4b46      	ldr	r3, [pc, #280]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b43      	ldr	r3, [pc, #268]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x176>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1c0      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b3d      	ldr	r3, [pc, #244]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4939      	ldr	r1, [pc, #228]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_RCC_OscConfig+0x270>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fd fe5d 	bl	8000834 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fd fe59 	bl	8000834 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1a1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4927      	ldr	r1, [pc, #156]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <HAL_RCC_OscConfig+0x270>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fd fe3c 	bl	8000834 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7fd fe38 	bl	8000834 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e180      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d03a      	beq.n	8002c60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d019      	beq.n	8002c26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7fd fe1c 	bl	8000834 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fd fe18 	bl	8000834 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e160      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f000 face 	bl	80031c0 <RCC_Delay>
 8002c24:	e01c      	b.n	8002c60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_RCC_OscConfig+0x274>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fd fe02 	bl	8000834 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c32:	e00f      	b.n	8002c54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fd fdfe 	bl	8000834 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d908      	bls.n	8002c54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e146      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	42420000 	.word	0x42420000
 8002c50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b92      	ldr	r3, [pc, #584]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e9      	bne.n	8002c34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a6 	beq.w	8002dba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	4b88      	ldr	r3, [pc, #544]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4a87      	ldr	r2, [pc, #540]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	61d3      	str	r3, [r2, #28]
 8002c8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b82      	ldr	r3, [pc, #520]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fd fdbf 	bl	8000834 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fd fdbb 	bl	8000834 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	@ 0x64
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e103      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b75      	ldr	r3, [pc, #468]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x312>
 8002ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e02d      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x334>
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a69      	ldr	r2, [pc, #420]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	4b67      	ldr	r3, [pc, #412]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a66      	ldr	r2, [pc, #408]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	e01c      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d10c      	bne.n	8002d32 <HAL_RCC_OscConfig+0x356>
 8002d18:	4b61      	ldr	r3, [pc, #388]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a60      	ldr	r2, [pc, #384]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6213      	str	r3, [r2, #32]
 8002d30:	e00b      	b.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002d32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a5a      	ldr	r2, [pc, #360]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	4b58      	ldr	r3, [pc, #352]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a57      	ldr	r2, [pc, #348]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d015      	beq.n	8002d7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fd fd6f 	bl	8000834 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fd fd6b 	bl	8000834 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0b1      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ee      	beq.n	8002d5a <HAL_RCC_OscConfig+0x37e>
 8002d7c:	e014      	b.n	8002da8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fd fd59 	bl	8000834 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fd fd55 	bl	8000834 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e09b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	4b40      	ldr	r3, [pc, #256]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ee      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dae:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8087 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc4:	4b36      	ldr	r3, [pc, #216]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d061      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d146      	bne.n	8002e66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd8:	4b33      	ldr	r3, [pc, #204]	@ (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fd fd29 	bl	8000834 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fd fd25 	bl	8000834 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e06d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df8:	4b29      	ldr	r3, [pc, #164]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	4921      	ldr	r1, [pc, #132]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a19      	ldr	r1, [r3, #32]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	430b      	orrs	r3, r1
 8002e32:	491b      	ldr	r1, [pc, #108]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fd fcf9 	bl	8000834 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fd fcf5 	bl	8000834 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e03d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46a>
 8002e64:	e035      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fd fce2 	bl	8000834 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fd fcde 	bl	8000834 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e026      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x498>
 8002e92:	e01e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e019      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_OscConfig+0x500>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0d0      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b67      	ldr	r3, [pc, #412]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4965      	ldr	r1, [pc, #404]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b63      	ldr	r3, [pc, #396]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a58      	ldr	r2, [pc, #352]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f54:	4b53      	ldr	r3, [pc, #332]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a52      	ldr	r2, [pc, #328]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b50      	ldr	r3, [pc, #320]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	494d      	ldr	r1, [pc, #308]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d040      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b47      	ldr	r3, [pc, #284]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d115      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b41      	ldr	r3, [pc, #260]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e073      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3d      	ldr	r3, [pc, #244]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06b      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b39      	ldr	r3, [pc, #228]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4936      	ldr	r1, [pc, #216]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7fd fc30 	bl	8000834 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fd fc2c 	bl	8000834 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e053      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2d      	ldr	r3, [pc, #180]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b27      	ldr	r3, [pc, #156]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d210      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4922      	ldr	r1, [pc, #136]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4916      	ldr	r1, [pc, #88]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	490e      	ldr	r1, [pc, #56]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306e:	f000 f821 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490a      	ldr	r1, [pc, #40]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <HAL_RCC_ClockConfig+0x1cc>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_ClockConfig+0x1d0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fb8e 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	080089a0 	.word	0x080089a0
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x94>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x30>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x36>
 80030e2:	e027      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_RCC_GetSysClockFreq+0x98>)
 80030e6:	613b      	str	r3, [r7, #16]
      break;
 80030e8:	e027      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030f4:	5cd3      	ldrb	r3, [r2, r3]
 80030f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003102:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x94>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0c5b      	lsrs	r3, r3, #17
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	4a11      	ldr	r2, [pc, #68]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xa0>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <HAL_RCC_GetSysClockFreq+0x98>)
 8003116:	fb03 f202 	mul.w	r2, r3, r2
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e004      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a0c      	ldr	r2, [pc, #48]	@ (8003158 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	613b      	str	r3, [r7, #16]
      break;
 8003132:	e002      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCC_GetSysClockFreq+0x98>)
 8003136:	613b      	str	r3, [r7, #16]
      break;
 8003138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313a:	693b      	ldr	r3, [r7, #16]
}
 800313c:	4618      	mov	r0, r3
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	007a1200 	.word	0x007a1200
 8003150:	080089b8 	.word	0x080089b8
 8003154:	080089c8 	.word	0x080089c8
 8003158:	003d0900 	.word	0x003d0900

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b02      	ldr	r3, [pc, #8]	@ (800316c <HAL_RCC_GetHCLKFreq+0x10>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	20000000 	.word	0x20000000

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003174:	f7ff fff2 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	@ (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	080089b0 	.word	0x080089b0

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800319c:	f7ff ffde 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	0adb      	lsrs	r3, r3, #11
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	@ (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	080089b0 	.word	0x080089b0

080031c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c8:	4b0a      	ldr	r3, [pc, #40]	@ (80031f4 <RCC_Delay+0x34>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	@ (80031f8 <RCC_Delay+0x38>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031dc:	bf00      	nop
  }
  while (Delay --);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	60fa      	str	r2, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <RCC_Delay+0x1c>
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000000 	.word	0x20000000
 80031f8:	10624dd3 	.word	0x10624dd3

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d07d      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321c:	4b4f      	ldr	r3, [pc, #316]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b4c      	ldr	r3, [pc, #304]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	4a4b      	ldr	r2, [pc, #300]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003232:	61d3      	str	r3, [r2, #28]
 8003234:	4b49      	ldr	r3, [pc, #292]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	4b46      	ldr	r3, [pc, #280]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d118      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003250:	4b43      	ldr	r3, [pc, #268]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a42      	ldr	r2, [pc, #264]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325c:	f7fd faea 	bl	8000834 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003262:	e008      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003264:	f7fd fae6 	bl	8000834 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	@ 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e06d      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b3a      	ldr	r3, [pc, #232]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003282:	4b36      	ldr	r3, [pc, #216]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d02e      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d027      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a0:	4b2e      	ldr	r3, [pc, #184]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b6:	4a29      	ldr	r2, [pc, #164]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d014      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fd fab5 	bl	8000834 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fd fab1 	bl	8000834 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e036      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ee      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4917      	ldr	r1, [pc, #92]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003308:	4b14      	ldr	r3, [pc, #80]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4a13      	ldr	r2, [pc, #76]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003312:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003320:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	490b      	ldr	r1, [pc, #44]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800333e:	4b07      	ldr	r3, [pc, #28]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4904      	ldr	r1, [pc, #16]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	40007000 	.word	0x40007000
 8003364:	42420440 	.word	0x42420440

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e041      	b.n	80033fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd f90a 	bl	80005a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fa74 	bl	8003894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e03a      	b.n	8003496 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <HAL_TIM_Base_Start_IT+0x98>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x58>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344a:	d009      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x58>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a14      	ldr	r2, [pc, #80]	@ (80034a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x58>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a13      	ldr	r2, [pc, #76]	@ (80034a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d111      	bne.n	8003484 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b06      	cmp	r3, #6
 8003470:	d010      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003482:	e007      	b.n	8003494 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0202 	mvn.w	r2, #2
 80034d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9b4 	bl	800385c <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f9a7 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9b6 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f98a 	bl	800385c <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f97d 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f98c 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0208 	mvn.w	r2, #8
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f960 	bl	800385c <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f953 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f962 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0210 	mvn.w	r2, #16
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2208      	movs	r2, #8
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f936 	bl	800385c <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f929 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f938 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0201 	mvn.w	r2, #1
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fc ff5a 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa7b 	bl	8003b52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b40      	cmp	r3, #64	@ 0x40
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8fc 	bl	8003880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0220 	mvn.w	r2, #32
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa46 	bl	8003b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_ConfigClockSource+0x1c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e0b4      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x186>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003710:	d03e      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xd4>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003716:	f200 8087 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371e:	f000 8086 	beq.w	800382e <HAL_TIM_ConfigClockSource+0x172>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003726:	d87f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b70      	cmp	r3, #112	@ 0x70
 800372a:	d01a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xa6>
 800372c:	2b70      	cmp	r3, #112	@ 0x70
 800372e:	d87b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b60      	cmp	r3, #96	@ 0x60
 8003732:	d050      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003734:	2b60      	cmp	r3, #96	@ 0x60
 8003736:	d877      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b50      	cmp	r3, #80	@ 0x50
 800373a:	d03c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xfa>
 800373c:	2b50      	cmp	r3, #80	@ 0x50
 800373e:	d873      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b40      	cmp	r3, #64	@ 0x40
 8003742:	d058      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003744:	2b40      	cmp	r3, #64	@ 0x40
 8003746:	d86f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b30      	cmp	r3, #48	@ 0x30
 800374a:	d064      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800374c:	2b30      	cmp	r3, #48	@ 0x30
 800374e:	d86b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d060      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d867      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b10      	cmp	r3, #16
 800375e:	d05a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	e062      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	f000 f968 	bl	8003a46 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e04f      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	f000 f951 	bl	8003a46 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e03c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 f8c8 	bl	8003958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2150      	movs	r1, #80	@ 0x50
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f91f 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 80037d4:	e02c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 f8e6 	bl	80039b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2160      	movs	r1, #96	@ 0x60
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f90f 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 80037f4:	e01c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	461a      	mov	r2, r3
 8003804:	f000 f8a8 	bl	8003958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	@ 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f8ff 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 8003814:	e00c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 f8f6 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 8003826:	e003      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e000      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800382e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
	...

08003894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a29      	ldr	r2, [pc, #164]	@ (800394c <TIM_Base_SetConfig+0xb8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_Base_SetConfig+0x30>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b2:	d007      	beq.n	80038c4 <TIM_Base_SetConfig+0x30>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <TIM_Base_SetConfig+0xbc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0x30>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <TIM_Base_SetConfig+0xc0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d108      	bne.n	80038d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <TIM_Base_SetConfig+0xb8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0x62>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0x62>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <TIM_Base_SetConfig+0xbc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0x62>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <TIM_Base_SetConfig+0xc0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a07      	ldr	r2, [pc, #28]	@ (800394c <TIM_Base_SetConfig+0xb8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d103      	bne.n	800393c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	615a      	str	r2, [r3, #20]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800

08003958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f023 0201 	bic.w	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f023 030a 	bic.w	r3, r3, #10
 8003994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0210 	bic.w	r2, r3, #16
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	031b      	lsls	r3, r3, #12
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 0307 	orr.w	r3, r3, #7
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	021a      	lsls	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e046      	b.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a16      	ldr	r2, [pc, #88]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d009      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10c      	bne.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800

08003b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e042      	b.n	8003bfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fc fd30 	bl	80005f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	@ 0x24
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fc7f 	bl	80044ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0ba      	sub	sp, #232	@ 0xe8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_UART_IRQHandler+0x66>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fb63 	bl	800432e <UART_Receive_IT>
      return;
 8003c68:	e25b      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80de 	beq.w	8003e30 <HAL_UART_IRQHandler+0x22c>
 8003c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80d1 	beq.w	8003e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xae>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xd2>
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_UART_IRQHandler+0xf6>
 8003ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_UART_IRQHandler+0x126>
 8003d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0208 	orr.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 81f2 	beq.w	8004118 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_UART_IRQHandler+0x14e>
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 faee 	bl	800432e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_UART_IRQHandler+0x17a>
 8003d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04f      	beq.n	8003e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9f8 	bl	8004174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d041      	beq.n	8003e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1d9      	bne.n	8003d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d013      	beq.n	8003e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_UART_IRQHandler+0x3e0>)
 8003dec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fe70 	bl	8000ad8 <HAL_DMA_Abort_IT>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00e      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f99c 	bl	800414c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e00a      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f998 	bl	800414c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	e006      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f994 	bl	800414c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e2a:	e175      	b.n	8004118 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	bf00      	nop
    return;
 8003e2e:	e173      	b.n	8004118 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 814f 	bne.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8148 	beq.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8141 	beq.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80b6 	beq.w	8003fe8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8145 	beq.w	800411c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	f080 813e 	bcs.w	800411c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	f000 8088 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ece:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ee0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1d9      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f24:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e1      	bne.n	8003f00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f60:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f62:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f94:	f023 0310 	bic.w	r3, r3, #16
 8003f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fa6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fa8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e3      	bne.n	8003f82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fd4f 	bl	8000a62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8bf 	bl	800415e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe0:	e09c      	b.n	800411c <HAL_UART_IRQHandler+0x518>
 8003fe2:	bf00      	nop
 8003fe4:	08004239 	.word	0x08004239
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 808e 	beq.w	8004120 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8089 	beq.w	8004120 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004032:	647a      	str	r2, [r7, #68]	@ 0x44
 8004034:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e3      	bne.n	800400e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	623b      	str	r3, [r7, #32]
   return(result);
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3314      	adds	r3, #20
 8004066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800406a:	633a      	str	r2, [r7, #48]	@ 0x30
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e3      	bne.n	8004046 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	60fb      	str	r3, [r7, #12]
   return(result);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0310 	bic.w	r3, r3, #16
 80040a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	617b      	str	r3, [r7, #20]
   return(result);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e3      	bne.n	800408c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f844 	bl	800415e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040d6:	e023      	b.n	8004120 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_UART_IRQHandler+0x4f4>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f8b5 	bl	8004260 <UART_Transmit_IT>
    return;
 80040f6:	e014      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_UART_IRQHandler+0x51e>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8f4 	bl	80042fe <UART_EndTransmit_IT>
    return;
 8004116:	e004      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
    return;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
      return;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
      return;
 8004120:	bf00      	nop
  }
}
 8004122:	37e8      	adds	r7, #232	@ 0xe8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b095      	sub	sp, #84	@ 0x54
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800419c:	643a      	str	r2, [r7, #64]	@ 0x40
 800419e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e5      	bne.n	800417c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	61fb      	str	r3, [r7, #28]
   return(result);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d119      	bne.n	8004220 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0310 	bic.w	r3, r3, #16
 8004202:	647b      	str	r3, [r7, #68]	@ 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420c:	61ba      	str	r2, [r7, #24]
 800420e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	613b      	str	r3, [r7, #16]
   return(result);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800422e:	bf00      	nop
 8004230:	3754      	adds	r7, #84	@ 0x54
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff7a 	bl	800414c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b21      	cmp	r3, #33	@ 0x21
 8004272:	d13e      	bne.n	80042f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427c:	d114      	bne.n	80042a8 <UART_Transmit_IT+0x48>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d110      	bne.n	80042a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800429a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]
 80042a6:	e008      	b.n	80042ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	1c59      	adds	r1, r3, #1
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6211      	str	r1, [r2, #32]
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4619      	mov	r1, r3
 80042c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004314:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ff02 	bl	8004128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b08c      	sub	sp, #48	@ 0x30
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b22      	cmp	r3, #34	@ 0x22
 8004340:	f040 80ae 	bne.w	80044a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434c:	d117      	bne.n	800437e <UART_Receive_IT+0x50>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d113      	bne.n	800437e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436c:	b29a      	uxth	r2, r3
 800436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004370:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	1c9a      	adds	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28
 800437c:	e026      	b.n	80043cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004390:	d007      	beq.n	80043a2 <UART_Receive_IT+0x74>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <UART_Receive_IT+0x82>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e008      	b.n	80043c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d15d      	bne.n	800449c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0220 	bic.w	r2, r2, #32
 80043ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	2b01      	cmp	r3, #1
 8004424:	d135      	bne.n	8004492 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	613b      	str	r3, [r7, #16]
   return(result);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f023 0310 	bic.w	r3, r3, #16
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	623a      	str	r2, [r7, #32]
 800444e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	61bb      	str	r3, [r7, #24]
   return(result);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e5      	bne.n	800442c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b10      	cmp	r3, #16
 800446c:	d10a      	bne.n	8004484 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fe67 	bl	800415e <HAL_UARTEx_RxEventCallback>
 8004490:	e002      	b.n	8004498 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fe51 	bl	800413a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e002      	b.n	80044a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e000      	b.n	80044a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
  }
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3730      	adds	r7, #48	@ 0x30
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044e6:	f023 030c 	bic.w	r3, r3, #12
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2c      	ldr	r2, [pc, #176]	@ (80045c0 <UART_SetConfig+0x114>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d103      	bne.n	800451c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004514:	f7fe fe40 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	e002      	b.n	8004522 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe fe28 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8004520:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	4a22      	ldr	r2, [pc, #136]	@ (80045c4 <UART_SetConfig+0x118>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	0119      	lsls	r1, r3, #4
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009a      	lsls	r2, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	fbb2 f2f3 	udiv	r2, r2, r3
 8004558:	4b1a      	ldr	r3, [pc, #104]	@ (80045c4 <UART_SetConfig+0x118>)
 800455a:	fba3 0302 	umull	r0, r3, r3, r2
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	2064      	movs	r0, #100	@ 0x64
 8004562:	fb00 f303 	mul.w	r3, r0, r3
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	3332      	adds	r3, #50	@ 0x32
 800456c:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <UART_SetConfig+0x118>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004578:	4419      	add	r1, r3
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009a      	lsls	r2, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <UART_SetConfig+0x118>)
 8004592:	fba3 0302 	umull	r0, r3, r3, r2
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2064      	movs	r0, #100	@ 0x64
 800459a:	fb00 f303 	mul.w	r3, r0, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	3332      	adds	r3, #50	@ 0x32
 80045a4:	4a07      	ldr	r2, [pc, #28]	@ (80045c4 <UART_SetConfig+0x118>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	f003 020f 	and.w	r2, r3, #15
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	440a      	add	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40013800 	.word	0x40013800
 80045c4:	51eb851f 	.word	0x51eb851f

080045c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045c8:	b084      	sub	sp, #16
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	f107 0014 	add.w	r0, r7, #20
 80045d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	b004      	add	sp, #16
 80045e6:	4770      	bx	lr

080045e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045f8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80045fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800461c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004620:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	b29b      	uxth	r3, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	4013      	ands	r3, r2
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004660:	b084      	sub	sp, #16
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	f107 0014 	add.w	r0, r7, #20
 800466e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	b004      	add	sp, #16
 800469e:	4770      	bx	lr

080046a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b09d      	sub	sp, #116	@ 0x74
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80046c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	78db      	ldrb	r3, [r3, #3]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d81f      	bhi.n	8004712 <USB_ActivateEndpoint+0x72>
 80046d2:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <USB_ActivateEndpoint+0x38>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	08004705 	.word	0x08004705
 80046e0:	0800471b 	.word	0x0800471b
 80046e4:	080046f7 	.word	0x080046f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046f4:	e012      	b.n	800471c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80046fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004702:	e00b      	b.n	800471c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004704:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004708:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800470c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004710:	e004      	b.n	800471c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004718:	e000      	b.n	800471c <USB_ActivateEndpoint+0x7c>
      break;
 800471a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	441a      	add	r2, r3
 8004726:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004754:	b29b      	uxth	r3, r3
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	7812      	ldrb	r2, [r2, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800476e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	7b1b      	ldrb	r3, [r3, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f040 8178 	bne.w	8004a7c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8084 	beq.w	800489e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4413      	add	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	88db      	ldrh	r3, [r3, #6]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	827b      	strh	r3, [r7, #18]
 80047d8:	8a7b      	ldrh	r3, [r7, #18]
 80047da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01b      	beq.n	800481a <USB_ActivateEndpoint+0x17a>
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f8:	823b      	strh	r3, [r7, #16]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	8a3b      	ldrh	r3, [r7, #16]
 8004806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800480a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800480e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004812:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	78db      	ldrb	r3, [r3, #3]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d020      	beq.n	8004864 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004838:	81bb      	strh	r3, [r7, #12]
 800483a:	89bb      	ldrh	r3, [r7, #12]
 800483c:	f083 0320 	eor.w	r3, r3, #32
 8004840:	81bb      	strh	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	89bb      	ldrh	r3, [r7, #12]
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800485a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]
 8004862:	e2d5      	b.n	8004e10 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487a:	81fb      	strh	r3, [r7, #14]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	89fb      	ldrh	r3, [r7, #14]
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
 800489c:	e2b8      	b.n	8004e10 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	4413      	add	r3, r2
 80048b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	011a      	lsls	r2, r3, #4
 80048b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	88db      	ldrh	r3, [r3, #6]
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048dc:	b29b      	uxth	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	4413      	add	r3, r2
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	011a      	lsls	r2, r3, #4
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	4413      	add	r3, r2
 80048f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004900:	b29a      	uxth	r2, r3
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	801a      	strh	r2, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b3e      	cmp	r3, #62	@ 0x3e
 800490c:	d91d      	bls.n	800494a <USB_ActivateEndpoint+0x2aa>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <USB_ActivateEndpoint+0x288>
 8004922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004924:	3b01      	subs	r3, #1
 8004926:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29a      	uxth	r2, r3
 800492e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004930:	b29b      	uxth	r3, r3
 8004932:	029b      	lsls	r3, r3, #10
 8004934:	b29b      	uxth	r3, r3
 8004936:	4313      	orrs	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004942:	b29a      	uxth	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e026      	b.n	8004998 <USB_ActivateEndpoint+0x2f8>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <USB_ActivateEndpoint+0x2c8>
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004960:	b29a      	uxth	r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e017      	b.n	8004998 <USB_ActivateEndpoint+0x2f8>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <USB_ActivateEndpoint+0x2e2>
 800497c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800497e:	3301      	adds	r3, #1
 8004980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29a      	uxth	r2, r3
 8004988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800498a:	b29b      	uxth	r3, r3
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	b29b      	uxth	r3, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	b29a      	uxth	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80049a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80049a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <USB_ActivateEndpoint+0x348>
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c6:	843b      	strh	r3, [r7, #32]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	8c3b      	ldrh	r3, [r7, #32]
 80049d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d124      	bne.n	8004a3a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a06:	83bb      	strh	r3, [r7, #28]
 8004a08:	8bbb      	ldrh	r3, [r7, #28]
 8004a0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a0e:	83bb      	strh	r3, [r7, #28]
 8004a10:	8bbb      	ldrh	r3, [r7, #28]
 8004a12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a16:	83bb      	strh	r3, [r7, #28]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	8bbb      	ldrh	r3, [r7, #28]
 8004a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8013      	strh	r3, [r2, #0]
 8004a38:	e1ea      	b.n	8004e10 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a50:	83fb      	strh	r3, [r7, #30]
 8004a52:	8bfb      	ldrh	r3, [r7, #30]
 8004a54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a58:	83fb      	strh	r3, [r7, #30]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	8bfb      	ldrh	r3, [r7, #30]
 8004a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8013      	strh	r3, [r2, #0]
 8004a7a:	e1c9      	b.n	8004e10 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	78db      	ldrb	r3, [r3, #3]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d11e      	bne.n	8004ac2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a9a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	441a      	add	r2, r3
 8004aa8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	8013      	strh	r3, [r2, #0]
 8004ac0:	e01d      	b.n	8004afe <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b0e:	4413      	add	r3, r2
 8004b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	011a      	lsls	r2, r3, #4
 8004b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	891b      	ldrh	r3, [r3, #8]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b30:	801a      	strh	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b42:	4413      	add	r3, r2
 8004b44:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	011a      	lsls	r2, r3, #4
 8004b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004b54:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	895b      	ldrh	r3, [r3, #10]
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b64:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 8093 	bne.w	8004c96 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01b      	beq.n	8004bc4 <USB_ActivateEndpoint+0x524>
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004bd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <USB_ActivateEndpoint+0x574>
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004c00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c2c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c32:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c3a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	441a      	add	r2, r3
 8004c46:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c72:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]
 8004c94:	e0bc      	b.n	8004e10 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01d      	beq.n	8004cee <USB_ActivateEndpoint+0x64e>
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004cfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01d      	beq.n	8004d46 <USB_ActivateEndpoint+0x6a6>
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d20:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	78db      	ldrb	r3, [r3, #3]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d024      	beq.n	8004d98 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d64:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d6c:	f083 0320 	eor.w	r3, r3, #32
 8004d70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]
 8004d96:	e01d      	b.n	8004dd4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	441a      	add	r2, r3
 8004dbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3774      	adds	r7, #116	@ 0x74
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop

08004e20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b08d      	sub	sp, #52	@ 0x34
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	7b1b      	ldrb	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f040 808e 	bne.w	8004f50 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d044      	beq.n	8004ec6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	81bb      	strh	r3, [r7, #12]
 8004e4a:	89bb      	ldrh	r3, [r7, #12]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01b      	beq.n	8004e8c <USB_DeactivateEndpoint+0x6c>
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6a:	817b      	strh	r3, [r7, #10]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	897b      	ldrh	r3, [r7, #10]
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea2:	813b      	strh	r3, [r7, #8]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8013      	strh	r3, [r2, #0]
 8004ec4:	e192      	b.n	80051ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	827b      	strh	r3, [r7, #18]
 8004ed4:	8a7b      	ldrh	r3, [r7, #18]
 8004ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01b      	beq.n	8004f16 <USB_DeactivateEndpoint+0xf6>
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef4:	823b      	strh	r3, [r7, #16]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	441a      	add	r2, r3
 8004f00:	8a3b      	ldrh	r3, [r7, #16]
 8004f02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2c:	81fb      	strh	r3, [r7, #14]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	441a      	add	r2, r3
 8004f38:	89fb      	ldrh	r3, [r7, #14]
 8004f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8013      	strh	r3, [r2, #0]
 8004f4e:	e14d      	b.n	80051ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 80a5 	bne.w	80050a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	843b      	strh	r3, [r7, #32]
 8004f68:	8c3b      	ldrh	r3, [r7, #32]
 8004f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01b      	beq.n	8004faa <USB_DeactivateEndpoint+0x18a>
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f88:	83fb      	strh	r3, [r7, #30]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	8bfb      	ldrh	r3, [r7, #30]
 8004f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	83bb      	strh	r3, [r7, #28]
 8004fb8:	8bbb      	ldrh	r3, [r7, #28]
 8004fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01b      	beq.n	8004ffa <USB_DeactivateEndpoint+0x1da>
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd8:	837b      	strh	r3, [r7, #26]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	8b7b      	ldrh	r3, [r7, #26]
 8004fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ff2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800500c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005010:	833b      	strh	r3, [r7, #24]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	8b3b      	ldrh	r3, [r7, #24]
 800501e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800502a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800502e:	b29b      	uxth	r3, r3
 8005030:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005048:	82fb      	strh	r3, [r7, #22]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	8afb      	ldrh	r3, [r7, #22]
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800505e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800507c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005080:	82bb      	strh	r3, [r7, #20]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	8abb      	ldrh	r3, [r7, #20]
 800508e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800509a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]
 80050a2:	e0a3      	b.n	80051ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80050b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01b      	beq.n	80050f4 <USB_DeactivateEndpoint+0x2d4>
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80050e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005102:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01b      	beq.n	8005144 <USB_DeactivateEndpoint+0x324>
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800511e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005122:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	441a      	add	r2, r3
 800512e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800513c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800516c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005178:	b29b      	uxth	r3, r3
 800517a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005192:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3734      	adds	r7, #52	@ 0x34
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b0c2      	sub	sp, #264	@ 0x108
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005206:	6018      	str	r0, [r3, #0]
 8005208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005210:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b01      	cmp	r3, #1
 8005220:	f040 86b7 	bne.w	8005f92 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	429a      	cmp	r2, r3
 800523e:	d908      	bls.n	8005252 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005250:	e007      	b.n	8005262 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	7b1b      	ldrb	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d13a      	bne.n	80052e8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6959      	ldr	r1, [r3, #20]
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	88da      	ldrh	r2, [r3, #6]
 800528a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528e:	b29b      	uxth	r3, r3
 8005290:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005294:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005298:	6800      	ldr	r0, [r0, #0]
 800529a:	f001 fc9c 	bl	8006bd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800529e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	011a      	lsls	r2, r3, #4
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	f000 be1f 	b.w	8005f26 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	78db      	ldrb	r3, [r3, #3]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f040 8462 	bne.w	8005bbe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a1a      	ldr	r2, [r3, #32]
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	f240 83df 	bls.w	8005ad6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800533e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005368:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800536c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 81c7 	beq.w	8005748 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d177      	bne.n	80054c6 <USB_EPStartXfer+0x2ce>
 80053d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	4413      	add	r3, r2
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	011a      	lsls	r2, r3, #4
 8005408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540a:	4413      	add	r3, r2
 800540c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541c:	b29a      	uxth	r2, r3
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005426:	2b3e      	cmp	r3, #62	@ 0x3e
 8005428:	d921      	bls.n	800546e <USB_EPStartXfer+0x276>
 800542a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <USB_EPStartXfer+0x252>
 8005440:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005444:	3b01      	subs	r3, #1
 8005446:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29a      	uxth	r2, r3
 8005450:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005454:	b29b      	uxth	r3, r3
 8005456:	029b      	lsls	r3, r3, #10
 8005458:	b29b      	uxth	r3, r3
 800545a:	4313      	orrs	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005466:	b29a      	uxth	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	801a      	strh	r2, [r3, #0]
 800546c:	e050      	b.n	8005510 <USB_EPStartXfer+0x318>
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <USB_EPStartXfer+0x294>
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005484:	b29a      	uxth	r2, r3
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e041      	b.n	8005510 <USB_EPStartXfer+0x318>
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <USB_EPStartXfer+0x2b4>
 80054a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054a6:	3301      	adds	r3, #1
 80054a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	029b      	lsls	r3, r3, #10
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	4313      	orrs	r3, r2
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e024      	b.n	8005510 <USB_EPStartXfer+0x318>
 80054c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d11c      	bne.n	8005510 <USB_EPStartXfer+0x318>
 80054d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	4413      	add	r3, r2
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	011a      	lsls	r2, r3, #4
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	4413      	add	r3, r2
 8005500:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550a:	b29a      	uxth	r2, r3
 800550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	895b      	ldrh	r3, [r3, #10]
 800551c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6959      	ldr	r1, [r3, #20]
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005530:	b29b      	uxth	r3, r3
 8005532:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005536:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800553a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800553e:	6800      	ldr	r0, [r0, #0]
 8005540:	f001 fb49 	bl	8006bd6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005554:	441a      	add	r2, r3
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d90f      	bls.n	800559e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800557e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	621a      	str	r2, [r3, #32]
 800559c:	e00e      	b.n	80055bc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80055ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d177      	bne.n	80056bc <USB_EPStartXfer+0x4c4>
 80055cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	4413      	add	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	011a      	lsls	r2, r3, #4
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	4413      	add	r3, r2
 8005602:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005612:	b29a      	uxth	r2, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561c:	2b3e      	cmp	r3, #62	@ 0x3e
 800561e:	d921      	bls.n	8005664 <USB_EPStartXfer+0x46c>
 8005620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <USB_EPStartXfer+0x448>
 8005636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800563a:	3b01      	subs	r3, #1
 800563c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29a      	uxth	r2, r3
 8005646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564a:	b29b      	uxth	r3, r3
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	b29b      	uxth	r3, r3
 8005650:	4313      	orrs	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565c:	b29a      	uxth	r2, r3
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	e056      	b.n	8005712 <USB_EPStartXfer+0x51a>
 8005664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <USB_EPStartXfer+0x48a>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567a:	b29a      	uxth	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e047      	b.n	8005712 <USB_EPStartXfer+0x51a>
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <USB_EPStartXfer+0x4aa>
 8005698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	e02a      	b.n	8005712 <USB_EPStartXfer+0x51a>
 80056bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d122      	bne.n	8005712 <USB_EPStartXfer+0x51a>
 80056cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	4413      	add	r3, r2
 80056ee:	623b      	str	r3, [r7, #32]
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	011a      	lsls	r2, r3, #4
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	4413      	add	r3, r2
 8005702:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	b29a      	uxth	r2, r3
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	891b      	ldrh	r3, [r3, #8]
 800571e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6959      	ldr	r1, [r3, #20]
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005732:	b29b      	uxth	r3, r3
 8005734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005738:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800573c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	f001 fa48 	bl	8006bd6 <USB_WritePMA>
 8005746:	e3ee      	b.n	8005f26 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d177      	bne.n	8005848 <USB_EPStartXfer+0x650>
 8005758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005778:	4413      	add	r3, r2
 800577a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800577c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	011a      	lsls	r2, r3, #4
 800578a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578c:	4413      	add	r3, r2
 800578e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005792:	647b      	str	r3, [r7, #68]	@ 0x44
 8005794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057aa:	d921      	bls.n	80057f0 <USB_EPStartXfer+0x5f8>
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <USB_EPStartXfer+0x5d4>
 80057c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	029b      	lsls	r3, r3, #10
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e056      	b.n	800589e <USB_EPStartXfer+0x6a6>
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <USB_EPStartXfer+0x616>
 80057f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e047      	b.n	800589e <USB_EPStartXfer+0x6a6>
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <USB_EPStartXfer+0x636>
 8005824:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005828:	3301      	adds	r3, #1
 800582a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800582e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005838:	b29b      	uxth	r3, r3
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b29b      	uxth	r3, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	b29a      	uxth	r2, r3
 8005842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e02a      	b.n	800589e <USB_EPStartXfer+0x6a6>
 8005848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d122      	bne.n	800589e <USB_EPStartXfer+0x6a6>
 8005858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	653b      	str	r3, [r7, #80]	@ 0x50
 8005864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005872:	b29b      	uxth	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005878:	4413      	add	r3, r2
 800587a:	653b      	str	r3, [r7, #80]	@ 0x50
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	011a      	lsls	r2, r3, #4
 800588a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800588c:	4413      	add	r3, r2
 800588e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005898:	b29a      	uxth	r2, r3
 800589a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800589c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800589e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	891b      	ldrh	r3, [r3, #8]
 80058aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f001 f982 	bl	8006bd6 <USB_WritePMA>
            ep->xfer_buff += len;
 80058d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	441a      	add	r2, r3
 80058e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	d90f      	bls.n	800592c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800590c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	1ad2      	subs	r2, r2, r3
 800591e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	621a      	str	r2, [r3, #32]
 800592a:	e00e      	b.n	800594a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800592c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800593c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	643b      	str	r3, [r7, #64]	@ 0x40
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d177      	bne.n	8005a56 <USB_EPStartXfer+0x85e>
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005980:	b29b      	uxth	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	4413      	add	r3, r2
 8005988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800598a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	011a      	lsls	r2, r3, #4
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	4413      	add	r3, r2
 800599c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80059b8:	d921      	bls.n	80059fe <USB_EPStartXfer+0x806>
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <USB_EPStartXfer+0x7e2>
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	3b01      	subs	r3, #1
 80059d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29a      	uxth	r2, r3
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	029b      	lsls	r3, r3, #10
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	4313      	orrs	r3, r2
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e050      	b.n	8005aa0 <USB_EPStartXfer+0x8a8>
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <USB_EPStartXfer+0x824>
 8005a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e041      	b.n	8005aa0 <USB_EPStartXfer+0x8a8>
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <USB_EPStartXfer+0x844>
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	3301      	adds	r3, #1
 8005a38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	029b      	lsls	r3, r3, #10
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e024      	b.n	8005aa0 <USB_EPStartXfer+0x8a8>
 8005a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d11c      	bne.n	8005aa0 <USB_EPStartXfer+0x8a8>
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7a:	4413      	add	r3, r2
 8005a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	895b      	ldrh	r3, [r3, #10]
 8005aac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6959      	ldr	r1, [r3, #20]
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ac6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005aca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ace:	6800      	ldr	r0, [r0, #0]
 8005ad0:	f001 f881 	bl	8006bd6 <USB_WritePMA>
 8005ad4:	e227      	b.n	8005f26 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b62:	4413      	add	r3, r2
 8005b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	011a      	lsls	r2, r3, #4
 8005b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b76:	4413      	add	r3, r2
 8005b78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	891b      	ldrh	r3, [r3, #8]
 8005b94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6959      	ldr	r1, [r3, #20]
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bb6:	6800      	ldr	r0, [r0, #0]
 8005bb8:	f001 f80d 	bl	8006bd6 <USB_WritePMA>
 8005bbc:	e1b3      	b.n	8005f26 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bce:	1ad2      	subs	r2, r2, r3
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80c6 	beq.w	8005d90 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d177      	bne.n	8005d10 <USB_EPStartXfer+0xb18>
 8005c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c40:	4413      	add	r3, r2
 8005c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c6a:	801a      	strh	r2, [r3, #0]
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c70:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c72:	d921      	bls.n	8005cb8 <USB_EPStartXfer+0xac0>
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <USB_EPStartXfer+0xa9c>
 8005c8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e050      	b.n	8005d5a <USB_EPStartXfer+0xb62>
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <USB_EPStartXfer+0xade>
 8005cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	e041      	b.n	8005d5a <USB_EPStartXfer+0xb62>
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <USB_EPStartXfer+0xafe>
 8005cec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	e024      	b.n	8005d5a <USB_EPStartXfer+0xb62>
 8005d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d11c      	bne.n	8005d5a <USB_EPStartXfer+0xb62>
 8005d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d34:	4413      	add	r3, r2
 8005d36:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	011a      	lsls	r2, r3, #4
 8005d46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	895b      	ldrh	r3, [r3, #10]
 8005d66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6959      	ldr	r1, [r3, #20]
 8005d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d88:	6800      	ldr	r0, [r0, #0]
 8005d8a:	f000 ff24 	bl	8006bd6 <USB_WritePMA>
 8005d8e:	e0ca      	b.n	8005f26 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d177      	bne.n	8005e90 <USB_EPStartXfer+0xc98>
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dc0:	4413      	add	r3, r2
 8005dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	011a      	lsls	r2, r3, #4
 8005dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005df2:	d921      	bls.n	8005e38 <USB_EPStartXfer+0xc40>
 8005df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <USB_EPStartXfer+0xc1c>
 8005e0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	e05c      	b.n	8005ef2 <USB_EPStartXfer+0xcfa>
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <USB_EPStartXfer+0xc5e>
 8005e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	e04d      	b.n	8005ef2 <USB_EPStartXfer+0xcfa>
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <USB_EPStartXfer+0xc7e>
 8005e6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e70:	3301      	adds	r3, #1
 8005e72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e030      	b.n	8005ef2 <USB_EPStartXfer+0xcfa>
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d128      	bne.n	8005ef2 <USB_EPStartXfer+0xcfa>
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	011a      	lsls	r2, r3, #4
 8005ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ee2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ef0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	891b      	ldrh	r3, [r3, #8]
 8005efe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6959      	ldr	r1, [r3, #20]
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f18:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f1c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f20:	6800      	ldr	r0, [r0, #0]
 8005f22:	f000 fe58 	bl	8006bd6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f4c:	817b      	strh	r3, [r7, #10]
 8005f4e:	897b      	ldrh	r3, [r7, #10]
 8005f50:	f083 0310 	eor.w	r3, r3, #16
 8005f54:	817b      	strh	r3, [r7, #10]
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	f083 0320 	eor.w	r3, r3, #32
 8005f5c:	817b      	strh	r3, [r7, #10]
 8005f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	897b      	ldrh	r3, [r7, #10]
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
 8005f8e:	f000 bcde 	b.w	800694e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	7b1b      	ldrb	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 80bb 	bne.w	800611a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d917      	bls.n	8005ff0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe0:	1ad2      	subs	r2, r2, r3
 8005fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	619a      	str	r2, [r3, #24]
 8005fee:	e00e      	b.n	800600e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800600e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006032:	4413      	add	r3, r2
 8006034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800604a:	4413      	add	r3, r2
 800604c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006060:	b29a      	uxth	r2, r3
 8006062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	2b3e      	cmp	r3, #62	@ 0x3e
 800606e:	d924      	bls.n	80060ba <USB_EPStartXfer+0xec2>
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2b00      	cmp	r3, #0
 8006084:	d104      	bne.n	8006090 <USB_EPStartXfer+0xe98>
 8006086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800608a:	3b01      	subs	r3, #1
 800608c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29a      	uxth	r2, r3
 8006098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800609c:	b29b      	uxth	r3, r3
 800609e:	029b      	lsls	r3, r3, #10
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	f000 bc10 	b.w	80068da <USB_EPStartXfer+0x16e2>
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10c      	bne.n	80060dc <USB_EPStartXfer+0xee4>
 80060c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	e3fe      	b.n	80068da <USB_EPStartXfer+0x16e2>
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <USB_EPStartXfer+0xf04>
 80060f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060f6:	3301      	adds	r3, #1
 80060f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006108:	b29b      	uxth	r3, r3
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	b29b      	uxth	r3, r3
 800610e:	4313      	orrs	r3, r2
 8006110:	b29a      	uxth	r2, r3
 8006112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	e3df      	b.n	80068da <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800611a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	78db      	ldrb	r3, [r3, #3]
 8006126:	2b02      	cmp	r3, #2
 8006128:	f040 8218 	bne.w	800655c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 809d 	bne.w	8006278 <USB_EPStartXfer+0x1080>
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800614c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800615a:	b29b      	uxth	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006162:	4413      	add	r3, r2
 8006164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800617a:	4413      	add	r3, r2
 800617c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80061a6:	d92b      	bls.n	8006200 <USB_EPStartXfer+0x1008>
 80061a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <USB_EPStartXfer+0xfe0>
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d2:	3b01      	subs	r3, #1
 80061d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	029b      	lsls	r3, r3, #10
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e070      	b.n	80062e2 <USB_EPStartXfer+0x10ea>
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <USB_EPStartXfer+0x1032>
 8006210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006220:	b29a      	uxth	r2, r3
 8006222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e05b      	b.n	80062e2 <USB_EPStartXfer+0x10ea>
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <USB_EPStartXfer+0x1062>
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006254:	3301      	adds	r3, #1
 8006256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800625a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006266:	b29b      	uxth	r3, r3
 8006268:	029b      	lsls	r3, r3, #10
 800626a:	b29b      	uxth	r3, r3
 800626c:	4313      	orrs	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e034      	b.n	80062e2 <USB_EPStartXfer+0x10ea>
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d12c      	bne.n	80062e2 <USB_EPStartXfer+0x10ea>
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062ac:	4413      	add	r3, r2
 80062ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	011a      	lsls	r2, r3, #4
 80062c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 809d 	bne.w	800643c <USB_EPStartXfer+0x1244>
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006326:	4413      	add	r3, r2
 8006328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800632c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	011a      	lsls	r2, r3, #4
 800633a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800633e:	4413      	add	r3, r2
 8006340:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006348:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006354:	b29a      	uxth	r2, r3
 8006356:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b3e      	cmp	r3, #62	@ 0x3e
 800636a:	d92b      	bls.n	80063c4 <USB_EPStartXfer+0x11cc>
 800636c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <USB_EPStartXfer+0x11a4>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	3b01      	subs	r3, #1
 8006398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800639c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	4313      	orrs	r3, r2
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	e069      	b.n	8006498 <USB_EPStartXfer+0x12a0>
 80063c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10c      	bne.n	80063ee <USB_EPStartXfer+0x11f6>
 80063d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e054      	b.n	8006498 <USB_EPStartXfer+0x12a0>
 80063ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <USB_EPStartXfer+0x1226>
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006418:	3301      	adds	r3, #1
 800641a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800641e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800642a:	b29b      	uxth	r3, r3
 800642c:	029b      	lsls	r3, r3, #10
 800642e:	b29b      	uxth	r3, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e02d      	b.n	8006498 <USB_EPStartXfer+0x12a0>
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d125      	bne.n	8006498 <USB_EPStartXfer+0x12a0>
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800645a:	b29b      	uxth	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006462:	4413      	add	r3, r2
 8006464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	011a      	lsls	r2, r3, #4
 8006476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800647a:	4413      	add	r3, r2
 800647c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006480:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	b29a      	uxth	r2, r3
 8006492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006496:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8218 	beq.w	80068da <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <USB_EPStartXfer+0x12ea>
 80064d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10d      	bne.n	80064fe <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 81f5 	bne.w	80068da <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 81ee 	bne.w	80068da <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80064fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006524:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800654e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006552:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006556:	b29b      	uxth	r3, r3
 8006558:	8013      	strh	r3, [r2, #0]
 800655a:	e1be      	b.n	80068da <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	78db      	ldrb	r3, [r3, #3]
 8006568:	2b01      	cmp	r3, #1
 800656a:	f040 81b4 	bne.w	80068d6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800656e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d917      	bls.n	80065ba <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800658a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	1ad2      	subs	r2, r2, r3
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	619a      	str	r2, [r3, #24]
 80065b8:	e00e      	b.n	80065d8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80065ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80065ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2200      	movs	r2, #0
 80065d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 8085 	bne.w	80066f4 <USB_EPStartXfer+0x14fc>
 80065ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006606:	b29b      	uxth	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800660e:	4413      	add	r3, r2
 8006610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	011a      	lsls	r2, r3, #4
 8006622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006626:	4413      	add	r3, r2
 8006628:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800662c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800663c:	b29a      	uxth	r2, r3
 800663e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006648:	2b3e      	cmp	r3, #62	@ 0x3e
 800664a:	d923      	bls.n	8006694 <USB_EPStartXfer+0x149c>
 800664c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <USB_EPStartXfer+0x1474>
 8006662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006666:	3b01      	subs	r3, #1
 8006668:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800666c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29a      	uxth	r2, r3
 8006674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006678:	b29b      	uxth	r3, r3
 800667a:	029b      	lsls	r3, r3, #10
 800667c:	b29b      	uxth	r3, r3
 800667e:	4313      	orrs	r3, r2
 8006680:	b29b      	uxth	r3, r3
 8006682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668a:	b29a      	uxth	r2, r3
 800668c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e060      	b.n	8006756 <USB_EPStartXfer+0x155e>
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10c      	bne.n	80066b6 <USB_EPStartXfer+0x14be>
 800669c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	e04f      	b.n	8006756 <USB_EPStartXfer+0x155e>
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	085b      	lsrs	r3, r3, #1
 80066bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <USB_EPStartXfer+0x14de>
 80066cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066d0:	3301      	adds	r3, #1
 80066d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29a      	uxth	r2, r3
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	029b      	lsls	r3, r3, #10
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	4313      	orrs	r3, r2
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	e030      	b.n	8006756 <USB_EPStartXfer+0x155e>
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d128      	bne.n	8006756 <USB_EPStartXfer+0x155e>
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006728:	4413      	add	r3, r2
 800672a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800672e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	011a      	lsls	r2, r3, #4
 800673c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006740:	4413      	add	r3, r2
 8006742:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006746:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	b29a      	uxth	r2, r3
 8006750:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f040 8085 	bne.w	8006880 <USB_EPStartXfer+0x1688>
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006792:	b29b      	uxth	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800679a:	4413      	add	r3, r2
 800679c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	011a      	lsls	r2, r3, #4
 80067ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067b2:	4413      	add	r3, r2
 80067b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80067d6:	d923      	bls.n	8006820 <USB_EPStartXfer+0x1628>
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067dc:	095b      	lsrs	r3, r3, #5
 80067de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <USB_EPStartXfer+0x1600>
 80067ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067f2:	3b01      	subs	r3, #1
 80067f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006804:	b29b      	uxth	r3, r3
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	b29b      	uxth	r3, r3
 800680a:	4313      	orrs	r3, r2
 800680c:	b29b      	uxth	r3, r3
 800680e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006816:	b29a      	uxth	r2, r3
 8006818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800681c:	801a      	strh	r2, [r3, #0]
 800681e:	e05c      	b.n	80068da <USB_EPStartXfer+0x16e2>
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10c      	bne.n	8006842 <USB_EPStartXfer+0x164a>
 8006828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006838:	b29a      	uxth	r2, r3
 800683a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e04b      	b.n	80068da <USB_EPStartXfer+0x16e2>
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <USB_EPStartXfer+0x166a>
 8006858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800685c:	3301      	adds	r3, #1
 800685e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29a      	uxth	r2, r3
 800686a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800686e:	b29b      	uxth	r3, r3
 8006870:	029b      	lsls	r3, r3, #10
 8006872:	b29b      	uxth	r3, r3
 8006874:	4313      	orrs	r3, r2
 8006876:	b29a      	uxth	r2, r3
 8006878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800687c:	801a      	strh	r2, [r3, #0]
 800687e:	e02c      	b.n	80068da <USB_EPStartXfer+0x16e2>
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d124      	bne.n	80068da <USB_EPStartXfer+0x16e2>
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068a6:	4413      	add	r3, r2
 80068a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	011a      	lsls	r2, r3, #4
 80068ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068be:	4413      	add	r3, r2
 80068c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e001      	b.n	80068da <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e03a      	b.n	8006950 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006900:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006904:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006908:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800690c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006910:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006914:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006918:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	441a      	add	r2, r3
 8006936:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d020      	beq.n	80069ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800697e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006982:	81bb      	strh	r3, [r7, #12]
 8006984:	89bb      	ldrh	r3, [r7, #12]
 8006986:	f083 0310 	eor.w	r3, r3, #16
 800698a:	81bb      	strh	r3, [r7, #12]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	89bb      	ldrh	r3, [r7, #12]
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
 80069ac:	e01f      	b.n	80069ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c4:	81fb      	strh	r3, [r7, #14]
 80069c6:	89fb      	ldrh	r3, [r7, #14]
 80069c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069cc:	81fb      	strh	r3, [r7, #14]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	89fb      	ldrh	r3, [r7, #14]
 80069da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr

080069fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	7b1b      	ldrb	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 809d 	bne.w	8006b48 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d04c      	beq.n	8006ab0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	823b      	strh	r3, [r7, #16]
 8006a24:	8a3b      	ldrh	r3, [r7, #16]
 8006a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01b      	beq.n	8006a66 <USB_EPClearStall+0x6c>
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a44:	81fb      	strh	r3, [r7, #14]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	78db      	ldrb	r3, [r3, #3]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d06c      	beq.n	8006b48 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a84:	81bb      	strh	r3, [r7, #12]
 8006a86:	89bb      	ldrh	r3, [r7, #12]
 8006a88:	f083 0320 	eor.w	r3, r3, #32
 8006a8c:	81bb      	strh	r3, [r7, #12]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	89bb      	ldrh	r3, [r7, #12]
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]
 8006aae:	e04b      	b.n	8006b48 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	82fb      	strh	r3, [r7, #22]
 8006abe:	8afb      	ldrh	r3, [r7, #22]
 8006ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01b      	beq.n	8006b00 <USB_EPClearStall+0x106>
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ade:	82bb      	strh	r3, [r7, #20]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	441a      	add	r2, r3
 8006aea:	8abb      	ldrh	r3, [r7, #20]
 8006aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b16:	827b      	strh	r3, [r7, #18]
 8006b18:	8a7b      	ldrh	r3, [r7, #18]
 8006b1a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b1e:	827b      	strh	r3, [r7, #18]
 8006b20:	8a7b      	ldrh	r3, [r7, #18]
 8006b22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b26:	827b      	strh	r3, [r7, #18]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	8a7b      	ldrh	r3, [r7, #18]
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2280      	movs	r2, #128	@ 0x80
 8006b6a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr

08006bd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b08b      	sub	sp, #44	@ 0x2c
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	4611      	mov	r1, r2
 8006be2:	461a      	mov	r2, r3
 8006be4:	460b      	mov	r3, r1
 8006be6:	80fb      	strh	r3, [r7, #6]
 8006be8:	4613      	mov	r3, r2
 8006bea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bec:	88bb      	ldrh	r3, [r7, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	005a      	lsls	r2, r3, #1
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c0e:	e01e      	b.n	8006c4e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	b21a      	sxth	r2, r3
 8006c20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b21b      	sxth	r3, r3
 8006c28:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	8a7a      	ldrh	r2, [r7, #18]
 8006c2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	3302      	adds	r3, #2
 8006c34:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	3302      	adds	r3, #2
 8006c3a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3301      	adds	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1dd      	bne.n	8006c10 <USB_WritePMA+0x3a>
  }
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	372c      	adds	r7, #44	@ 0x2c
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr

08006c60 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b08b      	sub	sp, #44	@ 0x2c
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	460b      	mov	r3, r1
 8006c70:	80fb      	strh	r3, [r7, #6]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c76:	88bb      	ldrh	r3, [r7, #4]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	005a      	lsls	r2, r3, #1
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c92:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c98:	e01b      	b.n	8006cd2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	3302      	adds	r3, #2
 8006cca:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e0      	bne.n	8006c9a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006cd8:	88bb      	ldrh	r3, [r7, #4]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	701a      	strb	r2, [r3, #0]
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	372c      	adds	r7, #44	@ 0x2c
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	2181      	movs	r1, #129	@ 0x81
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 fc86 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006d1c:	2010      	movs	r0, #16
 8006d1e:	f001 fd95 	bl	800884c <USBD_static_malloc>
 8006d22:	4602      	mov	r2, r0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e005      	b.n	8006d44 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d3e:	2200      	movs	r2, #0
 8006d40:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006d58:	2181      	movs	r1, #129	@ 0x81
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fc87 	bl	800866e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 fd74 	bl	8008864 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d045      	beq.n	8006e4a <USBD_HID_Setup+0xba>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	f040 80d3 	bne.w	8006f6a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	3b02      	subs	r3, #2
 8006dca:	2b09      	cmp	r3, #9
 8006dcc:	d835      	bhi.n	8006e3a <USBD_HID_Setup+0xaa>
 8006dce:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd4 <USBD_HID_Setup+0x44>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006e2b 	.word	0x08006e2b
 8006dd8:	08006e0b 	.word	0x08006e0b
 8006ddc:	08006e3b 	.word	0x08006e3b
 8006de0:	08006e3b 	.word	0x08006e3b
 8006de4:	08006e3b 	.word	0x08006e3b
 8006de8:	08006e3b 	.word	0x08006e3b
 8006dec:	08006e3b 	.word	0x08006e3b
 8006df0:	08006e3b 	.word	0x08006e3b
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006dfd 	.word	0x08006dfd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	885b      	ldrh	r3, [r3, #2]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	601a      	str	r2, [r3, #0]
          break;
 8006e08:	e01e      	b.n	8006e48 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f957 	bl	80080c4 <USBD_CtlSendData>
          break;
 8006e16:	e017      	b.n	8006e48 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	0a1b      	lsrs	r3, r3, #8
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]
          break;
 8006e28:	e00e      	b.n	8006e48 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 f946 	bl	80080c4 <USBD_CtlSendData>
          break;
 8006e38:	e006      	b.n	8006e48 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f8d7 	bl	8007ff0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	75fb      	strb	r3, [r7, #23]
          break;
 8006e46:	bf00      	nop
      }
      break;
 8006e48:	e096      	b.n	8006f78 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b0b      	cmp	r3, #11
 8006e50:	f200 8083 	bhi.w	8006f5a <USBD_HID_Setup+0x1ca>
 8006e54:	a201      	add	r2, pc, #4	@ (adr r2, 8006e5c <USBD_HID_Setup+0xcc>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e8d 	.word	0x08006e8d
 8006e60:	08006f5b 	.word	0x08006f5b
 8006e64:	08006f5b 	.word	0x08006f5b
 8006e68:	08006f5b 	.word	0x08006f5b
 8006e6c:	08006f5b 	.word	0x08006f5b
 8006e70:	08006f5b 	.word	0x08006f5b
 8006e74:	08006eb5 	.word	0x08006eb5
 8006e78:	08006f5b 	.word	0x08006f5b
 8006e7c:	08006f5b 	.word	0x08006f5b
 8006e80:	08006f5b 	.word	0x08006f5b
 8006e84:	08006f0d 	.word	0x08006f0d
 8006e88:	08006f35 	.word	0x08006f35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d107      	bne.n	8006ea6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e96:	f107 030e 	add.w	r3, r7, #14
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 f910 	bl	80080c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ea4:	e060      	b.n	8006f68 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 f8a1 	bl	8007ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb2:	e059      	b.n	8006f68 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	885b      	ldrh	r3, [r3, #2]
 8006eb8:	0a1b      	lsrs	r3, r3, #8
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b22      	cmp	r3, #34	@ 0x22
 8006ebe:	d108      	bne.n	8006ed2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	88db      	ldrh	r3, [r3, #6]
 8006ec4:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ec6:	bf28      	it	cs
 8006ec8:	233f      	movcs	r3, #63	@ 0x3f
 8006eca:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8006f84 <USBD_HID_Setup+0x1f4>)
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	e015      	b.n	8006efe <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	885b      	ldrh	r3, [r3, #2]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b21      	cmp	r3, #33	@ 0x21
 8006edc:	d108      	bne.n	8006ef0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006ede:	4b2a      	ldr	r3, [pc, #168]	@ (8006f88 <USBD_HID_Setup+0x1f8>)
 8006ee0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	88db      	ldrh	r3, [r3, #6]
 8006ee6:	2b09      	cmp	r3, #9
 8006ee8:	bf28      	it	cs
 8006eea:	2309      	movcs	r3, #9
 8006eec:	83fb      	strh	r3, [r7, #30]
 8006eee:	e006      	b.n	8006efe <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f87c 	bl	8007ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	75fb      	strb	r3, [r7, #23]
            break;
 8006efc:	e034      	b.n	8006f68 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006efe:	8bfb      	ldrh	r3, [r7, #30]
 8006f00:	461a      	mov	r2, r3
 8006f02:	69b9      	ldr	r1, [r7, #24]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 f8dd 	bl	80080c4 <USBD_CtlSendData>
          break;
 8006f0a:	e02d      	b.n	8006f68 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d107      	bne.n	8006f26 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f8d0 	bl	80080c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f24:	e020      	b.n	8006f68 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f861 	bl	8007ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	75fb      	strb	r3, [r7, #23]
          break;
 8006f32:	e019      	b.n	8006f68 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d106      	bne.n	8006f4c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	885b      	ldrh	r3, [r3, #2]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f4a:	e00d      	b.n	8006f68 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f84e 	bl	8007ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f54:	2302      	movs	r3, #2
 8006f56:	75fb      	strb	r3, [r7, #23]
          break;
 8006f58:	e006      	b.n	8006f68 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 f847 	bl	8007ff0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f62:	2302      	movs	r3, #2
 8006f64:	75fb      	strb	r3, [r7, #23]
          break;
 8006f66:	bf00      	nop
      }
      break;
 8006f68:	e006      	b.n	8006f78 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 f83f 	bl	8007ff0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f72:	2302      	movs	r3, #2
 8006f74:	75fb      	strb	r3, [r7, #23]
      break;
 8006f76:	bf00      	nop
  }

  return ret;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	200000c8 	.word	0x200000c8
 8006f88:	200000b0 	.word	0x200000b0

08006f8c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fa0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d10c      	bne.n	8006fc6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	7b1b      	ldrb	r3, [r3, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d108      	bne.n	8006fc6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	2181      	movs	r1, #129	@ 0x81
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fbfc 	bl	80087be <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7c1b      	ldrb	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e001      	b.n	8006fee <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8006fea:	230a      	movs	r3, #10
 8006fec:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8006fee:	68fb      	ldr	r3, [r7, #12]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr
	...

08006ffc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2222      	movs	r2, #34	@ 0x22
 8007008:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800700a:	4b03      	ldr	r3, [pc, #12]	@ (8007018 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	20000044 	.word	0x20000044

0800701c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2222      	movs	r2, #34	@ 0x22
 8007028:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800702a:	4b03      	ldr	r3, [pc, #12]	@ (8007038 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000068 	.word	0x20000068

0800703c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2222      	movs	r2, #34	@ 0x22
 8007048:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800704a:	4b03      	ldr	r3, [pc, #12]	@ (8007058 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	2000008c 	.word	0x2000008c

0800705c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800706e:	2200      	movs	r2, #0
 8007070:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr
	...

08007080 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	220a      	movs	r2, #10
 800708c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800708e:	4b03      	ldr	r3, [pc, #12]	@ (800709c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	200000bc 	.word	0x200000bc

080070a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070b4:	2302      	movs	r3, #2
 80070b6:	e01a      	b.n	80070ee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	79fa      	ldrb	r2, [r7, #7]
 80070e4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f001 fa38 	bl	800855c <USBD_LL_Init>

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d006      	beq.n	8007118 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
 8007116:	e001      	b.n	800711c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007118:	2302      	movs	r3, #2
 800711a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 fa5b 	bl	80085ec <USBD_LL_Start>

  return USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007160:	2302      	movs	r3, #2
 8007162:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	4611      	mov	r1, r2
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	4611      	mov	r1, r2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3

  return USBD_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fed7 	bl	8007f7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d016      	beq.n	8007222 <USBD_LL_SetupStage+0x6a>
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d81c      	bhi.n	8007232 <USBD_LL_SetupStage+0x7a>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <USBD_LL_SetupStage+0x4a>
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d008      	beq.n	8007212 <USBD_LL_SetupStage+0x5a>
 8007200:	e017      	b.n	8007232 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9ca 	bl	80075a4 <USBD_StdDevReq>
      break;
 8007210:	e01a      	b.n	8007248 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa2c 	bl	8007678 <USBD_StdItfReq>
      break;
 8007220:	e012      	b.n	8007248 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa6c 	bl	8007708 <USBD_StdEPReq>
      break;
 8007230:	e00a      	b.n	8007248 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007238:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800723c:	b2db      	uxtb	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fa33 	bl	80086ac <USBD_LL_StallEP>
      break;
 8007246:	bf00      	nop
  }

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	460b      	mov	r3, r1
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d14b      	bne.n	80072fe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800726c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007274:	2b03      	cmp	r3, #3
 8007276:	d134      	bne.n	80072e2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d919      	bls.n	80072b8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	1ad2      	subs	r2, r2, r3
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800729a:	429a      	cmp	r2, r3
 800729c:	d203      	bcs.n	80072a6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	e002      	b.n	80072ac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 ff35 	bl	8008120 <USBD_CtlContinueRx>
 80072b6:	e038      	b.n	800732a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d105      	bne.n	80072da <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 ff32 	bl	8008144 <USBD_CtlSendStatus>
 80072e0:	e023      	b.n	800732a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072e8:	2b05      	cmp	r3, #5
 80072ea:	d11e      	bne.n	800732a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072f4:	2100      	movs	r1, #0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f001 f9d8 	bl	80086ac <USBD_LL_StallEP>
 80072fc:	e015      	b.n	800732a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007310:	2b03      	cmp	r3, #3
 8007312:	d108      	bne.n	8007326 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	7afa      	ldrb	r2, [r7, #11]
 800731e:	4611      	mov	r1, r2
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	4798      	blx	r3
 8007324:	e001      	b.n	800732a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007326:	2302      	movs	r3, #2
 8007328:	e000      	b.n	800732c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	460b      	mov	r3, r1
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007342:	7afb      	ldrb	r3, [r7, #11]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d17f      	bne.n	8007448 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3314      	adds	r3, #20
 800734c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007354:	2b02      	cmp	r3, #2
 8007356:	d15c      	bne.n	8007412 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	d915      	bls.n	8007390 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	1ad2      	subs	r2, r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 febd 	bl	80080fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007382:	2300      	movs	r3, #0
 8007384:	2200      	movs	r2, #0
 8007386:	2100      	movs	r1, #0
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 fa3b 	bl	8008804 <USBD_LL_PrepareReceive>
 800738e:	e04e      	b.n	800742e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	6912      	ldr	r2, [r2, #16]
 8007398:	fbb3 f1f2 	udiv	r1, r3, r2
 800739c:	fb01 f202 	mul.w	r2, r1, r2
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d11c      	bne.n	80073e0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d316      	bcc.n	80073e0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073bc:	429a      	cmp	r2, r3
 80073be:	d20f      	bcs.n	80073e0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c0:	2200      	movs	r2, #0
 80073c2:	2100      	movs	r1, #0
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fe99 	bl	80080fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d2:	2300      	movs	r3, #0
 80073d4:	2200      	movs	r2, #0
 80073d6:	2100      	movs	r1, #0
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f001 fa13 	bl	8008804 <USBD_LL_PrepareReceive>
 80073de:	e026      	b.n	800742e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d105      	bne.n	8007402 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007402:	2180      	movs	r1, #128	@ 0x80
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 f951 	bl	80086ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fead 	bl	800816a <USBD_CtlReceiveStatus>
 8007410:	e00d      	b.n	800742e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007418:	2b04      	cmp	r3, #4
 800741a:	d004      	beq.n	8007426 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007426:	2180      	movs	r1, #128	@ 0x80
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f001 f93f 	bl	80086ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007434:	2b01      	cmp	r3, #1
 8007436:	d11d      	bne.n	8007474 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fe81 	bl	8007140 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007446:	e015      	b.n	8007474 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00d      	beq.n	8007470 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800745a:	2b03      	cmp	r3, #3
 800745c:	d108      	bne.n	8007470 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	7afa      	ldrb	r2, [r7, #11]
 8007468:	4611      	mov	r1, r2
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	4798      	blx	r3
 800746e:	e001      	b.n	8007474 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	e000      	b.n	8007476 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007486:	2340      	movs	r3, #64	@ 0x40
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f8c8 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2240      	movs	r2, #64	@ 0x40
 800749e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074a2:	2340      	movs	r3, #64	@ 0x40
 80074a4:	2200      	movs	r2, #0
 80074a6:	2180      	movs	r1, #128	@ 0x80
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 f8ba 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2240      	movs	r2, #64	@ 0x40
 80074b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6852      	ldr	r2, [r2, #4]
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	4611      	mov	r1, r2
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
  }

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr

0800751e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2204      	movs	r2, #4
 8007536:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr

08007546 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007554:	2b04      	cmp	r3, #4
 8007556:	d105      	bne.n	8007564 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	bc80      	pop	{r7}
 800756e:	4770      	bx	lr

08007570 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800757e:	2b03      	cmp	r3, #3
 8007580:	d10b      	bne.n	800759a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075ba:	2b40      	cmp	r3, #64	@ 0x40
 80075bc:	d005      	beq.n	80075ca <USBD_StdDevReq+0x26>
 80075be:	2b40      	cmp	r3, #64	@ 0x40
 80075c0:	d84f      	bhi.n	8007662 <USBD_StdDevReq+0xbe>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d009      	beq.n	80075da <USBD_StdDevReq+0x36>
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d14b      	bne.n	8007662 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
      break;
 80075d8:	e048      	b.n	800766c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b09      	cmp	r3, #9
 80075e0:	d839      	bhi.n	8007656 <USBD_StdDevReq+0xb2>
 80075e2:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <USBD_StdDevReq+0x44>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	08007639 	.word	0x08007639
 80075ec:	0800764d 	.word	0x0800764d
 80075f0:	08007657 	.word	0x08007657
 80075f4:	08007643 	.word	0x08007643
 80075f8:	08007657 	.word	0x08007657
 80075fc:	0800761b 	.word	0x0800761b
 8007600:	08007611 	.word	0x08007611
 8007604:	08007657 	.word	0x08007657
 8007608:	0800762f 	.word	0x0800762f
 800760c:	08007625 	.word	0x08007625
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f9dc 	bl	80079d0 <USBD_GetDescriptor>
          break;
 8007618:	e022      	b.n	8007660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb3f 	bl	8007ca0 <USBD_SetAddress>
          break;
 8007622:	e01d      	b.n	8007660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fb7e 	bl	8007d28 <USBD_SetConfig>
          break;
 800762c:	e018      	b.n	8007660 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fc07 	bl	8007e44 <USBD_GetConfig>
          break;
 8007636:	e013      	b.n	8007660 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fc37 	bl	8007eae <USBD_GetStatus>
          break;
 8007640:	e00e      	b.n	8007660 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fc65 	bl	8007f14 <USBD_SetFeature>
          break;
 800764a:	e009      	b.n	8007660 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fc74 	bl	8007f3c <USBD_ClrFeature>
          break;
 8007654:	e004      	b.n	8007660 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fcc9 	bl	8007ff0 <USBD_CtlError>
          break;
 800765e:	bf00      	nop
      }
      break;
 8007660:	e004      	b.n	800766c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fcc3 	bl	8007ff0 <USBD_CtlError>
      break;
 800766a:	bf00      	nop
  }

  return ret;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop

08007678 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800768e:	2b40      	cmp	r3, #64	@ 0x40
 8007690:	d005      	beq.n	800769e <USBD_StdItfReq+0x26>
 8007692:	2b40      	cmp	r3, #64	@ 0x40
 8007694:	d82e      	bhi.n	80076f4 <USBD_StdItfReq+0x7c>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <USBD_StdItfReq+0x26>
 800769a:	2b20      	cmp	r3, #32
 800769c:	d12a      	bne.n	80076f4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a4:	3b01      	subs	r3, #1
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d81d      	bhi.n	80076e6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	889b      	ldrh	r3, [r3, #4]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d813      	bhi.n	80076dc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	88db      	ldrh	r3, [r3, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d110      	bne.n	80076f0 <USBD_StdItfReq+0x78>
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fd35 	bl	8008144 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076da:	e009      	b.n	80076f0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fc86 	bl	8007ff0 <USBD_CtlError>
          break;
 80076e4:	e004      	b.n	80076f0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fc81 	bl	8007ff0 <USBD_CtlError>
          break;
 80076ee:	e000      	b.n	80076f2 <USBD_StdItfReq+0x7a>
          break;
 80076f0:	bf00      	nop
      }
      break;
 80076f2:	e004      	b.n	80076fe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc7a 	bl	8007ff0 <USBD_CtlError>
      break;
 80076fc:	bf00      	nop
  }

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	889b      	ldrh	r3, [r3, #4]
 800771a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007724:	2b40      	cmp	r3, #64	@ 0x40
 8007726:	d007      	beq.n	8007738 <USBD_StdEPReq+0x30>
 8007728:	2b40      	cmp	r3, #64	@ 0x40
 800772a:	f200 8146 	bhi.w	80079ba <USBD_StdEPReq+0x2b2>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <USBD_StdEPReq+0x40>
 8007732:	2b20      	cmp	r3, #32
 8007734:	f040 8141 	bne.w	80079ba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
      break;
 8007746:	e13d      	b.n	80079c4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007750:	2b20      	cmp	r3, #32
 8007752:	d10a      	bne.n	800776a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	e12d      	b.n	80079c6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	2b03      	cmp	r3, #3
 8007770:	d007      	beq.n	8007782 <USBD_StdEPReq+0x7a>
 8007772:	2b03      	cmp	r3, #3
 8007774:	f300 811b 	bgt.w	80079ae <USBD_StdEPReq+0x2a6>
 8007778:	2b00      	cmp	r3, #0
 800777a:	d072      	beq.n	8007862 <USBD_StdEPReq+0x15a>
 800777c:	2b01      	cmp	r3, #1
 800777e:	d03a      	beq.n	80077f6 <USBD_StdEPReq+0xee>
 8007780:	e115      	b.n	80079ae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007788:	2b02      	cmp	r3, #2
 800778a:	d002      	beq.n	8007792 <USBD_StdEPReq+0x8a>
 800778c:	2b03      	cmp	r3, #3
 800778e:	d015      	beq.n	80077bc <USBD_StdEPReq+0xb4>
 8007790:	e02b      	b.n	80077ea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <USBD_StdEPReq+0xaa>
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b80      	cmp	r3, #128	@ 0x80
 800779c:	d009      	beq.n	80077b2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 ff82 	bl	80086ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077a8:	2180      	movs	r1, #128	@ 0x80
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 ff7e 	bl	80086ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b0:	e020      	b.n	80077f4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc1b 	bl	8007ff0 <USBD_CtlError>
              break;
 80077ba:	e01b      	b.n	80077f4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	885b      	ldrh	r3, [r3, #2]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10e      	bne.n	80077e2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <USBD_StdEPReq+0xda>
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b80      	cmp	r3, #128	@ 0x80
 80077ce:	d008      	beq.n	80077e2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	88db      	ldrh	r3, [r3, #6]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 ff65 	bl	80086ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fcae 	bl	8008144 <USBD_CtlSendStatus>

              break;
 80077e8:	e004      	b.n	80077f4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fbff 	bl	8007ff0 <USBD_CtlError>
              break;
 80077f2:	bf00      	nop
          }
          break;
 80077f4:	e0e0      	b.n	80079b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d002      	beq.n	8007806 <USBD_StdEPReq+0xfe>
 8007800:	2b03      	cmp	r3, #3
 8007802:	d015      	beq.n	8007830 <USBD_StdEPReq+0x128>
 8007804:	e026      	b.n	8007854 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00c      	beq.n	8007826 <USBD_StdEPReq+0x11e>
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b80      	cmp	r3, #128	@ 0x80
 8007810:	d009      	beq.n	8007826 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 ff48 	bl	80086ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800781c:	2180      	movs	r1, #128	@ 0x80
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 ff44 	bl	80086ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007824:	e01c      	b.n	8007860 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fbe1 	bl	8007ff0 <USBD_CtlError>
              break;
 800782e:	e017      	b.n	8007860 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	885b      	ldrh	r3, [r3, #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d112      	bne.n	800785e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800783e:	2b00      	cmp	r3, #0
 8007840:	d004      	beq.n	800784c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 ff4f 	bl	80086ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fc79 	bl	8008144 <USBD_CtlSendStatus>
              }
              break;
 8007852:	e004      	b.n	800785e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fbca 	bl	8007ff0 <USBD_CtlError>
              break;
 800785c:	e000      	b.n	8007860 <USBD_StdEPReq+0x158>
              break;
 800785e:	bf00      	nop
          }
          break;
 8007860:	e0aa      	b.n	80079b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007868:	2b02      	cmp	r3, #2
 800786a:	d002      	beq.n	8007872 <USBD_StdEPReq+0x16a>
 800786c:	2b03      	cmp	r3, #3
 800786e:	d032      	beq.n	80078d6 <USBD_StdEPReq+0x1ce>
 8007870:	e097      	b.n	80079a2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <USBD_StdEPReq+0x180>
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	2b80      	cmp	r3, #128	@ 0x80
 800787c:	d004      	beq.n	8007888 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fbb5 	bl	8007ff0 <USBD_CtlError>
                break;
 8007886:	e091      	b.n	80079ac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800788c:	2b00      	cmp	r3, #0
 800788e:	da0b      	bge.n	80078a8 <USBD_StdEPReq+0x1a0>
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	3310      	adds	r3, #16
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	3304      	adds	r3, #4
 80078a6:	e00b      	b.n	80078c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	3304      	adds	r3, #4
 80078c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2202      	movs	r2, #2
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fbf8 	bl	80080c4 <USBD_CtlSendData>
              break;
 80078d4:	e06a      	b.n	80079ac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	da11      	bge.n	8007902 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	3318      	adds	r3, #24
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d117      	bne.n	8007928 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb78 	bl	8007ff0 <USBD_CtlError>
                  break;
 8007900:	e054      	b.n	80079ac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	f003 020f 	and.w	r2, r3, #15
 8007908:	6879      	ldr	r1, [r7, #4]
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	440b      	add	r3, r1
 8007914:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb65 	bl	8007ff0 <USBD_CtlError>
                  break;
 8007926:	e041      	b.n	80079ac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800792c:	2b00      	cmp	r3, #0
 800792e:	da0b      	bge.n	8007948 <USBD_StdEPReq+0x240>
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	3310      	adds	r3, #16
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4413      	add	r3, r2
 8007944:	3304      	adds	r3, #4
 8007946:	e00b      	b.n	8007960 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	3304      	adds	r3, #4
 8007960:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <USBD_StdEPReq+0x266>
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b80      	cmp	r3, #128	@ 0x80
 800796c:	d103      	bne.n	8007976 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e00e      	b.n	8007994 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fed4 	bl	8008728 <USBD_LL_IsStallEP>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2201      	movs	r2, #1
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e002      	b.n	8007994 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2202      	movs	r2, #2
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fb92 	bl	80080c4 <USBD_CtlSendData>
              break;
 80079a0:	e004      	b.n	80079ac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fb23 	bl	8007ff0 <USBD_CtlError>
              break;
 80079aa:	bf00      	nop
          }
          break;
 80079ac:	e004      	b.n	80079b8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fb1d 	bl	8007ff0 <USBD_CtlError>
          break;
 80079b6:	bf00      	nop
      }
      break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fb17 	bl	8007ff0 <USBD_CtlError>
      break;
 80079c2:	bf00      	nop
  }

  return ret;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	2b06      	cmp	r3, #6
 80079f2:	f200 8128 	bhi.w	8007c46 <USBD_GetDescriptor+0x276>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <USBD_GetDescriptor+0x2c>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a19 	.word	0x08007a19
 8007a00:	08007a31 	.word	0x08007a31
 8007a04:	08007a71 	.word	0x08007a71
 8007a08:	08007c47 	.word	0x08007c47
 8007a0c:	08007c47 	.word	0x08007c47
 8007a10:	08007be7 	.word	0x08007be7
 8007a14:	08007c13 	.word	0x08007c13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
      break;
 8007a2e:	e112      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7c1b      	ldrb	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10d      	bne.n	8007a54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	f107 0208 	add.w	r2, r7, #8
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	2202      	movs	r2, #2
 8007a50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a52:	e100      	b.n	8007c56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	f107 0208 	add.w	r2, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	701a      	strb	r2, [r3, #0]
      break;
 8007a6e:	e0f2      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	885b      	ldrh	r3, [r3, #2]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	f200 80ac 	bhi.w	8007bd4 <USBD_GetDescriptor+0x204>
 8007a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <USBD_GetDescriptor+0xb4>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007a9d 	.word	0x08007a9d
 8007a88:	08007ad1 	.word	0x08007ad1
 8007a8c:	08007b05 	.word	0x08007b05
 8007a90:	08007b39 	.word	0x08007b39
 8007a94:	08007b6d 	.word	0x08007b6d
 8007a98:	08007ba1 	.word	0x08007ba1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7c12      	ldrb	r2, [r2, #16]
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007abe:	e091      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa94 	bl	8007ff0 <USBD_CtlError>
            err++;
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3301      	adds	r3, #1
 8007acc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ace:	e089      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	7c12      	ldrb	r2, [r2, #16]
 8007ae8:	f107 0108 	add.w	r1, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af2:	e077      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa7a 	bl	8007ff0 <USBD_CtlError>
            err++;
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	3301      	adds	r3, #1
 8007b00:	72fb      	strb	r3, [r7, #11]
          break;
 8007b02:	e06f      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b26:	e05d      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa60 	bl	8007ff0 <USBD_CtlError>
            err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
          break;
 8007b36:	e055      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7c12      	ldrb	r2, [r2, #16]
 8007b50:	f107 0108 	add.w	r1, r7, #8
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
 8007b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b5a:	e043      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa46 	bl	8007ff0 <USBD_CtlError>
            err++;
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	3301      	adds	r3, #1
 8007b68:	72fb      	strb	r3, [r7, #11]
          break;
 8007b6a:	e03b      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	7c12      	ldrb	r2, [r2, #16]
 8007b84:	f107 0108 	add.w	r1, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b8e:	e029      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa2c 	bl	8007ff0 <USBD_CtlError>
            err++;
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b9e:	e021      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7c12      	ldrb	r2, [r2, #16]
 8007bb8:	f107 0108 	add.w	r1, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc2:	e00f      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa12 	bl	8007ff0 <USBD_CtlError>
            err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd2:	e007      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa0a 	bl	8007ff0 <USBD_CtlError>
          err++;
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	3301      	adds	r3, #1
 8007be0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007be2:	e038      	b.n	8007c56 <USBD_GetDescriptor+0x286>
 8007be4:	e037      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7c1b      	ldrb	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf6:	f107 0208 	add.w	r2, r7, #8
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	4798      	blx	r3
 8007bfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c00:	e029      	b.n	8007c56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f9f3 	bl	8007ff0 <USBD_CtlError>
        err++;
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c10:	e021      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7c1b      	ldrb	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10d      	bne.n	8007c36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c22:	f107 0208 	add.w	r2, r7, #8
 8007c26:	4610      	mov	r0, r2
 8007c28:	4798      	blx	r3
 8007c2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	2207      	movs	r2, #7
 8007c32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c34:	e00f      	b.n	8007c56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f9d9 	bl	8007ff0 <USBD_CtlError>
        err++;
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	3301      	adds	r3, #1
 8007c42:	72fb      	strb	r3, [r7, #11]
      break;
 8007c44:	e007      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9d1 	bl	8007ff0 <USBD_CtlError>
      err++;
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	3301      	adds	r3, #1
 8007c52:	72fb      	strb	r3, [r7, #11]
      break;
 8007c54:	bf00      	nop
  }

  if (err != 0U)
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11c      	bne.n	8007c96 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c5c:	893b      	ldrh	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d011      	beq.n	8007c86 <USBD_GetDescriptor+0x2b6>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	88db      	ldrh	r3, [r3, #6]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00d      	beq.n	8007c86 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	88da      	ldrh	r2, [r3, #6]
 8007c6e:	893b      	ldrh	r3, [r7, #8]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	bf28      	it	cs
 8007c74:	4613      	movcs	r3, r2
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c7a:	893b      	ldrh	r3, [r7, #8]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa1f 	bl	80080c4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	88db      	ldrh	r3, [r3, #6]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa58 	bl	8008144 <USBD_CtlSendStatus>
 8007c94:	e000      	b.n	8007c98 <USBD_GetDescriptor+0x2c8>
    return;
 8007c96:	bf00      	nop
    }
  }
}
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop

08007ca0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	889b      	ldrh	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d130      	bne.n	8007d14 <USBD_SetAddress+0x74>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	88db      	ldrh	r3, [r3, #6]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d12c      	bne.n	8007d14 <USBD_SetAddress+0x74>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cc0:	d828      	bhi.n	8007d14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ccc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d104      	bne.n	8007ce2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f988 	bl	8007ff0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce0:	e01d      	b.n	8007d1e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	7bfa      	ldrb	r2, [r7, #15]
 8007ce6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fd46 	bl	8008780 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fa25 	bl	8008144 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d08:	e009      	b.n	8007d1e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d12:	e004      	b.n	8007d1e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f96a 	bl	8007ff0 <USBD_CtlError>
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	885b      	ldrh	r3, [r3, #2]
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	4b41      	ldr	r3, [pc, #260]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007d3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d3c:	4b40      	ldr	r3, [pc, #256]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d904      	bls.n	8007d4e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f952 	bl	8007ff0 <USBD_CtlError>
 8007d4c:	e075      	b.n	8007e3a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d002      	beq.n	8007d5e <USBD_SetConfig+0x36>
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d023      	beq.n	8007da4 <USBD_SetConfig+0x7c>
 8007d5c:	e062      	b.n	8007e24 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d5e:	4b38      	ldr	r3, [pc, #224]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01a      	beq.n	8007d9c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d66:	4b36      	ldr	r3, [pc, #216]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2203      	movs	r2, #3
 8007d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d78:	4b31      	ldr	r3, [pc, #196]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff f9e8 	bl	8007154 <USBD_SetClassConfig>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d104      	bne.n	8007d94 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f92f 	bl	8007ff0 <USBD_CtlError>
            return;
 8007d92:	e052      	b.n	8007e3a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f9d5 	bl	8008144 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d9a:	e04e      	b.n	8007e3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f9d1 	bl	8008144 <USBD_CtlSendStatus>
        break;
 8007da2:	e04a      	b.n	8007e3a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007da4:	4b26      	ldr	r3, [pc, #152]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d112      	bne.n	8007dd2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007db4:	4b22      	ldr	r3, [pc, #136]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dbe:	4b20      	ldr	r3, [pc, #128]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff f9e4 	bl	8007192 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9ba 	bl	8008144 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dd0:	e033      	b.n	8007e3a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d01d      	beq.n	8007e1c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff f9d2 	bl	8007192 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007dee:	4b14      	ldr	r3, [pc, #80]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007df8:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff f9a8 	bl	8007154 <USBD_SetClassConfig>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d104      	bne.n	8007e14 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f8ef 	bl	8007ff0 <USBD_CtlError>
            return;
 8007e12:	e012      	b.n	8007e3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f995 	bl	8008144 <USBD_CtlSendStatus>
        break;
 8007e1a:	e00e      	b.n	8007e3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f991 	bl	8008144 <USBD_CtlSendStatus>
        break;
 8007e22:	e00a      	b.n	8007e3a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f8e2 	bl	8007ff0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e2c:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <USBD_SetConfig+0x118>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff f9ad 	bl	8007192 <USBD_ClrClassConfig>
        break;
 8007e38:	bf00      	nop
    }
  }
}
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000214 	.word	0x20000214

08007e44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	88db      	ldrh	r3, [r3, #6]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d004      	beq.n	8007e60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f8c9 	bl	8007ff0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e5e:	e022      	b.n	8007ea6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	dc02      	bgt.n	8007e70 <USBD_GetConfig+0x2c>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dc03      	bgt.n	8007e76 <USBD_GetConfig+0x32>
 8007e6e:	e015      	b.n	8007e9c <USBD_GetConfig+0x58>
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetConfig+0x48>
 8007e74:	e012      	b.n	8007e9c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	2201      	movs	r2, #1
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f91d 	bl	80080c4 <USBD_CtlSendData>
        break;
 8007e8a:	e00c      	b.n	8007ea6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	2201      	movs	r2, #1
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f915 	bl	80080c4 <USBD_CtlSendData>
        break;
 8007e9a:	e004      	b.n	8007ea6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f8a6 	bl	8007ff0 <USBD_CtlError>
        break;
 8007ea4:	bf00      	nop
}
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d81e      	bhi.n	8007f02 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	88db      	ldrh	r3, [r3, #6]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d004      	beq.n	8007ed6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f88e 	bl	8007ff0 <USBD_CtlError>
        break;
 8007ed4:	e01a      	b.n	8007f0c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f043 0202 	orr.w	r2, r3, #2
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f8e2 	bl	80080c4 <USBD_CtlSendData>
      break;
 8007f00:	e004      	b.n	8007f0c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f873 	bl	8007ff0 <USBD_CtlError>
      break;
 8007f0a:	bf00      	nop
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d106      	bne.n	8007f34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f908 	bl	8008144 <USBD_CtlSendStatus>
  }
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d80b      	bhi.n	8007f6a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	885b      	ldrh	r3, [r3, #2]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d10c      	bne.n	8007f74 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f8ee 	bl	8008144 <USBD_CtlSendStatus>
      }
      break;
 8007f68:	e004      	b.n	8007f74 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f83f 	bl	8007ff0 <USBD_CtlError>
      break;
 8007f72:	e000      	b.n	8007f76 <USBD_ClrFeature+0x3a>
      break;
 8007f74:	bf00      	nop
  }
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	785a      	ldrb	r2, [r3, #1]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	3302      	adds	r3, #2
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3303      	adds	r3, #3
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	4413      	add	r3, r2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	3305      	adds	r3, #5
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	3306      	adds	r3, #6
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	3307      	adds	r3, #7
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	4413      	add	r3, r2
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	80da      	strh	r2, [r3, #6]

}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ffa:	2180      	movs	r1, #128	@ 0x80
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fb55 	bl	80086ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fb51 	bl	80086ac <USBD_LL_StallEP>
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b086      	sub	sp, #24
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d032      	beq.n	800808e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f834 	bl	8008096 <USBD_GetLen>
 800802e:	4603      	mov	r3, r0
 8008030:	3301      	adds	r3, #1
 8008032:	b29b      	uxth	r3, r3
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	75fa      	strb	r2, [r7, #23]
 8008042:	461a      	mov	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4413      	add	r3, r2
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	75fa      	strb	r2, [r7, #23]
 8008054:	461a      	mov	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4413      	add	r3, r2
 800805a:	2203      	movs	r2, #3
 800805c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800805e:	e012      	b.n	8008086 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	60fa      	str	r2, [r7, #12]
 8008066:	7dfa      	ldrb	r2, [r7, #23]
 8008068:	1c51      	adds	r1, r2, #1
 800806a:	75f9      	strb	r1, [r7, #23]
 800806c:	4611      	mov	r1, r2
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	440a      	add	r2, r1
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	75fa      	strb	r2, [r7, #23]
 800807c:	461a      	mov	r2, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	4413      	add	r3, r2
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e8      	bne.n	8008060 <USBD_GetString+0x4e>
    }
  }
}
 800808e:	bf00      	nop
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080a2:	e005      	b.n	80080b0 <USBD_GetLen+0x1a>
  {
    len++;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	3301      	adds	r3, #1
 80080a8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3301      	adds	r3, #1
 80080ae:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1f5      	bne.n	80080a4 <USBD_GetLen+0xe>
  }

  return len;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2202      	movs	r2, #2
 80080d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	2100      	movs	r1, #0
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fb66 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	2100      	movs	r1, #0
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fb54 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	2100      	movs	r1, #0
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 fb65 	bl	8008804 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2204      	movs	r2, #4
 8008150:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008154:	2300      	movs	r3, #0
 8008156:	2200      	movs	r2, #0
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fb2f 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2205      	movs	r2, #5
 8008176:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800817a:	2300      	movs	r3, #0
 800817c:	2200      	movs	r2, #0
 800817e:	2100      	movs	r1, #0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fb3f 	bl	8008804 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008194:	2200      	movs	r2, #0
 8008196:	490e      	ldr	r1, [pc, #56]	@ (80081d0 <MX_USB_DEVICE_Init+0x40>)
 8008198:	480e      	ldr	r0, [pc, #56]	@ (80081d4 <MX_USB_DEVICE_Init+0x44>)
 800819a:	f7fe ff81 	bl	80070a0 <USBD_Init>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081a4:	f7f8 f9c8 	bl	8000538 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80081a8:	490b      	ldr	r1, [pc, #44]	@ (80081d8 <MX_USB_DEVICE_Init+0x48>)
 80081aa:	480a      	ldr	r0, [pc, #40]	@ (80081d4 <MX_USB_DEVICE_Init+0x44>)
 80081ac:	f7fe ffa3 	bl	80070f6 <USBD_RegisterClass>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081b6:	f7f8 f9bf 	bl	8000538 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081ba:	4806      	ldr	r0, [pc, #24]	@ (80081d4 <MX_USB_DEVICE_Init+0x44>)
 80081bc:	f7fe ffb4 	bl	8007128 <USBD_Start>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80081c6:	f7f8 f9b7 	bl	8000538 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081ca:	bf00      	nop
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000108 	.word	0x20000108
 80081d4:	20000218 	.word	0x20000218
 80081d8:	2000000c 	.word	0x2000000c

080081dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2212      	movs	r2, #18
 80081ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081ee:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000124 	.word	0x20000124

08008200 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	6039      	str	r1, [r7, #0]
 800820a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2204      	movs	r2, #4
 8008210:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008212:	4b03      	ldr	r3, [pc, #12]	@ (8008220 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000138 	.word	0x20000138

08008224 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d105      	bne.n	8008242 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4907      	ldr	r1, [pc, #28]	@ (8008258 <USBD_FS_ProductStrDescriptor+0x34>)
 800823a:	4808      	ldr	r0, [pc, #32]	@ (800825c <USBD_FS_ProductStrDescriptor+0x38>)
 800823c:	f7ff fee9 	bl	8008012 <USBD_GetString>
 8008240:	e004      	b.n	800824c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4904      	ldr	r1, [pc, #16]	@ (8008258 <USBD_FS_ProductStrDescriptor+0x34>)
 8008246:	4805      	ldr	r0, [pc, #20]	@ (800825c <USBD_FS_ProductStrDescriptor+0x38>)
 8008248:	f7ff fee3 	bl	8008012 <USBD_GetString>
  }
  return USBD_StrDesc;
 800824c:	4b02      	ldr	r3, [pc, #8]	@ (8008258 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200004dc 	.word	0x200004dc
 800825c:	08008954 	.word	0x08008954

08008260 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	4904      	ldr	r1, [pc, #16]	@ (8008280 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008270:	4804      	ldr	r0, [pc, #16]	@ (8008284 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008272:	f7ff fece 	bl	8008012 <USBD_GetString>
  return USBD_StrDesc;
 8008276:	4b02      	ldr	r3, [pc, #8]	@ (8008280 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	200004dc 	.word	0x200004dc
 8008284:	0800896c 	.word	0x0800896c

08008288 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	6039      	str	r1, [r7, #0]
 8008292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	221a      	movs	r2, #26
 8008298:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800829a:	f000 f843 	bl	8008324 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800829e:	4b02      	ldr	r3, [pc, #8]	@ (80082a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	2000013c 	.word	0x2000013c

080082ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	6039      	str	r1, [r7, #0]
 80082b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4907      	ldr	r1, [pc, #28]	@ (80082e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082c2:	4808      	ldr	r0, [pc, #32]	@ (80082e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082c4:	f7ff fea5 	bl	8008012 <USBD_GetString>
 80082c8:	e004      	b.n	80082d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	4904      	ldr	r1, [pc, #16]	@ (80082e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ce:	4805      	ldr	r0, [pc, #20]	@ (80082e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082d0:	f7ff fe9f 	bl	8008012 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082d4:	4b02      	ldr	r3, [pc, #8]	@ (80082e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	200004dc 	.word	0x200004dc
 80082e4:	08008980 	.word	0x08008980

080082e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4907      	ldr	r1, [pc, #28]	@ (800831c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082fe:	4808      	ldr	r0, [pc, #32]	@ (8008320 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008300:	f7ff fe87 	bl	8008012 <USBD_GetString>
 8008304:	e004      	b.n	8008310 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4904      	ldr	r1, [pc, #16]	@ (800831c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800830a:	4805      	ldr	r0, [pc, #20]	@ (8008320 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800830c:	f7ff fe81 	bl	8008012 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008310:	4b02      	ldr	r3, [pc, #8]	@ (800831c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	200004dc 	.word	0x200004dc
 8008320:	08008990 	.word	0x08008990

08008324 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4413      	add	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008338:	2208      	movs	r2, #8
 800833a:	4906      	ldr	r1, [pc, #24]	@ (8008354 <Get_SerialNum+0x30>)
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f80d 	bl	800835c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008342:	2204      	movs	r2, #4
 8008344:	4904      	ldr	r1, [pc, #16]	@ (8008358 <Get_SerialNum+0x34>)
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f808 	bl	800835c <IntToUnicode>
  }
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	2000013e 	.word	0x2000013e
 8008358:	2000014e 	.word	0x2000014e

0800835c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]
 8008372:	e027      	b.n	80083c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0f1b      	lsrs	r3, r3, #28
 8008378:	2b09      	cmp	r3, #9
 800837a:	d80b      	bhi.n	8008394 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	0f1b      	lsrs	r3, r3, #28
 8008380:	b2da      	uxtb	r2, r3
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	4619      	mov	r1, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	440b      	add	r3, r1
 800838c:	3230      	adds	r2, #48	@ 0x30
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	e00a      	b.n	80083aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	0f1b      	lsrs	r3, r3, #28
 8008398:	b2da      	uxtb	r2, r3
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4619      	mov	r1, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	440b      	add	r3, r1
 80083a4:	3237      	adds	r2, #55	@ 0x37
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	3301      	adds	r3, #1
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	4413      	add	r3, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	3301      	adds	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
 80083c4:	7dfa      	ldrb	r2, [r7, #23]
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d3d3      	bcc.n	8008374 <IntToUnicode+0x18>
  }
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr

080083d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a0d      	ldr	r2, [pc, #52]	@ (800841c <HAL_PCD_MspInit+0x44>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d113      	bne.n	8008412 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <HAL_PCD_MspInit+0x48>)
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008420 <HAL_PCD_MspInit+0x48>)
 80083f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083f4:	61d3      	str	r3, [r2, #28]
 80083f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008420 <HAL_PCD_MspInit+0x48>)
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008402:	2200      	movs	r2, #0
 8008404:	2100      	movs	r1, #0
 8008406:	2014      	movs	r0, #20
 8008408:	f7f8 faf5 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800840c:	2014      	movs	r0, #20
 800840e:	f7f8 fb0e 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	40005c00 	.word	0x40005c00
 8008420:	40021000 	.word	0x40021000

08008424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f7fe febc 	bl	80071b8 <USBD_LL_SetupStage>
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800845a:	78fa      	ldrb	r2, [r7, #3]
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	440b      	add	r3, r1
 8008468:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	4619      	mov	r1, r3
 8008472:	f7fe feee 	bl	8007252 <USBD_LL_DataOutStage>
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	440b      	add	r3, r1
 800849e:	333c      	adds	r3, #60	@ 0x3c
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	4619      	mov	r1, r3
 80084a6:	f7fe ff45 	bl	8007334 <USBD_LL_DataInStage>
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff f855 	bl	8007570 <USBD_LL_SOF>
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084d6:	2301      	movs	r3, #1
 80084d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d001      	beq.n	80084e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084e2:	f7f8 f829 	bl	8000538 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80084ec:	7bfa      	ldrb	r2, [r7, #15]
 80084ee:	4611      	mov	r1, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff f805 	bl	8007500 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe ffbe 	bl	800747e <USBD_LL_Reset>
}
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe ffff 	bl	800751e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008528:	4b04      	ldr	r3, [pc, #16]	@ (800853c <HAL_PCD_SuspendCallback+0x30>)
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	4a03      	ldr	r2, [pc, #12]	@ (800853c <HAL_PCD_SuspendCallback+0x30>)
 800852e:	f043 0306 	orr.w	r3, r3, #6
 8008532:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	e000ed00 	.word	0xe000ed00

08008540 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fff9 	bl	8007546 <USBD_LL_Resume>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008564:	4a1f      	ldr	r2, [pc, #124]	@ (80085e4 <USBD_LL_Init+0x88>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a1d      	ldr	r2, [pc, #116]	@ (80085e4 <USBD_LL_Init+0x88>)
 8008570:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008574:	4b1b      	ldr	r3, [pc, #108]	@ (80085e4 <USBD_LL_Init+0x88>)
 8008576:	4a1c      	ldr	r2, [pc, #112]	@ (80085e8 <USBD_LL_Init+0x8c>)
 8008578:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800857a:	4b1a      	ldr	r3, [pc, #104]	@ (80085e4 <USBD_LL_Init+0x88>)
 800857c:	2208      	movs	r2, #8
 800857e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008580:	4b18      	ldr	r3, [pc, #96]	@ (80085e4 <USBD_LL_Init+0x88>)
 8008582:	2202      	movs	r2, #2
 8008584:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008586:	4b17      	ldr	r3, [pc, #92]	@ (80085e4 <USBD_LL_Init+0x88>)
 8008588:	2200      	movs	r2, #0
 800858a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800858c:	4b15      	ldr	r3, [pc, #84]	@ (80085e4 <USBD_LL_Init+0x88>)
 800858e:	2200      	movs	r2, #0
 8008590:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008592:	4b14      	ldr	r3, [pc, #80]	@ (80085e4 <USBD_LL_Init+0x88>)
 8008594:	2200      	movs	r2, #0
 8008596:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008598:	4812      	ldr	r0, [pc, #72]	@ (80085e4 <USBD_LL_Init+0x88>)
 800859a:	f7f8 fcc8 	bl	8000f2e <HAL_PCD_Init>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085a4:	f7f7 ffc8 	bl	8000538 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085ae:	2318      	movs	r3, #24
 80085b0:	2200      	movs	r2, #0
 80085b2:	2100      	movs	r1, #0
 80085b4:	f7fa f9cf 	bl	8002956 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085be:	2358      	movs	r3, #88	@ 0x58
 80085c0:	2200      	movs	r2, #0
 80085c2:	2180      	movs	r1, #128	@ 0x80
 80085c4:	f7fa f9c7 	bl	8002956 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085d2:	2200      	movs	r2, #0
 80085d4:	2181      	movs	r1, #129	@ 0x81
 80085d6:	f7fa f9be 	bl	8002956 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	200006dc 	.word	0x200006dc
 80085e8:	40005c00 	.word	0x40005c00

080085ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008602:	4618      	mov	r0, r3
 8008604:	f7f8 fd92 	bl	800112c <HAL_PCD_Start>
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f93c 	bl	800888c <USBD_Get_USB_Status>
 8008614:	4603      	mov	r3, r0
 8008616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008618:	7bbb      	ldrb	r3, [r7, #14]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	4603      	mov	r3, r0
 8008632:	70fb      	strb	r3, [r7, #3]
 8008634:	460b      	mov	r3, r1
 8008636:	70bb      	strb	r3, [r7, #2]
 8008638:	4613      	mov	r3, r2
 800863a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800864a:	78bb      	ldrb	r3, [r7, #2]
 800864c:	883a      	ldrh	r2, [r7, #0]
 800864e:	78f9      	ldrb	r1, [r7, #3]
 8008650:	f7f8 fee7 	bl	8001422 <HAL_PCD_EP_Open>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f916 	bl	800888c <USBD_Get_USB_Status>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008664:	7bbb      	ldrb	r3, [r7, #14]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7f8 ff25 	bl	80014dc <HAL_PCD_EP_Close>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f8f7 	bl	800888c <USBD_Get_USB_Status>
 800869e:	4603      	mov	r3, r0
 80086a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f8 ffb6 	bl	800163c <HAL_PCD_EP_SetStall>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f8d8 	bl	800888c <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7f8 fff7 	bl	80016fc <HAL_PCD_EP_ClrStall>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f8b9 	bl	800888c <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800873a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800873c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da0c      	bge.n	800875e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	440b      	add	r3, r1
 8008758:	3302      	adds	r3, #2
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	e00b      	b.n	8008776 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008764:	68f9      	ldr	r1, [r7, #12]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	440b      	add	r3, r1
 8008770:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008774:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr

08008780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	4611      	mov	r1, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f8 fe1a 	bl	80013d8 <HAL_PCD_SetAddress>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f86e 	bl	800888c <USBD_Get_USB_Status>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	461a      	mov	r2, r3
 80087ca:	460b      	mov	r3, r1
 80087cc:	72fb      	strb	r3, [r7, #11]
 80087ce:	4613      	mov	r3, r2
 80087d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087e0:	893b      	ldrh	r3, [r7, #8]
 80087e2:	7af9      	ldrb	r1, [r7, #11]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	f7f8 fef2 	bl	80015ce <HAL_PCD_EP_Transmit>
 80087ea:	4603      	mov	r3, r0
 80087ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f84b 	bl	800888c <USBD_Get_USB_Status>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	607a      	str	r2, [r7, #4]
 800880e:	461a      	mov	r2, r3
 8008810:	460b      	mov	r3, r1
 8008812:	72fb      	strb	r3, [r7, #11]
 8008814:	4613      	mov	r3, r2
 8008816:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008826:	893b      	ldrh	r3, [r7, #8]
 8008828:	7af9      	ldrb	r1, [r7, #11]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	f7f8 fe9e 	bl	800156c <HAL_PCD_EP_Receive>
 8008830:	4603      	mov	r3, r0
 8008832:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	4618      	mov	r0, r3
 8008838:	f000 f828 	bl	800888c <USBD_Get_USB_Status>
 800883c:	4603      	mov	r3, r0
 800883e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008840:	7dbb      	ldrb	r3, [r7, #22]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008854:	4b02      	ldr	r3, [pc, #8]	@ (8008860 <USBD_static_malloc+0x14>)
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr
 8008860:	200009cc 	.word	0x200009cc

08008864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr

08008876 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	bc80      	pop	{r7}
 800888a:	4770      	bx	lr

0800888c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	2b03      	cmp	r3, #3
 800889e:	d817      	bhi.n	80088d0 <USBD_Get_USB_Status+0x44>
 80088a0:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <USBD_Get_USB_Status+0x1c>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088bf 	.word	0x080088bf
 80088b0:	080088c5 	.word	0x080088c5
 80088b4:	080088cb 	.word	0x080088cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
    break;
 80088bc:	e00b      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088be:	2302      	movs	r3, #2
 80088c0:	73fb      	strb	r3, [r7, #15]
    break;
 80088c2:	e008      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]
    break;
 80088c8:	e005      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088ca:	2302      	movs	r3, #2
 80088cc:	73fb      	strb	r3, [r7, #15]
    break;
 80088ce:	e002      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088d0:	2302      	movs	r3, #2
 80088d2:	73fb      	strb	r3, [r7, #15]
    break;
 80088d4:	bf00      	nop
  }
  return usb_status;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop

080088e4 <memset>:
 80088e4:	4603      	mov	r3, r0
 80088e6:	4402      	add	r2, r0
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d100      	bne.n	80088ee <memset+0xa>
 80088ec:	4770      	bx	lr
 80088ee:	f803 1b01 	strb.w	r1, [r3], #1
 80088f2:	e7f9      	b.n	80088e8 <memset+0x4>

080088f4 <__libc_init_array>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	2600      	movs	r6, #0
 80088f8:	4d0c      	ldr	r5, [pc, #48]	@ (800892c <__libc_init_array+0x38>)
 80088fa:	4c0d      	ldr	r4, [pc, #52]	@ (8008930 <__libc_init_array+0x3c>)
 80088fc:	1b64      	subs	r4, r4, r5
 80088fe:	10a4      	asrs	r4, r4, #2
 8008900:	42a6      	cmp	r6, r4
 8008902:	d109      	bne.n	8008918 <__libc_init_array+0x24>
 8008904:	f000 f81a 	bl	800893c <_init>
 8008908:	2600      	movs	r6, #0
 800890a:	4d0a      	ldr	r5, [pc, #40]	@ (8008934 <__libc_init_array+0x40>)
 800890c:	4c0a      	ldr	r4, [pc, #40]	@ (8008938 <__libc_init_array+0x44>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	42a6      	cmp	r6, r4
 8008914:	d105      	bne.n	8008922 <__libc_init_array+0x2e>
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	f855 3b04 	ldr.w	r3, [r5], #4
 800891c:	4798      	blx	r3
 800891e:	3601      	adds	r6, #1
 8008920:	e7ee      	b.n	8008900 <__libc_init_array+0xc>
 8008922:	f855 3b04 	ldr.w	r3, [r5], #4
 8008926:	4798      	blx	r3
 8008928:	3601      	adds	r6, #1
 800892a:	e7f2      	b.n	8008912 <__libc_init_array+0x1e>
 800892c:	080089cc 	.word	0x080089cc
 8008930:	080089cc 	.word	0x080089cc
 8008934:	080089cc 	.word	0x080089cc
 8008938:	080089d0 	.word	0x080089d0

0800893c <_init>:
 800893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893e:	bf00      	nop
 8008940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008942:	bc08      	pop	{r3}
 8008944:	469e      	mov	lr, r3
 8008946:	4770      	bx	lr

08008948 <_fini>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr
