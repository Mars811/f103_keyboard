
f103_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d8  080089d8  0000a158  2**0
                  CONTENTS
  4 .ARM          00000000  080089d8  080089d8  0000a158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089d8  080089d8  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d8  080089d8  000099d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089dc  080089dc  000099dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080089e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20000158  08008b38  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  08008b38  0000a9e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014333  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003345  00000000  00000000  0001e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00021800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfc  00000000  00000000  00022a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b9  00000000  00000000  0002382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dfa  00000000  00000000  0003d9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee79  00000000  00000000  000557df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  000e469c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e9208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08008948 	.word	0x08008948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08008948 	.word	0x08008948

0800014c <GetPointerData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* 获取键位 */
static void GetPointerData(uint8_t *pbuf)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  // 清空报告缓冲区（8字节全0）
  memset(pbuf, 0, 8);
 8000154:	2208      	movs	r2, #8
 8000156:	2100      	movs	r1, #0
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f008 fbc9 	bl	80088f0 <memset>

  if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == 1) {
 800015e:	2102      	movs	r1, #2
 8000160:	4811      	ldr	r0, [pc, #68]	@ (80001a8 <GetPointerData+0x5c>)
 8000162:	f000 febb 	bl	8000edc <HAL_GPIO_ReadPin>
 8000166:	4603      	mov	r3, r0
 8000168:	2b01      	cmp	r3, #1
 800016a:	d108      	bne.n	800017e <GetPointerData+0x32>
    pbuf[0] = 0x01;   // 左Ctrl修饰键
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2201      	movs	r2, #1
 8000170:	701a      	strb	r2, [r3, #0]
    pbuf[2] = 0x19;   // V键
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	3302      	adds	r3, #2
 8000176:	2219      	movs	r2, #25
 8000178:	701a      	strb	r2, [r3, #0]
    led_flash();
 800017a:	f000 f9a3 	bl	80004c4 <led_flash>
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 800017e:	2108      	movs	r1, #8
 8000180:	4809      	ldr	r0, [pc, #36]	@ (80001a8 <GetPointerData+0x5c>)
 8000182:	f000 feab 	bl	8000edc <HAL_GPIO_ReadPin>
 8000186:	4603      	mov	r3, r0
 8000188:	2b01      	cmp	r3, #1
 800018a:	d108      	bne.n	800019e <GetPointerData+0x52>
    pbuf[0] = 0x01;   // 左Ctrl修饰键
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2201      	movs	r2, #1
 8000190:	701a      	strb	r2, [r3, #0]
    pbuf[2] = 0x06;   // C键
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	3302      	adds	r3, #2
 8000196:	2206      	movs	r2, #6
 8000198:	701a      	strb	r2, [r3, #0]
    led_flash();
 800019a:	f000 f993 	bl	80004c4 <led_flash>
  }
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b0:	f000 faee 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b4:	f000 f810 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b8:	f000 f8de 	bl	8000378 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001bc:	f000 f8b2 	bl	8000324 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001c0:	f007 ffec 	bl	800819c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001c4:	f000 f862 	bl	800028c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* 主函数 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001c8:	4802      	ldr	r0, [pc, #8]	@ (80001d4 <main+0x28>)
 80001ca:	f003 f923 	bl	8003414 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ce:	bf00      	nop
 80001d0:	e7fd      	b.n	80001ce <main+0x22>
 80001d2:	bf00      	nop
 80001d4:	20000174 	.word	0x20000174

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	@ 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001e2:	2228      	movs	r2, #40	@ 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f008 fb82 	bl	80088f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000224:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000228:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fbda 	bl	80029e8 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023a:	f000 f983 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800024e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2102      	movs	r1, #2
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fe46 	bl	8002eec <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000266:	f000 f96d 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800026a:	2310      	movs	r3, #16
 800026c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f002 ffc7 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000280:	f000 f960 	bl	8000544 <Error_Handler>
  }
}
 8000284:	bf00      	nop
 8000286:	3750      	adds	r7, #80	@ 0x50
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000292:	f107 0308 	add.w	r3, r7, #8
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002b2:	2247      	movs	r2, #71	@ 0x47
 80002b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c4:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d0:	4813      	ldr	r0, [pc, #76]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002d2:	f003 f84f 	bl	8003374 <HAL_TIM_Base_Init>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002dc:	f000 f932 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	4619      	mov	r1, r3
 80002ec:	480c      	ldr	r0, [pc, #48]	@ (8000320 <MX_TIM2_Init+0x94>)
 80002ee:	f003 f9eb 	bl	80036c8 <HAL_TIM_ConfigClockSource>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002f8:	f000 f924 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002fc:	2300      	movs	r3, #0
 80002fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000300:	2300      	movs	r3, #0
 8000302:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000304:	463b      	mov	r3, r7
 8000306:	4619      	mov	r1, r3
 8000308:	4805      	ldr	r0, [pc, #20]	@ (8000320 <MX_TIM2_Init+0x94>)
 800030a:	f003 fbc1 	bl	8003a90 <HAL_TIMEx_MasterConfigSynchronization>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000314:	f000 f916 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	3718      	adds	r7, #24
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000174 	.word	0x20000174

08000324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	@ (8000374 <MX_USART1_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000330:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800035c:	f003 fc08 	bl	8003b70 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000366:	f000 f8ed 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200001bc 	.word	0x200001bc
 8000374:	40013800 	.word	0x40013800

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b2a      	ldr	r3, [pc, #168]	@ (8000438 <MX_GPIO_Init+0xc0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a29      	ldr	r2, [pc, #164]	@ (8000438 <MX_GPIO_Init+0xc0>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b27      	ldr	r3, [pc, #156]	@ (8000438 <MX_GPIO_Init+0xc0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b24      	ldr	r3, [pc, #144]	@ (8000438 <MX_GPIO_Init+0xc0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a23      	ldr	r2, [pc, #140]	@ (8000438 <MX_GPIO_Init+0xc0>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b21      	ldr	r3, [pc, #132]	@ (8000438 <MX_GPIO_Init+0xc0>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000438 <MX_GPIO_Init+0xc0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000438 <MX_GPIO_Init+0xc0>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <MX_GPIO_Init+0xc0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80003d4:	2302      	movs	r3, #2
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003dc:	2302      	movs	r3, #2
 80003de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4815      	ldr	r0, [pc, #84]	@ (800043c <MX_GPIO_Init+0xc4>)
 80003e8:	f000 fbf4 	bl	8000bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* GPIO配置 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003ec:	2308      	movs	r3, #8
 80003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003f4:	2302      	movs	r3, #2
 80003f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	480f      	ldr	r0, [pc, #60]	@ (800043c <MX_GPIO_Init+0xc4>)
 8000400:	f000 fbe8 	bl	8000bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4808      	ldr	r0, [pc, #32]	@ (8000440 <MX_GPIO_Init+0xc8>)
 800041e:	f000 fbd9 	bl	8000bd4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000428:	4805      	ldr	r0, [pc, #20]	@ (8000440 <MX_GPIO_Init+0xc8>)
 800042a:	f000 fd6e 	bl	8000f0a <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 800042e:	bf00      	nop
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800
 8000440:	40011000 	.word	0x40011000

08000444 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t xus)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  SysTick->LOAD = 6 * xus; 
 800044c:	4914      	ldr	r1, [pc, #80]	@ (80004a0 <delay_us+0x5c>)
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4613      	mov	r3, r2
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	4413      	add	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	604b      	str	r3, [r1, #4]
  SysTick->VAL = 0x00; 
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <delay_us+0x5c>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = 0X00000001; 
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <delay_us+0x5c>)
 8000462:	2201      	movs	r2, #1
 8000464:	601a      	str	r2, [r3, #0]
  while(!(SysTick->CTRL & 0X00010000))
 8000466:	e00d      	b.n	8000484 <delay_us+0x40>
  {
    if((SysTick->CTRL &= 0X00000001)==0)
 8000468:	4b0d      	ldr	r3, [pc, #52]	@ (80004a0 <delay_us+0x5c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a0c      	ldr	r2, [pc, #48]	@ (80004a0 <delay_us+0x5c>)
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d105      	bne.n	8000484 <delay_us+0x40>
      SysTick->CTRL |= 0X00000001; 
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <delay_us+0x5c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <delay_us+0x5c>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6013      	str	r3, [r2, #0]
  while(!(SysTick->CTRL & 0X00010000))
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <delay_us+0x5c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0eb      	beq.n	8000468 <delay_us+0x24>
  }
  SysTick->CTRL = 0X00000000; 
 8000490:	4b03      	ldr	r3, [pc, #12]	@ (80004a0 <delay_us+0x5c>)
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	e000e010 	.word	0xe000e010

080004a4 <delay_ms>:

void delay_ms(uint32_t xms){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  delay_us(1000 * xms);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004b2:	fb02 f303 	mul.w	r3, r2, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ffc4 	bl	8000444 <delay_us>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <led_flash>:

void led_flash(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ce:	4807      	ldr	r0, [pc, #28]	@ (80004ec <led_flash+0x28>)
 80004d0:	f000 fd1b 	bl	8000f0a <HAL_GPIO_WritePin>
  delay_ms(50);
 80004d4:	2032      	movs	r0, #50	@ 0x32
 80004d6:	f7ff ffe5 	bl	80004a4 <delay_ms>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e0:	4802      	ldr	r0, [pc, #8]	@ (80004ec <led_flash+0x28>)
 80004e2:	f000 fd12 	bl	8000f0a <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40011000 	.word	0x40011000

080004f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* 定时器中断回调函数 */
  static volatile uint32_t counter = 0;
    if (htim->Instance == TIM2)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000500:	d115      	bne.n	800052e <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      // 每10ms执行一次PC的轮询回应
      if(counter++ == USBD_HID_GetPollingInterval(&hUsbDeviceFS))
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000504:	681c      	ldr	r4, [r3, #0]
 8000506:	1c63      	adds	r3, r4, #1
 8000508:	4a0b      	ldr	r2, [pc, #44]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800050e:	f006 fd65 	bl	8006fdc <USBD_HID_GetPollingInterval>
 8000512:	4603      	mov	r3, r0
 8000514:	429c      	cmp	r4, r3
 8000516:	d10a      	bne.n	800052e <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
        GetPointerData(HID_Buffer);
 8000518:	4809      	ldr	r0, [pc, #36]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800051a:	f7ff fe17 	bl	800014c <GetPointerData>
        USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 800051e:	2208      	movs	r2, #8
 8000520:	4907      	ldr	r1, [pc, #28]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000522:	4806      	ldr	r0, [pc, #24]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000524:	f006 fd38 	bl	8006f98 <USBD_HID_SendReport>
        counter = 0;
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
      }
    }
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	bf00      	nop
 8000538:	2000020c 	.word	0x2000020c
 800053c:	20000218 	.word	0x20000218
 8000540:	20000204 	.word	0x20000204

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <Error_Handler+0x8>

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <HAL_MspInit+0x5c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6193      	str	r3, [r2, #24]
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_MspInit+0x5c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_MspInit+0x5c>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <HAL_MspInit+0x5c>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_MspInit+0x60>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <HAL_MspInit+0x60>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005c4:	d113      	bne.n	80005ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <HAL_TIM_Base_MspInit+0x44>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <HAL_TIM_Base_MspInit+0x44>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <HAL_TIM_Base_MspInit+0x44>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	201c      	movs	r0, #28
 80005e4:	f000 fa0d 	bl	8000a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005e8:	201c      	movs	r0, #28
 80005ea:	f000 fa26 	bl	8000a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <HAL_UART_MspInit+0x9c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d139      	bne.n	8000690 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <HAL_UART_MspInit+0xa0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a1e      	ldr	r2, [pc, #120]	@ (800069c <HAL_UART_MspInit+0xa0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <HAL_UART_MspInit+0xa0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <HAL_UART_MspInit+0xa0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a18      	ldr	r2, [pc, #96]	@ (800069c <HAL_UART_MspInit+0xa0>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <HAL_UART_MspInit+0xa0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	480f      	ldr	r0, [pc, #60]	@ (80006a0 <HAL_UART_MspInit+0xa4>)
 8000662:	f000 fab7 	bl	8000bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <HAL_UART_MspInit+0xa4>)
 800067c:	f000 faaa 	bl	8000bd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2025      	movs	r0, #37	@ 0x25
 8000686:	f000 f9bc 	bl	8000a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800068a:	2025      	movs	r0, #37	@ 0x25
 800068c:	f000 f9d5 	bl	8000a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40013800 	.word	0x40013800
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <NMI_Handler+0x4>

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <MemManage_Handler+0x4>

080006bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <UsageFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f4:	f000 f892 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000700:	4802      	ldr	r0, [pc, #8]	@ (800070c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000702:	f000 fd3f 	bl	8001184 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200006dc 	.word	0x200006dc

08000710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000714:	4802      	ldr	r0, [pc, #8]	@ (8000720 <TIM2_IRQHandler+0x10>)
 8000716:	f002 fecf 	bl	80034b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000174 	.word	0x20000174

08000724 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000728:	4802      	ldr	r0, [pc, #8]	@ (8000734 <USART1_IRQHandler+0x10>)
 800072a:	f003 fa71 	bl	8003c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200001bc 	.word	0x200001bc

08000738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000744:	f7ff fff8 	bl	8000738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480b      	ldr	r0, [pc, #44]	@ (8000778 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800074a:	490c      	ldr	r1, [pc, #48]	@ (800077c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <LoopFillZerobss+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000760:	4c09      	ldr	r4, [pc, #36]	@ (8000788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076e:	f008 f8c7 	bl	8008900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff fd1b 	bl	80001ac <main>
  bx lr
 8000776:	4770      	bx	lr
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000780:	080089e0 	.word	0x080089e0
  ldr r2, =_sbss
 8000784:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000788:	200009e0 	.word	0x200009e0

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <HAL_Init+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <HAL_Init+0x28>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f923 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 f808 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff fed0 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <HAL_InitTick+0x54>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_InitTick+0x58>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f93b 	bl	8000a56 <HAL_SYSTICK_Config>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00e      	b.n	8000808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d80a      	bhi.n	8000806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f000 f903 	bl	8000a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007fc:	4a06      	ldr	r2, [pc, #24]	@ (8000818 <HAL_InitTick+0x5c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000000 	.word	0x20000000
 8000814:	20000008 	.word	0x20000008
 8000818:	20000004 	.word	0x20000004

0800081c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_IncTick+0x1c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <HAL_IncTick+0x20>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4413      	add	r3, r2
 800082c:	4a03      	ldr	r2, [pc, #12]	@ (800083c <HAL_IncTick+0x20>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	20000008 	.word	0x20000008
 800083c:	20000210 	.word	0x20000210

08000840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b02      	ldr	r3, [pc, #8]	@ (8000850 <HAL_GetTick+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	20000210 	.word	0x20000210

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4906      	ldr	r1, [pc, #24]	@ (80008ec <__NVIC_EnableIRQ+0x34>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	@ (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	@ (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	@ 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
         );
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	@ 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b8:	d301      	bcc.n	80009be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00f      	b.n	80009de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <SysTick_Config+0x40>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c6:	210f      	movs	r1, #15
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f7ff ff90 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <SysTick_Config+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <SysTick_Config+0x40>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff2d 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff42 	bl	800089c <__NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ff90 	bl	8000944 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff5f 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff35 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffa2 	bl	80009a8 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d008      	beq.n	8000a98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2204      	movs	r2, #4
 8000a8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e020      	b.n	8000ada <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f022 020e 	bic.w	r2, r2, #14
 8000aa6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f022 0201 	bic.w	r2, r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d005      	beq.n	8000b08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2204      	movs	r2, #4
 8000b00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e051      	b.n	8000bac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 020e 	bic.w	r2, r2, #14
 8000b16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0201 	bic.w	r2, r2, #1
 8000b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a22      	ldr	r2, [pc, #136]	@ (8000bb8 <HAL_DMA_Abort_IT+0xd4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d029      	beq.n	8000b86 <HAL_DMA_Abort_IT+0xa2>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <HAL_DMA_Abort_IT+0xd8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d022      	beq.n	8000b82 <HAL_DMA_Abort_IT+0x9e>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc0 <HAL_DMA_Abort_IT+0xdc>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d01a      	beq.n	8000b7c <HAL_DMA_Abort_IT+0x98>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc4 <HAL_DMA_Abort_IT+0xe0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d012      	beq.n	8000b76 <HAL_DMA_Abort_IT+0x92>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <HAL_DMA_Abort_IT+0xe4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d00a      	beq.n	8000b70 <HAL_DMA_Abort_IT+0x8c>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <HAL_DMA_Abort_IT+0xe8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d102      	bne.n	8000b6a <HAL_DMA_Abort_IT+0x86>
 8000b64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b68:	e00e      	b.n	8000b88 <HAL_DMA_Abort_IT+0xa4>
 8000b6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b6e:	e00b      	b.n	8000b88 <HAL_DMA_Abort_IT+0xa4>
 8000b70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b74:	e008      	b.n	8000b88 <HAL_DMA_Abort_IT+0xa4>
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	e005      	b.n	8000b88 <HAL_DMA_Abort_IT+0xa4>
 8000b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b80:	e002      	b.n	8000b88 <HAL_DMA_Abort_IT+0xa4>
 8000b82:	2310      	movs	r3, #16
 8000b84:	e000      	b.n	8000b88 <HAL_DMA_Abort_IT+0xa4>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4a11      	ldr	r2, [pc, #68]	@ (8000bd0 <HAL_DMA_Abort_IT+0xec>)
 8000b8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	4798      	blx	r3
    } 
  }
  return status;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40020008 	.word	0x40020008
 8000bbc:	4002001c 	.word	0x4002001c
 8000bc0:	40020030 	.word	0x40020030
 8000bc4:	40020044 	.word	0x40020044
 8000bc8:	40020058 	.word	0x40020058
 8000bcc:	4002006c 	.word	0x4002006c
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b08b      	sub	sp, #44	@ 0x2c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be6:	e169      	b.n	8000ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be8:	2201      	movs	r2, #1
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 8158 	bne.w	8000eb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a9a      	ldr	r2, [pc, #616]	@ (8000e74 <HAL_GPIO_Init+0x2a0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d05e      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c10:	4a98      	ldr	r2, [pc, #608]	@ (8000e74 <HAL_GPIO_Init+0x2a0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d875      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c16:	4a98      	ldr	r2, [pc, #608]	@ (8000e78 <HAL_GPIO_Init+0x2a4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d058      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c1c:	4a96      	ldr	r2, [pc, #600]	@ (8000e78 <HAL_GPIO_Init+0x2a4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d86f      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c22:	4a96      	ldr	r2, [pc, #600]	@ (8000e7c <HAL_GPIO_Init+0x2a8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d052      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c28:	4a94      	ldr	r2, [pc, #592]	@ (8000e7c <HAL_GPIO_Init+0x2a8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d869      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c2e:	4a94      	ldr	r2, [pc, #592]	@ (8000e80 <HAL_GPIO_Init+0x2ac>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d04c      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c34:	4a92      	ldr	r2, [pc, #584]	@ (8000e80 <HAL_GPIO_Init+0x2ac>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d863      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c3a:	4a92      	ldr	r2, [pc, #584]	@ (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d046      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
 8000c40:	4a90      	ldr	r2, [pc, #576]	@ (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d85d      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c46:	2b12      	cmp	r3, #18
 8000c48:	d82a      	bhi.n	8000ca0 <HAL_GPIO_Init+0xcc>
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d859      	bhi.n	8000d02 <HAL_GPIO_Init+0x12e>
 8000c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c54 <HAL_GPIO_Init+0x80>)
 8000c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c54:	08000ccf 	.word	0x08000ccf
 8000c58:	08000ca9 	.word	0x08000ca9
 8000c5c:	08000cbb 	.word	0x08000cbb
 8000c60:	08000cfd 	.word	0x08000cfd
 8000c64:	08000d03 	.word	0x08000d03
 8000c68:	08000d03 	.word	0x08000d03
 8000c6c:	08000d03 	.word	0x08000d03
 8000c70:	08000d03 	.word	0x08000d03
 8000c74:	08000d03 	.word	0x08000d03
 8000c78:	08000d03 	.word	0x08000d03
 8000c7c:	08000d03 	.word	0x08000d03
 8000c80:	08000d03 	.word	0x08000d03
 8000c84:	08000d03 	.word	0x08000d03
 8000c88:	08000d03 	.word	0x08000d03
 8000c8c:	08000d03 	.word	0x08000d03
 8000c90:	08000d03 	.word	0x08000d03
 8000c94:	08000d03 	.word	0x08000d03
 8000c98:	08000cb1 	.word	0x08000cb1
 8000c9c:	08000cc5 	.word	0x08000cc5
 8000ca0:	4a79      	ldr	r2, [pc, #484]	@ (8000e88 <HAL_GPIO_Init+0x2b4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d013      	beq.n	8000cce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ca6:	e02c      	b.n	8000d02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	623b      	str	r3, [r7, #32]
          break;
 8000cae:	e029      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e024      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	3308      	adds	r3, #8
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e01f      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	330c      	adds	r3, #12
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e01a      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e013      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d105      	bne.n	8000cf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	611a      	str	r2, [r3, #16]
          break;
 8000cee:	e009      	b.n	8000d04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	615a      	str	r2, [r3, #20]
          break;
 8000cfa:	e003      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x130>
          break;
 8000d02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	2bff      	cmp	r3, #255	@ 0xff
 8000d08:	d801      	bhi.n	8000d0e <HAL_GPIO_Init+0x13a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	e001      	b.n	8000d12 <HAL_GPIO_Init+0x13e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3304      	adds	r3, #4
 8000d12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2bff      	cmp	r3, #255	@ 0xff
 8000d18:	d802      	bhi.n	8000d20 <HAL_GPIO_Init+0x14c>
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x152>
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	3b08      	subs	r3, #8
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	401a      	ands	r2, r3
 8000d38:	6a39      	ldr	r1, [r7, #32]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	431a      	orrs	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 80b1 	beq.w	8000eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d54:	4b4d      	ldr	r3, [pc, #308]	@ (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a4c      	ldr	r2, [pc, #304]	@ (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b4a      	ldr	r3, [pc, #296]	@ (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a40      	ldr	r2, [pc, #256]	@ (8000e94 <HAL_GPIO_Init+0x2c0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1ec>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e98 <HAL_GPIO_Init+0x2c4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1e8>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a3e      	ldr	r2, [pc, #248]	@ (8000e9c <HAL_GPIO_Init+0x2c8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1e4>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a3d      	ldr	r2, [pc, #244]	@ (8000ea0 <HAL_GPIO_Init+0x2cc>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1e0>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e006      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e004      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000db8:	2302      	movs	r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <HAL_GPIO_Init+0x1ee>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dc4:	f002 0203 	and.w	r2, r2, #3
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	4093      	lsls	r3, r2
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dd2:	492f      	ldr	r1, [pc, #188]	@ (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	492c      	ldr	r1, [pc, #176]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	608b      	str	r3, [r1, #8]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4928      	ldr	r1, [pc, #160]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	4922      	ldr	r1, [pc, #136]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60cb      	str	r3, [r1, #12]
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e22:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	491e      	ldr	r1, [pc, #120]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4918      	ldr	r1, [pc, #96]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4914      	ldr	r1, [pc, #80]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d021      	beq.n	8000ea8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	490e      	ldr	r1, [pc, #56]	@ (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	600b      	str	r3, [r1, #0]
 8000e70:	e021      	b.n	8000eb6 <HAL_GPIO_Init+0x2e2>
 8000e72:	bf00      	nop
 8000e74:	10320000 	.word	0x10320000
 8000e78:	10310000 	.word	0x10310000
 8000e7c:	10220000 	.word	0x10220000
 8000e80:	10210000 	.word	0x10210000
 8000e84:	10120000 	.word	0x10120000
 8000e88:	10110000 	.word	0x10110000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40010800 	.word	0x40010800
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40011400 	.word	0x40011400
 8000ea4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_GPIO_Init+0x304>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4909      	ldr	r1, [pc, #36]	@ (8000ed8 <HAL_GPIO_Init+0x304>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	3301      	adds	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f47f ae8e 	bne.w	8000be8 <HAL_GPIO_Init+0x14>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	372c      	adds	r7, #44	@ 0x2c
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e001      	b.n	8000efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]
 8000f16:	4613      	mov	r3, r2
 8000f18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1a:	787b      	ldrb	r3, [r7, #1]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f20:	887a      	ldrh	r2, [r7, #2]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f26:	e003      	b.n	8000f30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	041a      	lsls	r2, r3, #16
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	611a      	str	r2, [r3, #16]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3c:	b08b      	sub	sp, #44	@ 0x2c
 8000f3e:	af06      	add	r7, sp, #24
 8000f40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e0f1      	b.n	8001130 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f007 fa3f 	bl	80083e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 fb54 	bl	8004620 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	687e      	ldr	r6, [r7, #4]
 8000f80:	466d      	mov	r5, sp
 8000f82:	f106 0410 	add.w	r4, r6, #16
 8000f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	602b      	str	r3, [r5, #0]
 8000f8e:	1d33      	adds	r3, r6, #4
 8000f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f003 fb1e 	bl	80045d4 <USB_CoreInit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e0c2      	b.n	8001130 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fb4f 	bl	8004654 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e040      	b.n	800103e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	3301      	adds	r3, #1
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3303      	adds	r3, #3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3338      	adds	r3, #56	@ 0x38
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	333c      	adds	r3, #60	@ 0x3c
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	3340      	adds	r3, #64	@ 0x40
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	3301      	adds	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3b9      	bcc.n	8000fbc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e044      	b.n	80010d8 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	440b      	add	r3, r1
 8001088:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	440b      	add	r3, r1
 80010ca:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3301      	adds	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3b5      	bcc.n	800104e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	687e      	ldr	r6, [r7, #4]
 80010ea:	466d      	mov	r5, sp
 80010ec:	f106 0410 	add.w	r4, r6, #16
 80010f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	602b      	str	r3, [r5, #0]
 80010f8:	1d33      	adds	r3, r6, #4
 80010fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f003 fab5 	bl	800466c <USB_DevInit>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e00d      	b.n	8001130 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f005 fd36 	bl	8006b9a <USB_DevDisconnect>

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001138 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_PCD_Start+0x16>
 800114a:	2302      	movs	r3, #2
 800114c:	e016      	b.n	800117c <HAL_PCD_Start+0x44>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fa4a 	bl	80045f4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001160:	2101      	movs	r1, #1
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f007 fb8d 	bl	8008882 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f005 fd0a 	bl	8006b86 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fd0c 	bl	8006bae <USB_ReadInterrupts>
 8001196:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fb04 	bl	80017b0 <PCD_EP_ISR_Handler>

    return;
 80011a8:	e119      	b.n	80013de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011c6:	b292      	uxth	r2, r2
 80011c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f007 f984 	bl	80084da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f905 	bl	80013e4 <HAL_PCD_SetAddress>

    return;
 80011da:	e100      	b.n	80013de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00c      	beq.n	8001200 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011f8:	b292      	uxth	r2, r2
 80011fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011fe:	e0ee      	b.n	80013de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00c      	beq.n	8001224 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800121c:	b292      	uxth	r2, r2
 800121e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001222:	e0dc      	b.n	80013de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d027      	beq.n	800127e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0204 	bic.w	r2, r2, #4
 8001240:	b292      	uxth	r2, r2
 8001242:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800124e:	b29a      	uxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0208 	bic.w	r2, r2, #8
 8001258:	b292      	uxth	r2, r2
 800125a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f007 f974 	bl	800854c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001276:	b292      	uxth	r2, r2
 8001278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800127c:	e0af      	b.n	80013de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8083 	beq.w	8001390 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	77fb      	strb	r3, [r7, #31]
 800128e:	e010      	b.n	80012b2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	7ffb      	ldrb	r3, [r7, #31]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	441a      	add	r2, r3
 800129c:	7ffb      	ldrb	r3, [r7, #31]
 800129e:	8812      	ldrh	r2, [r2, #0]
 80012a0:	b292      	uxth	r2, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	3320      	adds	r3, #32
 80012a6:	443b      	add	r3, r7
 80012a8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80012ac:	7ffb      	ldrb	r3, [r7, #31]
 80012ae:	3301      	adds	r3, #1
 80012b0:	77fb      	strb	r3, [r7, #31]
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	2b07      	cmp	r3, #7
 80012b6:	d9eb      	bls.n	8001290 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	b292      	uxth	r2, r2
 80012cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	b292      	uxth	r2, r2
 80012e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80012e8:	bf00      	nop
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f6      	beq.n	80012ea <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800130e:	b292      	uxth	r2, r2
 8001310:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e00f      	b.n	800133a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	4611      	mov	r1, r2
 8001322:	7ffa      	ldrb	r2, [r7, #31]
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	440a      	add	r2, r1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	3320      	adds	r3, #32
 800132c:	443b      	add	r3, r7
 800132e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001332:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	3301      	adds	r3, #1
 8001338:	77fb      	strb	r3, [r7, #31]
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	2b07      	cmp	r3, #7
 800133e:	d9ec      	bls.n	800131a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001348:	b29a      	uxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	b292      	uxth	r2, r2
 8001354:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800136a:	b292      	uxth	r2, r2
 800136c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	b292      	uxth	r2, r2
 8001384:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f007 f8c5 	bl	8008518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800138e:	e026      	b.n	80013de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00f      	beq.n	80013ba <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013ac:	b292      	uxth	r2, r2
 80013ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f007 f883 	bl	80084be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013b8:	e011      	b.n	80013de <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00c      	beq.n	80013de <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d6:	b292      	uxth	r2, r2
 80013d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013dc:	bf00      	nop
  }
}
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_PCD_SetAddress+0x1a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e013      	b.n	8001426 <HAL_PCD_SetAddress+0x42>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f005 fba2 	bl	8006b60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4603      	mov	r3, r0
 800143e:	70fb      	strb	r3, [r7, #3]
 8001440:	460b      	mov	r3, r1
 8001442:	803b      	strh	r3, [r7, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800144c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001450:	2b00      	cmp	r3, #0
 8001452:	da0e      	bge.n	8001472 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2201      	movs	r2, #1
 800146e:	705a      	strb	r2, [r3, #1]
 8001470:	e00e      	b.n	8001490 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	f003 0207 	and.w	r2, r3, #7
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	b2da      	uxtb	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800149c:	883a      	ldrh	r2, [r7, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	78ba      	ldrb	r2, [r7, #2]
 80014a6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014a8:	78bb      	ldrb	r3, [r7, #2]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d102      	bne.n	80014b4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_PCD_EP_Open+0x94>
 80014be:	2302      	movs	r3, #2
 80014c0:	e00e      	b.n	80014e0 <HAL_PCD_EP_Open+0xb2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 f8eb 	bl	80046ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80014de:	7afb      	ldrb	r3, [r7, #11]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da0e      	bge.n	800151a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2201      	movs	r2, #1
 8001516:	705a      	strb	r2, [r3, #1]
 8001518:	e00e      	b.n	8001538 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	f003 0207 	and.w	r2, r3, #7
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	b2da      	uxtb	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_PCD_EP_Close+0x6a>
 800154e:	2302      	movs	r3, #2
 8001550:	e00e      	b.n	8001570 <HAL_PCD_EP_Close+0x88>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68f9      	ldr	r1, [r7, #12]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fc63 	bl	8004e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	460b      	mov	r3, r1
 8001586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	f003 0207 	and.w	r2, r3, #7
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2200      	movs	r2, #0
 80015b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6979      	ldr	r1, [r7, #20]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fe1a 	bl	8005204 <USB_EPStartXfer>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	460b      	mov	r3, r1
 80015e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2201      	movs	r2, #1
 8001624:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	b2da      	uxtb	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6979      	ldr	r1, [r7, #20]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fde3 	bl	8005204 <USB_EPStartXfer>

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	f003 0207 	and.w	r2, r3, #7
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d901      	bls.n	8001666 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e04c      	b.n	8001700 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0e      	bge.n	800168c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	705a      	strb	r2, [r3, #1]
 800168a:	e00c      	b.n	80016a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2201      	movs	r2, #1
 80016aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_PCD_EP_SetStall+0x7e>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e01c      	b.n	8001700 <HAL_PCD_EP_SetStall+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68f9      	ldr	r1, [r7, #12]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 f946 	bl	8006966 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f005 fa6b 	bl	8006bcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 020f 	and.w	r2, r3, #15
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d901      	bls.n	8001726 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e040      	b.n	80017a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da0e      	bge.n	800174c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	705a      	strb	r2, [r3, #1]
 800174a:	e00e      	b.n	800176a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 0207 	and.w	r2, r3, #7
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	b2da      	uxtb	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_PCD_EP_ClrStall+0x82>
 8001786:	2302      	movs	r3, #2
 8001788:	e00e      	b.n	80017a8 <HAL_PCD_EP_ClrStall+0xa0>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f005 f934 	bl	8006a06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b096      	sub	sp, #88	@ 0x58
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017b8:	e3be      	b.n	8001f38 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80017c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80017d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 8178 	bne.w	8001ace <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d151      	bne.n	800188e <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80017f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017fa:	81fb      	strh	r3, [r7, #14]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	89fb      	ldrh	r3, [r7, #14]
 8001802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800180a:	b29b      	uxth	r3, r3
 800180c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3328      	adds	r3, #40	@ 0x28
 8001812:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800181c:	b29b      	uxth	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	3302      	adds	r3, #2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4413      	add	r3, r2
 8001832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800183c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	441a      	add	r2, r3
 800184a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800184e:	2100      	movs	r1, #0
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f006 fe1a 	bl	800848a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 836a 	beq.w	8001f38 <PCD_EP_ISR_Handler+0x788>
 8001864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f040 8365 	bne.w	8001f38 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800188c:	e354      	b.n	8001f38 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001894:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d034      	beq.n	8001916 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	3306      	adds	r3, #6
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	f005 f9be 	bl	8006c6c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018fc:	4013      	ands	r3, r2
 80018fe:	823b      	strh	r3, [r7, #16]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	8a3a      	ldrh	r2, [r7, #16]
 8001906:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800190a:	b292      	uxth	r2, r2
 800190c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f006 fd8e 	bl	8008430 <HAL_PCD_SetupStageCallback>
 8001914:	e310      	b.n	8001f38 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001916:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800191a:	2b00      	cmp	r3, #0
 800191c:	f280 830c 	bge.w	8001f38 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800192c:	4013      	ands	r3, r2
 800192e:	83fb      	strh	r3, [r7, #30]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	8bfa      	ldrh	r2, [r7, #30]
 8001936:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800193a:	b292      	uxth	r2, r2
 800193c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001946:	b29b      	uxth	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	3306      	adds	r3, #6
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001968:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800196a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d019      	beq.n	80019a6 <PCD_EP_ISR_Handler+0x1f6>
 8001972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d015      	beq.n	80019a6 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001980:	6959      	ldr	r1, [r3, #20]
 8001982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001984:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001988:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800198a:	b29b      	uxth	r3, r3
 800198c:	f005 f96e 	bl	8006c6c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	441a      	add	r2, r3
 800199a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800199e:	2100      	movs	r1, #0
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f006 fd57 	bl	8008454 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 82bd 	bne.w	8001f38 <PCD_EP_ISR_Handler+0x788>
 80019be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80019c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80019ca:	f000 82b5 	beq.w	8001f38 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	4413      	add	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	801a      	strh	r2, [r3, #0]
 80019fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a04:	d91d      	bls.n	8001a42 <PCD_EP_ISR_Handler+0x292>
 8001a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <PCD_EP_ISR_Handler+0x270>
 8001a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	e026      	b.n	8001a90 <PCD_EP_ISR_Handler+0x2e0>
 8001a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10a      	bne.n	8001a60 <PCD_EP_ISR_Handler+0x2b0>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	801a      	strh	r2, [r3, #0]
 8001a5e:	e017      	b.n	8001a90 <PCD_EP_ISR_Handler+0x2e0>
 8001a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <PCD_EP_ISR_Handler+0x2ca>
 8001a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a76:	3301      	adds	r3, #1
 8001a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	029b      	lsls	r3, r3, #10
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001aa0:	827b      	strh	r3, [r7, #18]
 8001aa2:	8a7b      	ldrh	r3, [r7, #18]
 8001aa4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001aa8:	827b      	strh	r3, [r7, #18]
 8001aaa:	8a7b      	ldrh	r3, [r7, #18]
 8001aac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ab0:	827b      	strh	r3, [r7, #18]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	8a7b      	ldrh	r3, [r7, #18]
 8001ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	8013      	strh	r3, [r2, #0]
 8001acc:	e234      	b.n	8001f38 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f280 80fc 	bge.w	8001ce4 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b02:	4013      	ands	r3, r2
 8001b04:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001b1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b22:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d125      	bne.n	8001b8c <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	3306      	adds	r3, #6
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b68:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001b6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8092 	beq.w	8001c9a <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7c:	6959      	ldr	r1, [r3, #20]
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b80:	88da      	ldrh	r2, [r3, #6]
 8001b82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b86:	f005 f871 	bl	8006c6c <USB_ReadPMA>
 8001b8a:	e086      	b.n	8001c9a <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d10a      	bne.n	8001baa <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f9d9 	bl	8001f54 <HAL_PCD_EP_DB_Receive>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001ba8:	e077      	b.n	8001c9a <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bc4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	441a      	add	r2, r3
 8001bd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d024      	beq.n	8001c52 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d02e      	beq.n	8001c9a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c42:	6959      	ldr	r1, [r3, #20]
 8001c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c46:	891a      	ldrh	r2, [r3, #8]
 8001c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c4c:	f005 f80e 	bl	8006c6c <USB_ReadPMA>
 8001c50:	e023      	b.n	8001c9a <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	3306      	adds	r3, #6
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8c:	6959      	ldr	r1, [r3, #20]
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c90:	895a      	ldrh	r2, [r3, #10]
 8001c92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c96:	f004 ffe9 	bl	8006c6c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ca2:	441a      	add	r2, r3
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cb0:	441a      	add	r2, r3
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <PCD_EP_ISR_Handler+0x51a>
 8001cbe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d206      	bcs.n	8001cd8 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f006 fbbf 	bl	8008454 <HAL_PCD_DataOutStageCallback>
 8001cd6:	e005      	b.n	8001ce4 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fa90 	bl	8005204 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ce4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8123 	beq.w	8001f38 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001cf2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	441a      	add	r2, r3
 8001d32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d44:	78db      	ldrb	r3, [r3, #3]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	f040 80a2 	bne.w	8001e90 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d54:	7b1b      	ldrb	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8093 	beq.w	8001e82 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d046      	beq.n	8001df6 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d126      	bne.n	8001dbe <PCD_EP_ISR_Handler+0x60e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	4413      	add	r3, r2
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	011a      	lsls	r2, r3, #4
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	4413      	add	r3, r2
 8001d92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	801a      	strh	r2, [r3, #0]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	801a      	strh	r2, [r3, #0]
 8001dbc:	e061      	b.n	8001e82 <PCD_EP_ISR_Handler+0x6d2>
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	785b      	ldrb	r3, [r3, #1]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d15d      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x6d2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dda:	4413      	add	r3, r2
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	011a      	lsls	r2, r3, #4
 8001de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de6:	4413      	add	r3, r2
 8001de8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df0:	2200      	movs	r2, #0
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	e045      	b.n	8001e82 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d126      	bne.n	8001e52 <PCD_EP_ISR_Handler+0x6a2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e18:	4413      	add	r3, r2
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	011a      	lsls	r2, r3, #4
 8001e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e24:	4413      	add	r3, r2
 8001e26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4e:	801a      	strh	r2, [r3, #0]
 8001e50:	e017      	b.n	8001e82 <PCD_EP_ISR_Handler+0x6d2>
 8001e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e54:	785b      	ldrb	r3, [r3, #1]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d113      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x6d2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e68:	4413      	add	r3, r2
 8001e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	011a      	lsls	r2, r3, #4
 8001e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e74:	4413      	add	r3, r2
 8001e76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7e:	2200      	movs	r2, #0
 8001e80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f006 fafe 	bl	800848a <HAL_PCD_DataInStageCallback>
 8001e8e:	e053      	b.n	8001f38 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d146      	bne.n	8001f2a <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d907      	bls.n	8001ee4 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001edc:	1ad2      	subs	r2, r2, r3
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	619a      	str	r2, [r3, #24]
 8001ee2:	e002      	b.n	8001eea <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f006 fac6 	bl	800848a <HAL_PCD_DataInStageCallback>
 8001efe:	e01b      	b.n	8001f38 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f08:	441a      	add	r2, r3
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f16:	441a      	add	r2, r3
 8001f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f96e 	bl	8005204 <USB_EPStartXfer>
 8001f28:	e006      	b.n	8001f38 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f91b 	bl	800216e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f6ff ac38 	blt.w	80017ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3758      	adds	r7, #88	@ 0x58
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d07e      	beq.n	800206a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	3302      	adds	r3, #2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	8b7b      	ldrh	r3, [r7, #26]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d306      	bcc.n	8001fae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	8b7b      	ldrh	r3, [r7, #26]
 8001fa6:	1ad2      	subs	r2, r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	619a      	str	r2, [r3, #24]
 8001fac:	e002      	b.n	8001fb4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d123      	bne.n	8002004 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd6:	833b      	strh	r3, [r7, #24]
 8001fd8:	8b3b      	ldrh	r3, [r7, #24]
 8001fda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fde:	833b      	strh	r3, [r7, #24]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	441a      	add	r2, r3
 8001fee:	8b3b      	ldrh	r3, [r7, #24]
 8001ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002000:	b29b      	uxth	r3, r3
 8002002:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01f      	beq.n	800204e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002028:	82fb      	strh	r3, [r7, #22]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	441a      	add	r2, r3
 8002038:	8afb      	ldrh	r3, [r7, #22]
 800203a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800203e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002046:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800204a:	b29b      	uxth	r3, r3
 800204c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800204e:	8b7b      	ldrh	r3, [r7, #26]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8087 	beq.w	8002164 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6959      	ldr	r1, [r3, #20]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	891a      	ldrh	r2, [r3, #8]
 8002062:	8b7b      	ldrh	r3, [r7, #26]
 8002064:	f004 fe02 	bl	8006c6c <USB_ReadPMA>
 8002068:	e07c      	b.n	8002164 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	3306      	adds	r3, #6
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002092:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	8b7b      	ldrh	r3, [r7, #26]
 800209a:	429a      	cmp	r2, r3
 800209c:	d306      	bcc.n	80020ac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	8b7b      	ldrh	r3, [r7, #26]
 80020a4:	1ad2      	subs	r2, r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	619a      	str	r2, [r3, #24]
 80020aa:	e002      	b.n	80020b2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d123      	bne.n	8002102 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d4:	83fb      	strh	r3, [r7, #30]
 80020d6:	8bfb      	ldrh	r3, [r7, #30]
 80020d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020dc:	83fb      	strh	r3, [r7, #30]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	441a      	add	r2, r3
 80020ec:	8bfb      	ldrh	r3, [r7, #30]
 80020ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020fe:	b29b      	uxth	r3, r3
 8002100:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11f      	bne.n	800214c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002126:	83bb      	strh	r3, [r7, #28]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	441a      	add	r2, r3
 8002136:	8bbb      	ldrh	r3, [r7, #28]
 8002138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800213c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002144:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002148:	b29b      	uxth	r3, r3
 800214a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800214c:	8b7b      	ldrh	r3, [r7, #26]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6959      	ldr	r1, [r3, #20]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	895a      	ldrh	r2, [r3, #10]
 800215e:	8b7b      	ldrh	r3, [r7, #26]
 8002160:	f004 fd84 	bl	8006c6c <USB_ReadPMA>
    }
  }

  return count;
 8002164:	8b7b      	ldrh	r3, [r7, #26]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b0a4      	sub	sp, #144	@ 0x90
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	4613      	mov	r3, r2
 800217a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 81dd 	beq.w	8002542 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	3302      	adds	r3, #2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021bc:	429a      	cmp	r2, r3
 80021be:	d907      	bls.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021c8:	1ad2      	subs	r2, r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	619a      	str	r2, [r3, #24]
 80021ce:	e002      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 80b9 	bne.w	8002352 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d126      	bne.n	8002236 <HAL_PCD_EP_DB_Transmit+0xc8>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	4413      	add	r3, r2
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	011a      	lsls	r2, r3, #4
 8002206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002208:	4413      	add	r3, r2
 800220a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221a:	b29a      	uxth	r2, r3
 800221c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221e:	801a      	strh	r2, [r3, #0]
 8002220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222e:	b29a      	uxth	r2, r3
 8002230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	e01a      	b.n	800226c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d116      	bne.n	800226c <HAL_PCD_EP_DB_Transmit+0xfe>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002252:	4413      	add	r3, r2
 8002254:	637b      	str	r3, [r7, #52]	@ 0x34
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	011a      	lsls	r2, r3, #4
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	4413      	add	r3, r2
 8002260:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002264:	633b      	str	r3, [r7, #48]	@ 0x30
 8002266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002268:	2200      	movs	r2, #0
 800226a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d126      	bne.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002288:	b29b      	uxth	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	011a      	lsls	r2, r3, #4
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	e017      	b.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	785b      	ldrb	r3, [r3, #1]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d113      	bne.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	4413      	add	r3, r2
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	011a      	lsls	r2, r3, #4
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	4413      	add	r3, r2
 80022ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022f0:	623b      	str	r3, [r7, #32]
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	2200      	movs	r2, #0
 80022f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f006 f8c3 	bl	800848a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 82fc 	beq.w	8002908 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232a:	82fb      	strh	r3, [r7, #22]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	441a      	add	r2, r3
 800233a:	8afb      	ldrh	r3, [r7, #22]
 800233c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800234c:	b29b      	uxth	r3, r3
 800234e:	8013      	strh	r3, [r2, #0]
 8002350:	e2da      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d021      	beq.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002376:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	441a      	add	r2, r3
 8002388:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800238c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002394:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800239c:	b29b      	uxth	r3, r3
 800239e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 82ae 	bne.w	8002908 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023b4:	441a      	add	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023c2:	441a      	add	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d30b      	bcc.n	80023ec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	6a1a      	ldr	r2, [r3, #32]
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023e4:	1ad2      	subs	r2, r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	621a      	str	r2, [r3, #32]
 80023ea:	e017      	b.n	800241c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002404:	e00a      	b.n	800241c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d165      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002438:	4413      	add	r3, r2
 800243a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	011a      	lsls	r2, r3, #4
 8002442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002444:	4413      	add	r3, r2
 8002446:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002456:	b29a      	uxth	r2, r3
 8002458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245a:	801a      	strh	r2, [r3, #0]
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002460:	2b3e      	cmp	r3, #62	@ 0x3e
 8002462:	d91d      	bls.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x332>
 8002464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <HAL_PCD_EP_DB_Transmit+0x310>
 8002478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247a:	3b01      	subs	r3, #1
 800247c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29a      	uxth	r2, r3
 8002484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002486:	b29b      	uxth	r3, r3
 8002488:	029b      	lsls	r3, r3, #10
 800248a:	b29b      	uxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002498:	b29a      	uxth	r2, r3
 800249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	e044      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x350>
 80024a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	e035      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80024d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024d4:	3301      	adds	r3, #1
 80024d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e01c      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d118      	bne.n	800252a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800250c:	4413      	add	r3, r2
 800250e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	011a      	lsls	r2, r3, #4
 8002516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002518:	4413      	add	r3, r2
 800251a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800251e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002520:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002524:	b29a      	uxth	r2, r3
 8002526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002528:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	6959      	ldr	r1, [r3, #20]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	891a      	ldrh	r2, [r3, #8]
 8002536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800253a:	b29b      	uxth	r3, r3
 800253c:	f004 fb51 	bl	8006be2 <USB_WritePMA>
 8002540:	e1e2      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	3306      	adds	r3, #6
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002576:	429a      	cmp	r2, r3
 8002578:	d307      	bcc.n	800258a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002582:	1ad2      	subs	r2, r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	619a      	str	r2, [r3, #24]
 8002588:	e002      	b.n	8002590 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 80c0 	bne.w	800271a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d126      	bne.n	80025f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025b6:	4413      	add	r3, r2
 80025b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	011a      	lsls	r2, r3, #4
 80025c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025c2:	4413      	add	r3, r2
 80025c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	e01a      	b.n	8002626 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d116      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260c:	4413      	add	r3, r2
 800260e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	011a      	lsls	r2, r3, #4
 8002616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002618:	4413      	add	r3, r2
 800261a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800261e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002620:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	677b      	str	r3, [r7, #116]	@ 0x74
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	785b      	ldrb	r3, [r3, #1]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d12b      	bne.n	800268c <HAL_PCD_EP_DB_Transmit+0x51e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002648:	4413      	add	r3, r2
 800264a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	011a      	lsls	r2, r3, #4
 8002652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002654:	4413      	add	r3, r2
 8002656:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800265a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800265e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800267e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002682:	b29a      	uxth	r2, r3
 8002684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	e017      	b.n	80026bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	785b      	ldrb	r3, [r3, #1]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d113      	bne.n	80026bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800269c:	b29b      	uxth	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a2:	4413      	add	r3, r2
 80026a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	011a      	lsls	r2, r3, #4
 80026ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ae:	4413      	add	r3, r2
 80026b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80026b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026b8:	2200      	movs	r2, #0
 80026ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f005 fee1 	bl	800848a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 811a 	bne.w	8002908 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	441a      	add	r2, r3
 8002700:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800270c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002714:	b29b      	uxth	r3, r3
 8002716:	8013      	strh	r3, [r2, #0]
 8002718:	e0f6      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d121      	bne.n	8002768 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	441a      	add	r2, r3
 8002750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800275c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002764:	b29b      	uxth	r3, r3
 8002766:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800276e:	2b01      	cmp	r3, #1
 8002770:	f040 80ca 	bne.w	8002908 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800277c:	441a      	add	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800278a:	441a      	add	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d30b      	bcc.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6a1a      	ldr	r2, [r3, #32]
 80027a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ac:	1ad2      	subs	r2, r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	621a      	str	r2, [r3, #32]
 80027b2:	e017      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d108      	bne.n	80027ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80027bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80027cc:	e00a      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d165      	bne.n	80028be <HAL_PCD_EP_DB_Transmit+0x750>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002800:	b29b      	uxth	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002806:	4413      	add	r3, r2
 8002808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	011a      	lsls	r2, r3, #4
 8002810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002812:	4413      	add	r3, r2
 8002814:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002818:	65bb      	str	r3, [r7, #88]	@ 0x58
 800281a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002824:	b29a      	uxth	r2, r3
 8002826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800282e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002830:	d91d      	bls.n	800286e <HAL_PCD_EP_DB_Transmit+0x700>
 8002832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800283a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_PCD_EP_DB_Transmit+0x6de>
 8002846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002848:	3b01      	subs	r3, #1
 800284a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800284c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29a      	uxth	r2, r3
 8002852:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002854:	b29b      	uxth	r3, r3
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	b29b      	uxth	r3, r3
 800285a:	4313      	orrs	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002866:	b29a      	uxth	r2, r3
 8002868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	e041      	b.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800286e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_PCD_EP_DB_Transmit+0x71e>
 8002876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002884:	b29a      	uxth	r2, r3
 8002886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e032      	b.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800288c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x738>
 80028a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028a2:	3301      	adds	r3, #1
 80028a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	029b      	lsls	r3, r3, #10
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ba:	801a      	strh	r2, [r3, #0]
 80028bc:	e019      	b.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d115      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d4:	4413      	add	r3, r2
 80028d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	011a      	lsls	r2, r3, #4
 80028de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e0:	4413      	add	r3, r2
 80028e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80028e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	6959      	ldr	r1, [r3, #20]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	895a      	ldrh	r2, [r3, #10]
 80028fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002902:	b29b      	uxth	r3, r3
 8002904:	f004 f96d 	bl	8006be2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800291e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002922:	82bb      	strh	r3, [r7, #20]
 8002924:	8abb      	ldrh	r3, [r7, #20]
 8002926:	f083 0310 	eor.w	r3, r3, #16
 800292a:	82bb      	strh	r3, [r7, #20]
 800292c:	8abb      	ldrh	r3, [r7, #20]
 800292e:	f083 0320 	eor.w	r3, r3, #32
 8002932:	82bb      	strh	r3, [r7, #20]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	8abb      	ldrh	r3, [r7, #20]
 8002944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800294c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002954:	b29b      	uxth	r3, r3
 8002956:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3790      	adds	r7, #144	@ 0x90
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002962:	b480      	push	{r7}
 8002964:	b087      	sub	sp, #28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002974:	897b      	ldrh	r3, [r7, #10]
 8002976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e009      	b.n	80029ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002998:	897a      	ldrh	r2, [r7, #10]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	80da      	strh	r2, [r3, #6]
 80029c0:	e00b      	b.n	80029da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2201      	movs	r2, #1
 80029c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e272      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8087 	beq.w	8002b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a08:	4b92      	ldr	r3, [pc, #584]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d00c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a14:	4b8f      	ldr	r3, [pc, #572]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d112      	bne.n	8002a46 <HAL_RCC_OscConfig+0x5e>
 8002a20:	4b8c      	ldr	r3, [pc, #560]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2c:	d10b      	bne.n	8002a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2e:	4b89      	ldr	r3, [pc, #548]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d06c      	beq.n	8002b14 <HAL_RCC_OscConfig+0x12c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d168      	bne.n	8002b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e24c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x76>
 8002a50:	4b80      	ldr	r3, [pc, #512]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a7f      	ldr	r2, [pc, #508]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e02e      	b.n	8002abc <HAL_RCC_OscConfig+0xd4>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x98>
 8002a66:	4b7b      	ldr	r3, [pc, #492]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7a      	ldr	r2, [pc, #488]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b78      	ldr	r3, [pc, #480]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a77      	ldr	r2, [pc, #476]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e01d      	b.n	8002abc <HAL_RCC_OscConfig+0xd4>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xbc>
 8002a8a:	4b72      	ldr	r3, [pc, #456]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a71      	ldr	r2, [pc, #452]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b6f      	ldr	r3, [pc, #444]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0xd4>
 8002aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b68      	ldr	r3, [pc, #416]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a67      	ldr	r2, [pc, #412]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fd febc 	bl	8000840 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fd feb8 	bl	8000840 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e200      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b5d      	ldr	r3, [pc, #372]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0xe4>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fd fea8 	bl	8000840 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fd fea4 	bl	8000840 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	@ 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1ec      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	4b53      	ldr	r3, [pc, #332]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x10c>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d063      	beq.n	8002bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b22:	4b4c      	ldr	r3, [pc, #304]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b2e:	4b49      	ldr	r3, [pc, #292]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x18c>
 8002b3a:	4b46      	ldr	r3, [pc, #280]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	4b43      	ldr	r3, [pc, #268]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x176>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1c0      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4939      	ldr	r1, [pc, #228]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	e03a      	b.n	8002bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fd fe5d 	bl	8000840 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fd fe59 	bl	8000840 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1a1      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4927      	ldr	r1, [pc, #156]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fd fe3c 	bl	8000840 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fd fe38 	bl	8000840 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e180      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d03a      	beq.n	8002c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b17      	ldr	r3, [pc, #92]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fd fe1c 	bl	8000840 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fd fe18 	bl	8000840 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e160      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f000 face 	bl	80031cc <RCC_Delay>
 8002c30:	e01c      	b.n	8002c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fd fe02 	bl	8000840 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3e:	e00f      	b.n	8002c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c40:	f7fd fdfe 	bl	8000840 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d908      	bls.n	8002c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e146      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	42420000 	.word	0x42420000
 8002c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	4b92      	ldr	r3, [pc, #584]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1e9      	bne.n	8002c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a6 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10d      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b88      	ldr	r3, [pc, #544]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4a87      	ldr	r2, [pc, #540]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	61d3      	str	r3, [r2, #28]
 8002c96:	4b85      	ldr	r3, [pc, #532]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b82      	ldr	r3, [pc, #520]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d118      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c8>)
 8002cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbe:	f7fd fdbf 	bl	8000840 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc6:	f7fd fdbb 	bl	8000840 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b64      	cmp	r3, #100	@ 0x64
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e103      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd8:	4b75      	ldr	r3, [pc, #468]	@ (8002eb0 <HAL_RCC_OscConfig+0x4c8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x312>
 8002cec:	4b6f      	ldr	r3, [pc, #444]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	e02d      	b.n	8002d56 <HAL_RCC_OscConfig+0x36e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x334>
 8002d02:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a69      	ldr	r2, [pc, #420]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	4b67      	ldr	r3, [pc, #412]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4a66      	ldr	r2, [pc, #408]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6213      	str	r3, [r2, #32]
 8002d1a:	e01c      	b.n	8002d56 <HAL_RCC_OscConfig+0x36e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d10c      	bne.n	8002d3e <HAL_RCC_OscConfig+0x356>
 8002d24:	4b61      	ldr	r3, [pc, #388]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4a60      	ldr	r2, [pc, #384]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6213      	str	r3, [r2, #32]
 8002d30:	4b5e      	ldr	r3, [pc, #376]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	e00b      	b.n	8002d56 <HAL_RCC_OscConfig+0x36e>
 8002d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a5a      	ldr	r2, [pc, #360]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b58      	ldr	r3, [pc, #352]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a57      	ldr	r2, [pc, #348]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d015      	beq.n	8002d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fd fd6f 	bl	8000840 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fd fd6b 	bl	8000840 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0b1      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ee      	beq.n	8002d66 <HAL_RCC_OscConfig+0x37e>
 8002d88:	e014      	b.n	8002db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fd fd59 	bl	8000840 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fd fd55 	bl	8000840 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e09b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da8:	4b40      	ldr	r3, [pc, #256]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ee      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b3c      	ldr	r3, [pc, #240]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8087 	beq.w	8002ede <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd0:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d061      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d146      	bne.n	8002e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b33      	ldr	r3, [pc, #204]	@ (8002eb4 <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fd fd29 	bl	8000840 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fd fd25 	bl	8000840 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e06d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e04:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e18:	d108      	bne.n	8002e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	4921      	ldr	r1, [pc, #132]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a19      	ldr	r1, [r3, #32]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	491b      	ldr	r1, [pc, #108]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e44:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fd fcf9 	bl	8000840 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e52:	f7fd fcf5 	bl	8000840 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e03d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x46a>
 8002e70:	e035      	b.n	8002ede <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fd fce2 	bl	8000840 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fd fcde 	bl	8000840 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e026      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x498>
 8002e9e:	e01e      	b.n	8002ede <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e019      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCC_OscConfig+0x500>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0d0      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b6a      	ldr	r3, [pc, #424]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d910      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b67      	ldr	r3, [pc, #412]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 0207 	bic.w	r2, r3, #7
 8002f16:	4965      	ldr	r1, [pc, #404]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a52      	ldr	r2, [pc, #328]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d040      	beq.n	800300c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d115      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	4b41      	ldr	r3, [pc, #260]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e073      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fba:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fca:	4b39      	ldr	r3, [pc, #228]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f023 0203 	bic.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4936      	ldr	r1, [pc, #216]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fdc:	f7fd fc30 	bl	8000840 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe4:	f7fd fc2c 	bl	8000840 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e053      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 020c 	and.w	r2, r3, #12
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	429a      	cmp	r2, r3
 800300a:	d1eb      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800300c:	4b27      	ldr	r3, [pc, #156]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d210      	bcs.n	800303c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0207 	bic.w	r2, r3, #7
 8003022:	4922      	ldr	r1, [pc, #136]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003066:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f821 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	@ (80030b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_RCC_ClockConfig+0x1d0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fb8e 	bl	80007bc <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40021000 	.word	0x40021000
 80030b4:	080089ac 	.word	0x080089ac
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030da:	4b1e      	ldr	r3, [pc, #120]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x94>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d002      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x30>
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d003      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0x36>
 80030ee:	e027      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f0:	4b19      	ldr	r3, [pc, #100]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x98>)
 80030f2:	613b      	str	r3, [r7, #16]
      break;
 80030f4:	e027      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	0c9b      	lsrs	r3, r3, #18
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	4a17      	ldr	r2, [pc, #92]	@ (800315c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x94>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	0c5b      	lsrs	r3, r3, #17
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	4a11      	ldr	r2, [pc, #68]	@ (8003160 <HAL_RCC_GetSysClockFreq+0xa0>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a0d      	ldr	r2, [pc, #52]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x98>)
 8003122:	fb03 f202 	mul.w	r2, r3, r2
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e004      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0c      	ldr	r2, [pc, #48]	@ (8003164 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	613b      	str	r3, [r7, #16]
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x98>)
 8003142:	613b      	str	r3, [r7, #16]
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	693b      	ldr	r3, [r7, #16]
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	007a1200 	.word	0x007a1200
 800315c:	080089c4 	.word	0x080089c4
 8003160:	080089d4 	.word	0x080089d4
 8003164:	003d0900 	.word	0x003d0900

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b02      	ldr	r3, [pc, #8]	@ (8003178 <HAL_RCC_GetHCLKFreq+0x10>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000000 	.word	0x20000000

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003180:	f7ff fff2 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	@ (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	080089bc 	.word	0x080089bc

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a8:	f7ff ffde 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0adb      	lsrs	r3, r3, #11
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	@ (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080089bc 	.word	0x080089bc

080031cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <RCC_Delay+0x34>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <RCC_Delay+0x38>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0a5b      	lsrs	r3, r3, #9
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e8:	bf00      	nop
  }
  while (Delay --);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	60fa      	str	r2, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <RCC_Delay+0x1c>
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	20000000 	.word	0x20000000
 8003204:	10624dd3 	.word	0x10624dd3

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d07d      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003228:	4b4f      	ldr	r3, [pc, #316]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003234:	4b4c      	ldr	r3, [pc, #304]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323e:	61d3      	str	r3, [r2, #28]
 8003240:	4b49      	ldr	r3, [pc, #292]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b46      	ldr	r3, [pc, #280]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d118      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325c:	4b43      	ldr	r3, [pc, #268]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a42      	ldr	r2, [pc, #264]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003268:	f7fd faea 	bl	8000840 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	e008      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003270:	f7fd fae6 	bl	8000840 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e06d      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b3a      	ldr	r3, [pc, #232]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800328e:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003296:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d02e      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d027      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032c2:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd fab5 	bl	8000840 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd fab1 	bl	8000840 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e036      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4917      	ldr	r1, [pc, #92]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	4313      	orrs	r3, r2
 800330c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	4a13      	ldr	r2, [pc, #76]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800331e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	490b      	ldr	r1, [pc, #44]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334a:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4904      	ldr	r1, [pc, #16]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	42420440 	.word	0x42420440

08003374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e041      	b.n	800340a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd f90a 	bl	80005b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f000 fa74 	bl	80038a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e03a      	b.n	80034a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <HAL_TIM_Base_Start_IT+0x98>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x58>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003456:	d009      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x58>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a14      	ldr	r2, [pc, #80]	@ (80034b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x58>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a13      	ldr	r2, [pc, #76]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d010      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	e007      	b.n	80034a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800

080034b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0202 	mvn.w	r2, #2
 80034e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9b4 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9a7 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f9b6 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0204 	mvn.w	r2, #4
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f98a 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f97d 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f98c 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0208 	mvn.w	r2, #8
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2204      	movs	r2, #4
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f960 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f953 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f962 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0210 	mvn.w	r2, #16
 80035e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2208      	movs	r2, #8
 80035e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f936 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f929 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f938 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0201 	mvn.w	r2, #1
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fc ff5a 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b80      	cmp	r3, #128	@ 0x80
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003654:	2b80      	cmp	r3, #128	@ 0x80
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa7b 	bl	8003b5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d10e      	bne.n	8003694 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003680:	2b40      	cmp	r3, #64	@ 0x40
 8003682:	d107      	bne.n	8003694 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800368c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8fc 	bl	800388c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d10e      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d107      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0220 	mvn.w	r2, #32
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa46 	bl	8003b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_ConfigClockSource+0x1c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e0b4      	b.n	800384e <HAL_TIM_ConfigClockSource+0x186>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800370a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371c:	d03e      	beq.n	800379c <HAL_TIM_ConfigClockSource+0xd4>
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003722:	f200 8087 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	f000 8086 	beq.w	800383a <HAL_TIM_ConfigClockSource+0x172>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	d87f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b70      	cmp	r3, #112	@ 0x70
 8003736:	d01a      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xa6>
 8003738:	2b70      	cmp	r3, #112	@ 0x70
 800373a:	d87b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b60      	cmp	r3, #96	@ 0x60
 800373e:	d050      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d877      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b50      	cmp	r3, #80	@ 0x50
 8003746:	d03c      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d873      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d058      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x13a>
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d86f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d064      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d86b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d060      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d867      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05c      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	2b10      	cmp	r3, #16
 800376a:	d05a      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	e062      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800377e:	f000 f968 	bl	8003a52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	609a      	str	r2, [r3, #8]
      break;
 800379a:	e04f      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ac:	f000 f951 	bl	8003a52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037be:	609a      	str	r2, [r3, #8]
      break;
 80037c0:	e03c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 f8c8 	bl	8003964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2150      	movs	r1, #80	@ 0x50
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f91f 	bl	8003a1e <TIM_ITRx_SetConfig>
      break;
 80037e0:	e02c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 f8e6 	bl	80039c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2160      	movs	r1, #96	@ 0x60
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f90f 	bl	8003a1e <TIM_ITRx_SetConfig>
      break;
 8003800:	e01c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	461a      	mov	r2, r3
 8003810:	f000 f8a8 	bl	8003964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2140      	movs	r1, #64	@ 0x40
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f8ff 	bl	8003a1e <TIM_ITRx_SetConfig>
      break;
 8003820:	e00c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f000 f8f6 	bl	8003a1e <TIM_ITRx_SetConfig>
      break;
 8003832:	e003      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e000      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
	...

080038a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a29      	ldr	r2, [pc, #164]	@ (8003958 <TIM_Base_SetConfig+0xb8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a26      	ldr	r2, [pc, #152]	@ (800395c <TIM_Base_SetConfig+0xbc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a25      	ldr	r2, [pc, #148]	@ (8003960 <TIM_Base_SetConfig+0xc0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <TIM_Base_SetConfig+0xb8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a19      	ldr	r2, [pc, #100]	@ (800395c <TIM_Base_SetConfig+0xbc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <TIM_Base_SetConfig+0xc0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a07      	ldr	r2, [pc, #28]	@ (8003958 <TIM_Base_SetConfig+0xb8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800

08003964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0201 	bic.w	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 030a 	bic.w	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0210 	bic.w	r2, r3, #16
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	031b      	lsls	r3, r3, #12
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f043 0307 	orr.w	r3, r3, #7
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e046      	b.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a16      	ldr	r2, [pc, #88]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af4:	d009      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a12      	ldr	r2, [pc, #72]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a10      	ldr	r2, [pc, #64]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10c      	bne.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800

08003b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e042      	b.n	8003c08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fc fd30 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	@ 0x24
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fc7f 	bl	80044b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0ba      	sub	sp, #232	@ 0xe8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_UART_IRQHandler+0x66>
 8003c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fb63 	bl	800433a <UART_Receive_IT>
      return;
 8003c74:	e25b      	b.n	800412e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80de 	beq.w	8003e3c <HAL_UART_IRQHandler+0x22c>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80d1 	beq.w	8003e3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_UART_IRQHandler+0xae>
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xd2>
 8003cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_UART_IRQHandler+0xf6>
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d011      	beq.n	8003d36 <HAL_UART_IRQHandler+0x126>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f043 0208 	orr.w	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 81f2 	beq.w	8004124 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_UART_IRQHandler+0x14e>
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 faee 	bl	800433a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_UART_IRQHandler+0x17a>
 8003d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d04f      	beq.n	8003e2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9f8 	bl	8004180 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d041      	beq.n	8003e22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1d9      	bne.n	8003d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d013      	beq.n	8003e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ff0 <HAL_UART_IRQHandler+0x3e0>)
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fe70 	bl	8000ae4 <HAL_DMA_Abort_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e14:	4610      	mov	r0, r2
 8003e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e00e      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f99c 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e00a      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f998 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e006      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f994 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e36:	e175      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	bf00      	nop
    return;
 8003e3a:	e173      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f040 814f 	bne.w	80040e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8148 	beq.w	80040e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8141 	beq.w	80040e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80b6 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8145 	beq.w	8004128 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f080 813e 	bcs.w	8004128 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	f000 8088 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ede:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003eec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ef8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1d9      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e1      	bne.n	8003f0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3314      	adds	r3, #20
 8003f68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e3      	bne.n	8003f48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa0:	f023 0310 	bic.w	r3, r3, #16
 8003fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fb4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e3      	bne.n	8003f8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc fd4f 	bl	8000a6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8bf 	bl	800416a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fec:	e09c      	b.n	8004128 <HAL_UART_IRQHandler+0x518>
 8003fee:	bf00      	nop
 8003ff0:	08004245 	.word	0x08004245
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 808e 	beq.w	800412c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8089 	beq.w	800412c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800402a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004030:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800403e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800404c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e3      	bne.n	800401a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3314      	adds	r3, #20
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	623b      	str	r3, [r7, #32]
   return(result);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3314      	adds	r3, #20
 8004072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004076:	633a      	str	r2, [r7, #48]	@ 0x30
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800407c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e3      	bne.n	8004052 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0310 	bic.w	r3, r3, #16
 80040ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040bc:	61fa      	str	r2, [r7, #28]
 80040be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	69b9      	ldr	r1, [r7, #24]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e3      	bne.n	8004098 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f844 	bl	800416a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040e2:	e023      	b.n	800412c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_UART_IRQHandler+0x4f4>
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8b5 	bl	800426c <UART_Transmit_IT>
    return;
 8004102:	e014      	b.n	800412e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00e      	beq.n	800412e <HAL_UART_IRQHandler+0x51e>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8f4 	bl	800430a <UART_EndTransmit_IT>
    return;
 8004122:	e004      	b.n	800412e <HAL_UART_IRQHandler+0x51e>
    return;
 8004124:	bf00      	nop
 8004126:	e002      	b.n	800412e <HAL_UART_IRQHandler+0x51e>
      return;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <HAL_UART_IRQHandler+0x51e>
      return;
 800412c:	bf00      	nop
  }
}
 800412e:	37e8      	adds	r7, #232	@ 0xe8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b095      	sub	sp, #84	@ 0x54
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800419e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e5      	bne.n	8004188 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d119      	bne.n	800422c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	60bb      	str	r3, [r7, #8]
   return(result);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0310 	bic.w	r3, r3, #16
 800420e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004218:	61ba      	str	r2, [r7, #24]
 800421a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	613b      	str	r3, [r7, #16]
   return(result);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800423a:	bf00      	nop
 800423c:	3754      	adds	r7, #84	@ 0x54
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff7a 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b21      	cmp	r3, #33	@ 0x21
 800427e:	d13e      	bne.n	80042fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004288:	d114      	bne.n	80042b4 <UART_Transmit_IT+0x48>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d110      	bne.n	80042b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	1c9a      	adds	r2, r3, #2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]
 80042b2:	e008      	b.n	80042c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1c59      	adds	r1, r3, #1
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6211      	str	r1, [r2, #32]
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4619      	mov	r1, r3
 80042d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff ff02 	bl	8004134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b08c      	sub	sp, #48	@ 0x30
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b22      	cmp	r3, #34	@ 0x22
 800434c:	f040 80ae 	bne.w	80044ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004358:	d117      	bne.n	800438a <UART_Receive_IT+0x50>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d113      	bne.n	800438a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004378:	b29a      	uxth	r2, r3
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	@ 0x28
 8004388:	e026      	b.n	80043d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439c:	d007      	beq.n	80043ae <UART_Receive_IT+0x74>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <UART_Receive_IT+0x82>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e008      	b.n	80043ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4619      	mov	r1, r3
 80043e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d15d      	bne.n	80044a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0220 	bic.w	r2, r2, #32
 80043fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800440a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	2b01      	cmp	r3, #1
 8004430:	d135      	bne.n	800449e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	613b      	str	r3, [r7, #16]
   return(result);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 0310 	bic.w	r3, r3, #16
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004458:	623a      	str	r2, [r7, #32]
 800445a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	61bb      	str	r3, [r7, #24]
   return(result);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b10      	cmp	r3, #16
 8004478:	d10a      	bne.n	8004490 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fe67 	bl	800416a <HAL_UARTEx_RxEventCallback>
 800449c:	e002      	b.n	80044a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fe51 	bl	8004146 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e002      	b.n	80044ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e000      	b.n	80044ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3730      	adds	r7, #48	@ 0x30
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044f2:	f023 030c 	bic.w	r3, r3, #12
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2c      	ldr	r2, [pc, #176]	@ (80045cc <UART_SetConfig+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fe40 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	e002      	b.n	800452e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fe fe28 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 800452c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	4a22      	ldr	r2, [pc, #136]	@ (80045d0 <UART_SetConfig+0x118>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	0119      	lsls	r1, r3, #4
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009a      	lsls	r2, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fbb2 f2f3 	udiv	r2, r2, r3
 8004564:	4b1a      	ldr	r3, [pc, #104]	@ (80045d0 <UART_SetConfig+0x118>)
 8004566:	fba3 0302 	umull	r0, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2064      	movs	r0, #100	@ 0x64
 800456e:	fb00 f303 	mul.w	r3, r0, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	3332      	adds	r3, #50	@ 0x32
 8004578:	4a15      	ldr	r2, [pc, #84]	@ (80045d0 <UART_SetConfig+0x118>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004584:	4419      	add	r1, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fbb2 f2f3 	udiv	r2, r2, r3
 800459c:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <UART_SetConfig+0x118>)
 800459e:	fba3 0302 	umull	r0, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2064      	movs	r0, #100	@ 0x64
 80045a6:	fb00 f303 	mul.w	r3, r0, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	3332      	adds	r3, #50	@ 0x32
 80045b0:	4a07      	ldr	r2, [pc, #28]	@ (80045d0 <UART_SetConfig+0x118>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	440a      	add	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40013800 	.word	0x40013800
 80045d0:	51eb851f 	.word	0x51eb851f

080045d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045d4:	b084      	sub	sp, #16
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	f107 0014 	add.w	r0, r7, #20
 80045e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	b004      	add	sp, #16
 80045f2:	4770      	bx	lr

080045f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004604:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004608:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004628:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800462c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	b29b      	uxth	r3, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	b29b      	uxth	r3, r3
 800463e:	4013      	ands	r3, r2
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800466c:	b084      	sub	sp, #16
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	f107 0014 	add.w	r0, r7, #20
 800467a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	b004      	add	sp, #16
 80046aa:	4770      	bx	lr

080046ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b09d      	sub	sp, #116	@ 0x74
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80046ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	78db      	ldrb	r3, [r3, #3]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d81f      	bhi.n	800471e <USB_ActivateEndpoint+0x72>
 80046de:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <USB_ActivateEndpoint+0x38>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004727 	.word	0x08004727
 80046f0:	08004703 	.word	0x08004703
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004700:	e012      	b.n	8004728 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004702:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004706:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800470a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800470e:	e00b      	b.n	8004728 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004710:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004718:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800471c:	e004      	b.n	8004728 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004724:	e000      	b.n	8004728 <USB_ActivateEndpoint+0x7c>
      break;
 8004726:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004760:	b29b      	uxth	r3, r3
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	7812      	ldrb	r2, [r2, #0]
 8004766:	4313      	orrs	r3, r2
 8004768:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800477a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800478a:	b29b      	uxth	r3, r3
 800478c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	7b1b      	ldrb	r3, [r3, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 8178 	bne.w	8004a88 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8084 	beq.w	80048aa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4413      	add	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	011a      	lsls	r2, r3, #4
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	88db      	ldrh	r3, [r3, #6]
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	827b      	strh	r3, [r7, #18]
 80047e4:	8a7b      	ldrh	r3, [r7, #18]
 80047e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01b      	beq.n	8004826 <USB_ActivateEndpoint+0x17a>
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004804:	823b      	strh	r3, [r7, #16]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8a3b      	ldrh	r3, [r7, #16]
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800481e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	78db      	ldrb	r3, [r3, #3]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d020      	beq.n	8004870 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004844:	81bb      	strh	r3, [r7, #12]
 8004846:	89bb      	ldrh	r3, [r7, #12]
 8004848:	f083 0320 	eor.w	r3, r3, #32
 800484c:	81bb      	strh	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	89bb      	ldrh	r3, [r7, #12]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
 800486e:	e2d5      	b.n	8004e1c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004886:	81fb      	strh	r3, [r7, #14]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	89fb      	ldrh	r3, [r7, #14]
 8004894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	8013      	strh	r3, [r2, #0]
 80048a8:	e2b8      	b.n	8004e1c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ba:	4413      	add	r3, r2
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	011a      	lsls	r2, r3, #4
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80048cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	88db      	ldrh	r3, [r3, #6]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	4413      	add	r3, r2
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	011a      	lsls	r2, r3, #4
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	4413      	add	r3, r2
 80048fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490c:	b29a      	uxth	r2, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b3e      	cmp	r3, #62	@ 0x3e
 8004918:	d91d      	bls.n	8004956 <USB_ActivateEndpoint+0x2aa>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <USB_ActivateEndpoint+0x288>
 800492e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004930:	3b01      	subs	r3, #1
 8004932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29a      	uxth	r2, r3
 800493a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800493c:	b29b      	uxth	r3, r3
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	b29b      	uxth	r3, r3
 8004942:	4313      	orrs	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800494a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494e:	b29a      	uxth	r2, r3
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	e026      	b.n	80049a4 <USB_ActivateEndpoint+0x2f8>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <USB_ActivateEndpoint+0x2c8>
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496c:	b29a      	uxth	r2, r3
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e017      	b.n	80049a4 <USB_ActivateEndpoint+0x2f8>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <USB_ActivateEndpoint+0x2e2>
 8004988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800498a:	3301      	adds	r3, #1
 800498c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29a      	uxth	r2, r3
 8004994:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004996:	b29b      	uxth	r3, r3
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	b29b      	uxth	r3, r3
 800499c:	4313      	orrs	r3, r2
 800499e:	b29a      	uxth	r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80049b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80049b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <USB_ActivateEndpoint+0x348>
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d2:	843b      	strh	r3, [r7, #32]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	8c3b      	ldrh	r3, [r7, #32]
 80049e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d124      	bne.n	8004a46 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	83bb      	strh	r3, [r7, #28]
 8004a14:	8bbb      	ldrh	r3, [r7, #28]
 8004a16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a1a:	83bb      	strh	r3, [r7, #28]
 8004a1c:	8bbb      	ldrh	r3, [r7, #28]
 8004a1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a22:	83bb      	strh	r3, [r7, #28]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	8bbb      	ldrh	r3, [r7, #28]
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]
 8004a44:	e1ea      	b.n	8004e1c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5c:	83fb      	strh	r3, [r7, #30]
 8004a5e:	8bfb      	ldrh	r3, [r7, #30]
 8004a60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a64:	83fb      	strh	r3, [r7, #30]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	8bfb      	ldrh	r3, [r7, #30]
 8004a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8013      	strh	r3, [r2, #0]
 8004a86:	e1c9      	b.n	8004e1c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	78db      	ldrb	r3, [r3, #3]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d11e      	bne.n	8004ace <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]
 8004acc:	e01d      	b.n	8004b0a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b1a:	4413      	add	r3, r2
 8004b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	011a      	lsls	r2, r3, #4
 8004b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	891b      	ldrh	r3, [r3, #8]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b3c:	801a      	strh	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b4e:	4413      	add	r3, r2
 8004b50:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	011a      	lsls	r2, r3, #4
 8004b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004b60:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	895b      	ldrh	r3, [r3, #10]
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b70:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8093 	bne.w	8004ca2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004b8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <USB_ActivateEndpoint+0x524>
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	441a      	add	r2, r3
 8004bba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004bde:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <USB_ActivateEndpoint+0x574>
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfe:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	441a      	add	r2, r3
 8004c0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c36:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c38:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c3e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c40:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c46:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]
 8004ca0:	e0bc      	b.n	8004e1c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01d      	beq.n	8004cfa <USB_ActivateEndpoint+0x64e>
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	441a      	add	r2, r3
 8004ce2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01d      	beq.n	8004d52 <USB_ActivateEndpoint+0x6a6>
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	78db      	ldrb	r3, [r3, #3]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d024      	beq.n	8004da4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d78:	f083 0320 	eor.w	r3, r3, #32
 8004d7c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]
 8004da2:	e01d      	b.n	8004de0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e1c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3774      	adds	r7, #116	@ 0x74
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop

08004e2c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b08d      	sub	sp, #52	@ 0x34
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	7b1b      	ldrb	r3, [r3, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 808e 	bne.w	8004f5c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d044      	beq.n	8004ed2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	81bb      	strh	r3, [r7, #12]
 8004e56:	89bb      	ldrh	r3, [r7, #12]
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <USB_DeactivateEndpoint+0x6c>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e76:	817b      	strh	r3, [r7, #10]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eae:	813b      	strh	r3, [r7, #8]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]
 8004ed0:	e192      	b.n	80051f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	827b      	strh	r3, [r7, #18]
 8004ee0:	8a7b      	ldrh	r3, [r7, #18]
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01b      	beq.n	8004f22 <USB_DeactivateEndpoint+0xf6>
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f00:	823b      	strh	r3, [r7, #16]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8a3b      	ldrh	r3, [r7, #16]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f38:	81fb      	strh	r3, [r7, #14]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	89fb      	ldrh	r3, [r7, #14]
 8004f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	8013      	strh	r3, [r2, #0]
 8004f5a:	e14d      	b.n	80051f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 80a5 	bne.w	80050b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	843b      	strh	r3, [r7, #32]
 8004f74:	8c3b      	ldrh	r3, [r7, #32]
 8004f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <USB_DeactivateEndpoint+0x18a>
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f94:	83fb      	strh	r3, [r7, #30]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	8bfb      	ldrh	r3, [r7, #30]
 8004fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004faa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	83bb      	strh	r3, [r7, #28]
 8004fc4:	8bbb      	ldrh	r3, [r7, #28]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01b      	beq.n	8005006 <USB_DeactivateEndpoint+0x1da>
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe4:	837b      	strh	r3, [r7, #26]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8b7b      	ldrh	r3, [r7, #26]
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501c:	833b      	strh	r3, [r7, #24]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8b3b      	ldrh	r3, [r7, #24]
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005036:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005054:	82fb      	strh	r3, [r7, #22]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8afb      	ldrh	r3, [r7, #22]
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800506e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508c:	82bb      	strh	r3, [r7, #20]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	8abb      	ldrh	r3, [r7, #20]
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
 80050ae:	e0a3      	b.n	80051f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80050be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <USB_DeactivateEndpoint+0x2d4>
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80050ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800510e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <USB_DeactivateEndpoint+0x324>
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005148:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005166:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800517c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800519e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3734      	adds	r7, #52	@ 0x34
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b0c2      	sub	sp, #264	@ 0x108
 8005208:	af00      	add	r7, sp, #0
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005212:	6018      	str	r0, [r3, #0]
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800521e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b01      	cmp	r3, #1
 800522c:	f040 86b7 	bne.w	8005f9e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d908      	bls.n	800525e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800524c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800525c:	e007      	b.n	800526e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800525e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800526e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	7b1b      	ldrb	r3, [r3, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d13a      	bne.n	80052f4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6959      	ldr	r1, [r3, #20]
 800528a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	88da      	ldrh	r2, [r3, #6]
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	b29b      	uxth	r3, r3
 800529c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052a4:	6800      	ldr	r0, [r0, #0]
 80052a6:	f001 fc9c 	bl	8006be2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	011a      	lsls	r2, r3, #4
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	f000 be1f 	b.w	8005f32 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	78db      	ldrb	r3, [r3, #3]
 8005300:	2b02      	cmp	r3, #2
 8005302:	f040 8462 	bne.w	8005bca <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	429a      	cmp	r2, r3
 8005320:	f240 83df 	bls.w	8005ae2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800534e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	441a      	add	r2, r3
 8005368:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800536c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005374:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800537c:	b29b      	uxth	r3, r3
 800537e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005390:	1ad2      	subs	r2, r2, r3
 8005392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800539e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 81c7 	beq.w	8005754 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d177      	bne.n	80054d2 <USB_EPStartXfer+0x2ce>
 80053e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	4413      	add	r3, r2
 8005404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	011a      	lsls	r2, r3, #4
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	4413      	add	r3, r2
 8005418:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005428:	b29a      	uxth	r2, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005432:	2b3e      	cmp	r3, #62	@ 0x3e
 8005434:	d921      	bls.n	800547a <USB_EPStartXfer+0x276>
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <USB_EPStartXfer+0x252>
 800544c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005450:	3b01      	subs	r3, #1
 8005452:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29a      	uxth	r2, r3
 800545c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29b      	uxth	r3, r3
 8005466:	4313      	orrs	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005472:	b29a      	uxth	r2, r3
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	e050      	b.n	800551c <USB_EPStartXfer+0x318>
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <USB_EPStartXfer+0x294>
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005490:	b29a      	uxth	r2, r3
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e041      	b.n	800551c <USB_EPStartXfer+0x318>
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <USB_EPStartXfer+0x2b4>
 80054ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054b2:	3301      	adds	r3, #1
 80054b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29a      	uxth	r2, r3
 80054be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	029b      	lsls	r3, r3, #10
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	e024      	b.n	800551c <USB_EPStartXfer+0x318>
 80054d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d11c      	bne.n	800551c <USB_EPStartXfer+0x318>
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	4413      	add	r3, r2
 80054f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	011a      	lsls	r2, r3, #4
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	4413      	add	r3, r2
 800550c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005516:	b29a      	uxth	r2, r3
 8005518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	895b      	ldrh	r3, [r3, #10]
 8005528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6959      	ldr	r1, [r3, #20]
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	b29b      	uxth	r3, r3
 800553e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005542:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005546:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	f001 fb49 	bl	8006be2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	441a      	add	r2, r3
 8005562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d90f      	bls.n	80055aa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800558a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6a1a      	ldr	r2, [r3, #32]
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	621a      	str	r2, [r3, #32]
 80055a8:	e00e      	b.n	80055c8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80055ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d177      	bne.n	80056c8 <USB_EPStartXfer+0x4c4>
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	011a      	lsls	r2, r3, #4
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	4413      	add	r3, r2
 800560e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561e:	b29a      	uxth	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005628:	2b3e      	cmp	r3, #62	@ 0x3e
 800562a:	d921      	bls.n	8005670 <USB_EPStartXfer+0x46c>
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <USB_EPStartXfer+0x448>
 8005642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005646:	3b01      	subs	r3, #1
 8005648:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005656:	b29b      	uxth	r3, r3
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	b29b      	uxth	r3, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e056      	b.n	800571e <USB_EPStartXfer+0x51a>
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <USB_EPStartXfer+0x48a>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005686:	b29a      	uxth	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e047      	b.n	800571e <USB_EPStartXfer+0x51a>
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <USB_EPStartXfer+0x4aa>
 80056a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a8:	3301      	adds	r3, #1
 80056aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4313      	orrs	r3, r2
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e02a      	b.n	800571e <USB_EPStartXfer+0x51a>
 80056c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d122      	bne.n	800571e <USB_EPStartXfer+0x51a>
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	4413      	add	r3, r2
 80056fa:	623b      	str	r3, [r7, #32]
 80056fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	011a      	lsls	r2, r3, #4
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	4413      	add	r3, r2
 800570e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005718:	b29a      	uxth	r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800571e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	891b      	ldrh	r3, [r3, #8]
 800572a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6959      	ldr	r1, [r3, #20]
 800573a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573e:	b29b      	uxth	r3, r3
 8005740:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005744:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005748:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f001 fa48 	bl	8006be2 <USB_WritePMA>
 8005752:	e3ee      	b.n	8005f32 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d177      	bne.n	8005854 <USB_EPStartXfer+0x650>
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800577e:	b29b      	uxth	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005784:	4413      	add	r3, r2
 8005786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	011a      	lsls	r2, r3, #4
 8005796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005798:	4413      	add	r3, r2
 800579a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800579e:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80057b6:	d921      	bls.n	80057fc <USB_EPStartXfer+0x5f8>
 80057b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <USB_EPStartXfer+0x5d4>
 80057ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057d2:	3b01      	subs	r3, #1
 80057d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	029b      	lsls	r3, r3, #10
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	4313      	orrs	r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e056      	b.n	80058aa <USB_EPStartXfer+0x6a6>
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <USB_EPStartXfer+0x616>
 8005804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005812:	b29a      	uxth	r2, r3
 8005814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	e047      	b.n	80058aa <USB_EPStartXfer+0x6a6>
 800581a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <USB_EPStartXfer+0x636>
 8005830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005834:	3301      	adds	r3, #1
 8005836:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800583a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29a      	uxth	r2, r3
 8005840:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005844:	b29b      	uxth	r3, r3
 8005846:	029b      	lsls	r3, r3, #10
 8005848:	b29b      	uxth	r3, r3
 800584a:	4313      	orrs	r3, r2
 800584c:	b29a      	uxth	r2, r3
 800584e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e02a      	b.n	80058aa <USB_EPStartXfer+0x6a6>
 8005854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d122      	bne.n	80058aa <USB_EPStartXfer+0x6a6>
 8005864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005884:	4413      	add	r3, r2
 8005886:	653b      	str	r3, [r7, #80]	@ 0x50
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	011a      	lsls	r2, r3, #4
 8005896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005898:	4413      	add	r3, r2
 800589a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800589e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	891b      	ldrh	r3, [r3, #8]
 80058b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6959      	ldr	r1, [r3, #20]
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058d8:	6800      	ldr	r0, [r0, #0]
 80058da:	f001 f982 	bl	8006be2 <USB_WritePMA>
            ep->xfer_buff += len;
 80058de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ee:	441a      	add	r2, r3
 80058f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d90f      	bls.n	8005938 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a1a      	ldr	r2, [r3, #32]
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	1ad2      	subs	r2, r2, r3
 800592a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	621a      	str	r2, [r3, #32]
 8005936:	e00e      	b.n	8005956 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	643b      	str	r3, [r7, #64]	@ 0x40
 8005962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d177      	bne.n	8005a62 <USB_EPStartXfer+0x85e>
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	4413      	add	r3, r2
 8005994:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80059c4:	d921      	bls.n	8005a0a <USB_EPStartXfer+0x806>
 80059c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <USB_EPStartXfer+0x7e2>
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4313      	orrs	r3, r2
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	e050      	b.n	8005aac <USB_EPStartXfer+0x8a8>
 8005a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <USB_EPStartXfer+0x824>
 8005a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	e041      	b.n	8005aac <USB_EPStartXfer+0x8a8>
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	085b      	lsrs	r3, r3, #1
 8005a2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <USB_EPStartXfer+0x844>
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a42:	3301      	adds	r3, #1
 8005a44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e024      	b.n	8005aac <USB_EPStartXfer+0x8a8>
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d11c      	bne.n	8005aac <USB_EPStartXfer+0x8a8>
 8005a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a86:	4413      	add	r3, r2
 8005a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	011a      	lsls	r2, r3, #4
 8005a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	895b      	ldrh	r3, [r3, #10]
 8005ab8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6959      	ldr	r1, [r3, #20]
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ad2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ad6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ada:	6800      	ldr	r0, [r0, #0]
 8005adc:	f001 f881 	bl	8006be2 <USB_WritePMA>
 8005ae0:	e227      	b.n	8005f32 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b18:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b6e:	4413      	add	r3, r2
 8005b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	011a      	lsls	r2, r3, #4
 8005b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	891b      	ldrh	r3, [r3, #8]
 8005ba0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6959      	ldr	r1, [r3, #20]
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bbe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bc2:	6800      	ldr	r0, [r0, #0]
 8005bc4:	f001 f80d 	bl	8006be2 <USB_WritePMA>
 8005bc8:	e1b3      	b.n	8005f32 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a1a      	ldr	r2, [r3, #32]
 8005bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bda:	1ad2      	subs	r2, r2, r3
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80c6 	beq.w	8005d9c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d177      	bne.n	8005d1c <USB_EPStartXfer+0xb18>
 8005c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c4c:	4413      	add	r3, r2
 8005c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	011a      	lsls	r2, r3, #4
 8005c5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c60:	4413      	add	r3, r2
 8005c62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c7e:	d921      	bls.n	8005cc4 <USB_EPStartXfer+0xac0>
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <USB_EPStartXfer+0xa9c>
 8005c96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e050      	b.n	8005d66 <USB_EPStartXfer+0xb62>
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <USB_EPStartXfer+0xade>
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e041      	b.n	8005d66 <USB_EPStartXfer+0xb62>
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <USB_EPStartXfer+0xafe>
 8005cf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	029b      	lsls	r3, r3, #10
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	4313      	orrs	r3, r2
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e024      	b.n	8005d66 <USB_EPStartXfer+0xb62>
 8005d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d11c      	bne.n	8005d66 <USB_EPStartXfer+0xb62>
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d40:	4413      	add	r3, r2
 8005d42:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	011a      	lsls	r2, r3, #4
 8005d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	895b      	ldrh	r3, [r3, #10]
 8005d72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6959      	ldr	r1, [r3, #20]
 8005d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d8c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d90:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d94:	6800      	ldr	r0, [r0, #0]
 8005d96:	f000 ff24 	bl	8006be2 <USB_WritePMA>
 8005d9a:	e0ca      	b.n	8005f32 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d177      	bne.n	8005e9c <USB_EPStartXfer+0xc98>
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dcc:	4413      	add	r3, r2
 8005dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	011a      	lsls	r2, r3, #4
 8005dde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005de0:	4413      	add	r3, r2
 8005de2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005de6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dfe:	d921      	bls.n	8005e44 <USB_EPStartXfer+0xc40>
 8005e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <USB_EPStartXfer+0xc1c>
 8005e16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4313      	orrs	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	e05c      	b.n	8005efe <USB_EPStartXfer+0xcfa>
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <USB_EPStartXfer+0xc5e>
 8005e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	e04d      	b.n	8005efe <USB_EPStartXfer+0xcfa>
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <USB_EPStartXfer+0xc7e>
 8005e78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	4313      	orrs	r3, r2
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	e030      	b.n	8005efe <USB_EPStartXfer+0xcfa>
 8005e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d128      	bne.n	8005efe <USB_EPStartXfer+0xcfa>
 8005eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	011a      	lsls	r2, r3, #4
 8005ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ee8:	4413      	add	r3, r2
 8005eea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005efc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	891b      	ldrh	r3, [r3, #8]
 8005f0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6959      	ldr	r1, [r3, #20]
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f000 fe58 	bl	8006be2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f58:	817b      	strh	r3, [r7, #10]
 8005f5a:	897b      	ldrh	r3, [r7, #10]
 8005f5c:	f083 0310 	eor.w	r3, r3, #16
 8005f60:	817b      	strh	r3, [r7, #10]
 8005f62:	897b      	ldrh	r3, [r7, #10]
 8005f64:	f083 0320 	eor.w	r3, r3, #32
 8005f68:	817b      	strh	r3, [r7, #10]
 8005f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	897b      	ldrh	r3, [r7, #10]
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]
 8005f9a:	f000 bcde 	b.w	800695a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	7b1b      	ldrb	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 80bb 	bne.w	8006126 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d917      	bls.n	8005ffc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699a      	ldr	r2, [r3, #24]
 8005fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fec:	1ad2      	subs	r2, r2, r3
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	619a      	str	r2, [r3, #24]
 8005ffa:	e00e      	b.n	800601a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800601a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006036:	b29b      	uxth	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800603e:	4413      	add	r3, r2
 8006040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	011a      	lsls	r2, r3, #4
 8006052:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006056:	4413      	add	r3, r2
 8006058:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800605c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800606c:	b29a      	uxth	r2, r3
 800606e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006078:	2b3e      	cmp	r3, #62	@ 0x3e
 800607a:	d924      	bls.n	80060c6 <USB_EPStartXfer+0xec2>
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <USB_EPStartXfer+0xe98>
 8006092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006096:	3b01      	subs	r3, #1
 8006098:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800609c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	4313      	orrs	r3, r2
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	f000 bc10 	b.w	80068e6 <USB_EPStartXfer+0x16e2>
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <USB_EPStartXfer+0xee4>
 80060ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e3fe      	b.n	80068e6 <USB_EPStartXfer+0x16e2>
 80060e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <USB_EPStartXfer+0xf04>
 80060fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006102:	3301      	adds	r3, #1
 8006104:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29a      	uxth	r2, r3
 8006110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006114:	b29b      	uxth	r3, r3
 8006116:	029b      	lsls	r3, r3, #10
 8006118:	b29b      	uxth	r3, r3
 800611a:	4313      	orrs	r3, r2
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e3df      	b.n	80068e6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	78db      	ldrb	r3, [r3, #3]
 8006132:	2b02      	cmp	r3, #2
 8006134:	f040 8218 	bne.w	8006568 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f040 809d 	bne.w	8006284 <USB_EPStartXfer+0x1080>
 800614a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800616e:	4413      	add	r3, r2
 8006170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	011a      	lsls	r2, r3, #4
 8006182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006186:	4413      	add	r3, r2
 8006188:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800618c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800619c:	b29a      	uxth	r2, r3
 800619e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80061b2:	d92b      	bls.n	800620c <USB_EPStartXfer+0x1008>
 80061b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	095b      	lsrs	r3, r3, #5
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <USB_EPStartXfer+0xfe0>
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061de:	3b01      	subs	r3, #1
 80061e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	029b      	lsls	r3, r3, #10
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006202:	b29a      	uxth	r2, r3
 8006204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	e070      	b.n	80062ee <USB_EPStartXfer+0x10ea>
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10c      	bne.n	8006236 <USB_EPStartXfer+0x1032>
 800621c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622c:	b29a      	uxth	r2, r3
 800622e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e05b      	b.n	80062ee <USB_EPStartXfer+0x10ea>
 8006236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <USB_EPStartXfer+0x1062>
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006260:	3301      	adds	r3, #1
 8006262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006272:	b29b      	uxth	r3, r3
 8006274:	029b      	lsls	r3, r3, #10
 8006276:	b29b      	uxth	r3, r3
 8006278:	4313      	orrs	r3, r2
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	e034      	b.n	80062ee <USB_EPStartXfer+0x10ea>
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d12c      	bne.n	80062ee <USB_EPStartXfer+0x10ea>
 8006294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062b8:	4413      	add	r3, r2
 80062ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	011a      	lsls	r2, r3, #4
 80062cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f040 809d 	bne.w	8006448 <USB_EPStartXfer+0x1244>
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800631c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632a:	b29b      	uxth	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006332:	4413      	add	r3, r2
 8006334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800634a:	4413      	add	r3, r2
 800634c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b3e      	cmp	r3, #62	@ 0x3e
 8006376:	d92b      	bls.n	80063d0 <USB_EPStartXfer+0x11cc>
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800638a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <USB_EPStartXfer+0x11a4>
 800639e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a2:	3b01      	subs	r3, #1
 80063a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	029b      	lsls	r3, r3, #10
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	b29b      	uxth	r3, r3
 80063be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	e069      	b.n	80064a4 <USB_EPStartXfer+0x12a0>
 80063d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10c      	bne.n	80063fa <USB_EPStartXfer+0x11f6>
 80063e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	e054      	b.n	80064a4 <USB_EPStartXfer+0x12a0>
 80063fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <USB_EPStartXfer+0x1226>
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006424:	3301      	adds	r3, #1
 8006426:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800642a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29a      	uxth	r2, r3
 8006432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29b      	uxth	r3, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e02d      	b.n	80064a4 <USB_EPStartXfer+0x12a0>
 8006448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d125      	bne.n	80064a4 <USB_EPStartXfer+0x12a0>
 8006458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800646e:	4413      	add	r3, r2
 8006470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	011a      	lsls	r2, r3, #4
 8006482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006486:	4413      	add	r3, r2
 8006488:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800648c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	b29a      	uxth	r2, r3
 800649e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8218 	beq.w	80068e6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <USB_EPStartXfer+0x12ea>
 80064e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10d      	bne.n	800650a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 81f5 	bne.w	80068e6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 81ee 	bne.w	80068e6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800650a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800652c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006530:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800655a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800655e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
 8006566:	e1be      	b.n	80068e6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	78db      	ldrb	r3, [r3, #3]
 8006574:	2b01      	cmp	r3, #1
 8006576:	f040 81b4 	bne.w	80068e2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800657a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	429a      	cmp	r2, r3
 8006594:	d917      	bls.n	80065c6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	619a      	str	r2, [r3, #24]
 80065c4:	e00e      	b.n	80065e4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80065c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80065d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2200      	movs	r2, #0
 80065e2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8085 	bne.w	8006700 <USB_EPStartXfer+0x14fc>
 80065f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006612:	b29b      	uxth	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800661a:	4413      	add	r3, r2
 800661c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	011a      	lsls	r2, r3, #4
 800662e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006632:	4413      	add	r3, r2
 8006634:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800663c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006648:	b29a      	uxth	r2, r3
 800664a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006654:	2b3e      	cmp	r3, #62	@ 0x3e
 8006656:	d923      	bls.n	80066a0 <USB_EPStartXfer+0x149c>
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <USB_EPStartXfer+0x1474>
 800666e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006672:	3b01      	subs	r3, #1
 8006674:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006684:	b29b      	uxth	r3, r3
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	b29b      	uxth	r3, r3
 800668a:	4313      	orrs	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006696:	b29a      	uxth	r2, r3
 8006698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	e060      	b.n	8006762 <USB_EPStartXfer+0x155e>
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10c      	bne.n	80066c2 <USB_EPStartXfer+0x14be>
 80066a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	e04f      	b.n	8006762 <USB_EPStartXfer+0x155e>
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <USB_EPStartXfer+0x14de>
 80066d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066dc:	3301      	adds	r3, #1
 80066de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	029b      	lsls	r3, r3, #10
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e030      	b.n	8006762 <USB_EPStartXfer+0x155e>
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d128      	bne.n	8006762 <USB_EPStartXfer+0x155e>
 8006710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006734:	4413      	add	r3, r2
 8006736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800673a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	011a      	lsls	r2, r3, #4
 8006748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800674c:	4413      	add	r3, r2
 800674e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006752:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675a:	b29a      	uxth	r2, r3
 800675c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 8085 	bne.w	800688c <USB_EPStartXfer+0x1688>
 8006782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006794:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800679e:	b29b      	uxth	r3, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067a6:	4413      	add	r3, r2
 80067a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	011a      	lsls	r2, r3, #4
 80067ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067be:	4413      	add	r3, r2
 80067c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80067e2:	d923      	bls.n	800682c <USB_EPStartXfer+0x1628>
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <USB_EPStartXfer+0x1600>
 80067fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067fe:	3b01      	subs	r3, #1
 8006800:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29a      	uxth	r2, r3
 800680c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006810:	b29b      	uxth	r3, r3
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	b29b      	uxth	r3, r3
 8006816:	4313      	orrs	r3, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e05c      	b.n	80068e6 <USB_EPStartXfer+0x16e2>
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10c      	bne.n	800684e <USB_EPStartXfer+0x164a>
 8006834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	e04b      	b.n	80068e6 <USB_EPStartXfer+0x16e2>
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <USB_EPStartXfer+0x166a>
 8006864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006868:	3301      	adds	r3, #1
 800686a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800686e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29a      	uxth	r2, r3
 8006876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800687a:	b29b      	uxth	r3, r3
 800687c:	029b      	lsls	r3, r3, #10
 800687e:	b29b      	uxth	r3, r3
 8006880:	4313      	orrs	r3, r2
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	e02c      	b.n	80068e6 <USB_EPStartXfer+0x16e2>
 800688c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d124      	bne.n	80068e6 <USB_EPStartXfer+0x16e2>
 800689c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068b2:	4413      	add	r3, r2
 80068b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	011a      	lsls	r2, r3, #4
 80068c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	b29a      	uxth	r2, r3
 80068da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	e001      	b.n	80068e6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e03a      	b.n	800695c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006910:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006914:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006918:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800691c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006920:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006924:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800698e:	81bb      	strh	r3, [r7, #12]
 8006990:	89bb      	ldrh	r3, [r7, #12]
 8006992:	f083 0310 	eor.w	r3, r3, #16
 8006996:	81bb      	strh	r3, [r7, #12]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	89bb      	ldrh	r3, [r7, #12]
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
 80069b8:	e01f      	b.n	80069fa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d0:	81fb      	strh	r3, [r7, #14]
 80069d2:	89fb      	ldrh	r3, [r7, #14]
 80069d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069d8:	81fb      	strh	r3, [r7, #14]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b087      	sub	sp, #28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	7b1b      	ldrb	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f040 809d 	bne.w	8006b54 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d04c      	beq.n	8006abc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	823b      	strh	r3, [r7, #16]
 8006a30:	8a3b      	ldrh	r3, [r7, #16]
 8006a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01b      	beq.n	8006a72 <USB_EPClearStall+0x6c>
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a50:	81fb      	strh	r3, [r7, #14]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	78db      	ldrb	r3, [r3, #3]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d06c      	beq.n	8006b54 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a90:	81bb      	strh	r3, [r7, #12]
 8006a92:	89bb      	ldrh	r3, [r7, #12]
 8006a94:	f083 0320 	eor.w	r3, r3, #32
 8006a98:	81bb      	strh	r3, [r7, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	89bb      	ldrh	r3, [r7, #12]
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]
 8006aba:	e04b      	b.n	8006b54 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	82fb      	strh	r3, [r7, #22]
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01b      	beq.n	8006b0c <USB_EPClearStall+0x106>
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aea:	82bb      	strh	r3, [r7, #20]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	8abb      	ldrh	r3, [r7, #20]
 8006af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b22:	827b      	strh	r3, [r7, #18]
 8006b24:	8a7b      	ldrh	r3, [r7, #18]
 8006b26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b2a:	827b      	strh	r3, [r7, #18]
 8006b2c:	8a7b      	ldrh	r3, [r7, #18]
 8006b2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b32:	827b      	strh	r3, [r7, #18]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	441a      	add	r2, r3
 8006b3e:	8a7b      	ldrh	r3, [r7, #18]
 8006b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr

08006b60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2280      	movs	r2, #128	@ 0x80
 8006b76:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	4770      	bx	lr

08006bae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b08b      	sub	sp, #44	@ 0x2c
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	4611      	mov	r1, r2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	80fb      	strh	r3, [r7, #6]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bf8:	88bb      	ldrh	r3, [r7, #4]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	005a      	lsls	r2, r3, #1
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c14:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1a:	e01e      	b.n	8006c5a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3301      	adds	r3, #1
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	b21a      	sxth	r2, r3
 8006c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	b21b      	sxth	r3, r3
 8006c34:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	8a7a      	ldrh	r2, [r7, #18]
 8006c3a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	3302      	adds	r3, #2
 8006c40:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	3302      	adds	r3, #2
 8006c46:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	3301      	adds	r3, #1
 8006c52:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	3b01      	subs	r3, #1
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1dd      	bne.n	8006c1c <USB_WritePMA+0x3a>
  }
}
 8006c60:	bf00      	nop
 8006c62:	bf00      	nop
 8006c64:	372c      	adds	r7, #44	@ 0x2c
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b08b      	sub	sp, #44	@ 0x2c
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4611      	mov	r1, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	80fb      	strh	r3, [r7, #6]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c82:	88bb      	ldrh	r3, [r7, #4]
 8006c84:	085b      	lsrs	r3, r3, #1
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	005a      	lsls	r2, r3, #1
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c9e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca4:	e01b      	b.n	8006cde <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e0      	bne.n	8006ca6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006ce4:	88bb      	ldrh	r3, [r7, #4]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d007      	beq.n	8006d00 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	701a      	strb	r2, [r3, #0]
  }
}
 8006d00:	bf00      	nop
 8006d02:	372c      	adds	r7, #44	@ 0x2c
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr

08006d0a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006d16:	2304      	movs	r3, #4
 8006d18:	2203      	movs	r2, #3
 8006d1a:	2181      	movs	r1, #129	@ 0x81
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fc86 	bl	800862e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006d28:	2010      	movs	r0, #16
 8006d2a:	f001 fd95 	bl	8008858 <USBD_static_malloc>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	e005      	b.n	8006d50 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006d64:	2181      	movs	r1, #129	@ 0x81
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fc87 	bl	800867a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fd74 	bl	8008870 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dac:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d045      	beq.n	8006e56 <USBD_HID_Setup+0xba>
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	f040 80d3 	bne.w	8006f76 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	3b02      	subs	r3, #2
 8006dd6:	2b09      	cmp	r3, #9
 8006dd8:	d835      	bhi.n	8006e46 <USBD_HID_Setup+0xaa>
 8006dda:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <USBD_HID_Setup+0x44>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e37 	.word	0x08006e37
 8006de4:	08006e17 	.word	0x08006e17
 8006de8:	08006e47 	.word	0x08006e47
 8006dec:	08006e47 	.word	0x08006e47
 8006df0:	08006e47 	.word	0x08006e47
 8006df4:	08006e47 	.word	0x08006e47
 8006df8:	08006e47 	.word	0x08006e47
 8006dfc:	08006e47 	.word	0x08006e47
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e09 	.word	0x08006e09
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	885b      	ldrh	r3, [r3, #2]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	601a      	str	r2, [r3, #0]
          break;
 8006e14:	e01e      	b.n	8006e54 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 f957 	bl	80080d0 <USBD_CtlSendData>
          break;
 8006e22:	e017      	b.n	8006e54 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	885b      	ldrh	r3, [r3, #2]
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	461a      	mov	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	605a      	str	r2, [r3, #4]
          break;
 8006e34:	e00e      	b.n	8006e54 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f946 	bl	80080d0 <USBD_CtlSendData>
          break;
 8006e44:	e006      	b.n	8006e54 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f8d7 	bl	8007ffc <USBD_CtlError>
          ret = USBD_FAIL;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	75fb      	strb	r3, [r7, #23]
          break;
 8006e52:	bf00      	nop
      }
      break;
 8006e54:	e096      	b.n	8006f84 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	785b      	ldrb	r3, [r3, #1]
 8006e5a:	2b0b      	cmp	r3, #11
 8006e5c:	f200 8083 	bhi.w	8006f66 <USBD_HID_Setup+0x1ca>
 8006e60:	a201      	add	r2, pc, #4	@ (adr r2, 8006e68 <USBD_HID_Setup+0xcc>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e99 	.word	0x08006e99
 8006e6c:	08006f67 	.word	0x08006f67
 8006e70:	08006f67 	.word	0x08006f67
 8006e74:	08006f67 	.word	0x08006f67
 8006e78:	08006f67 	.word	0x08006f67
 8006e7c:	08006f67 	.word	0x08006f67
 8006e80:	08006ec1 	.word	0x08006ec1
 8006e84:	08006f67 	.word	0x08006f67
 8006e88:	08006f67 	.word	0x08006f67
 8006e8c:	08006f67 	.word	0x08006f67
 8006e90:	08006f19 	.word	0x08006f19
 8006e94:	08006f41 	.word	0x08006f41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ea2:	f107 030e 	add.w	r3, r7, #14
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f910 	bl	80080d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eb0:	e060      	b.n	8006f74 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f8a1 	bl	8007ffc <USBD_CtlError>
            ret = USBD_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebe:	e059      	b.n	8006f74 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	885b      	ldrh	r3, [r3, #2]
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b22      	cmp	r3, #34	@ 0x22
 8006eca:	d108      	bne.n	8006ede <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	88db      	ldrh	r3, [r3, #6]
 8006ed0:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ed2:	bf28      	it	cs
 8006ed4:	233f      	movcs	r3, #63	@ 0x3f
 8006ed6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8006f90 <USBD_HID_Setup+0x1f4>)
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	e015      	b.n	8006f0a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	885b      	ldrh	r3, [r3, #2]
 8006ee2:	0a1b      	lsrs	r3, r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b21      	cmp	r3, #33	@ 0x21
 8006ee8:	d108      	bne.n	8006efc <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006eea:	4b2a      	ldr	r3, [pc, #168]	@ (8006f94 <USBD_HID_Setup+0x1f8>)
 8006eec:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	88db      	ldrh	r3, [r3, #6]
 8006ef2:	2b09      	cmp	r3, #9
 8006ef4:	bf28      	it	cs
 8006ef6:	2309      	movcs	r3, #9
 8006ef8:	83fb      	strh	r3, [r7, #30]
 8006efa:	e006      	b.n	8006f0a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 f87c 	bl	8007ffc <USBD_CtlError>
            ret = USBD_FAIL;
 8006f04:	2302      	movs	r3, #2
 8006f06:	75fb      	strb	r3, [r7, #23]
            break;
 8006f08:	e034      	b.n	8006f74 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006f0a:	8bfb      	ldrh	r3, [r7, #30]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69b9      	ldr	r1, [r7, #24]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f8dd 	bl	80080d0 <USBD_CtlSendData>
          break;
 8006f16:	e02d      	b.n	8006f74 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d107      	bne.n	8006f32 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3308      	adds	r3, #8
 8006f26:	2201      	movs	r2, #1
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f8d0 	bl	80080d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f30:	e020      	b.n	8006f74 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f861 	bl	8007ffc <USBD_CtlError>
            ret = USBD_FAIL;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f3e:	e019      	b.n	8006f74 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d106      	bne.n	8006f58 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	885b      	ldrh	r3, [r3, #2]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f56:	e00d      	b.n	8006f74 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 f84e 	bl	8007ffc <USBD_CtlError>
            ret = USBD_FAIL;
 8006f60:	2302      	movs	r3, #2
 8006f62:	75fb      	strb	r3, [r7, #23]
          break;
 8006f64:	e006      	b.n	8006f74 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f847 	bl	8007ffc <USBD_CtlError>
          ret = USBD_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	75fb      	strb	r3, [r7, #23]
          break;
 8006f72:	bf00      	nop
      }
      break;
 8006f74:	e006      	b.n	8006f84 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f83f 	bl	8007ffc <USBD_CtlError>
      ret = USBD_FAIL;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	75fb      	strb	r3, [r7, #23]
      break;
 8006f82:	bf00      	nop
  }

  return ret;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	200000c8 	.word	0x200000c8
 8006f94:	200000b0 	.word	0x200000b0

08006f98 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fac:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d10c      	bne.n	8006fd2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	7b1b      	ldrb	r3, [r3, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d108      	bne.n	8006fd2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	2181      	movs	r1, #129	@ 0x81
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 fbfc 	bl	80087ca <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7c1b      	ldrb	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e001      	b.n	8006ffa <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8006ff6:	230a      	movs	r3, #10
 8006ff8:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr
	...

08007008 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2222      	movs	r2, #34	@ 0x22
 8007014:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007016:	4b03      	ldr	r3, [pc, #12]	@ (8007024 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000044 	.word	0x20000044

08007028 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2222      	movs	r2, #34	@ 0x22
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	@ (8007044 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000068 	.word	0x20000068

08007048 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2222      	movs	r2, #34	@ 0x22
 8007054:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007056:	4b03      	ldr	r3, [pc, #12]	@ (8007064 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	2000008c 	.word	0x2000008c

08007068 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800707a:	2200      	movs	r2, #0
 800707c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr
	...

0800708c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	220a      	movs	r2, #10
 8007098:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800709a:	4b03      	ldr	r3, [pc, #12]	@ (80070a8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	200000bc 	.word	0x200000bc

080070ac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070c0:	2302      	movs	r3, #2
 80070c2:	e01a      	b.n	80070fa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	79fa      	ldrb	r2, [r7, #7]
 80070f0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f001 fa38 	bl	8008568 <USBD_LL_Init>

  return USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
 8007122:	e001      	b.n	8007128 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007124:	2302      	movs	r3, #2
 8007126:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr

08007134 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fa5b 	bl	80085f8 <USBD_LL_Start>

  return USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr

08007160 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800716c:	2302      	movs	r3, #2
 800716e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00c      	beq.n	8007194 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	4611      	mov	r1, r2
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	78fa      	ldrb	r2, [r7, #3]
 80071b4:	4611      	mov	r1, r2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fed7 	bl	8007f8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071ea:	461a      	mov	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d016      	beq.n	800722e <USBD_LL_SetupStage+0x6a>
 8007200:	2b02      	cmp	r3, #2
 8007202:	d81c      	bhi.n	800723e <USBD_LL_SetupStage+0x7a>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <USBD_LL_SetupStage+0x4a>
 8007208:	2b01      	cmp	r3, #1
 800720a:	d008      	beq.n	800721e <USBD_LL_SetupStage+0x5a>
 800720c:	e017      	b.n	800723e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9ca 	bl	80075b0 <USBD_StdDevReq>
      break;
 800721c:	e01a      	b.n	8007254 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa2c 	bl	8007684 <USBD_StdItfReq>
      break;
 800722c:	e012      	b.n	8007254 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa6c 	bl	8007714 <USBD_StdEPReq>
      break;
 800723c:	e00a      	b.n	8007254 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007244:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007248:	b2db      	uxtb	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fa33 	bl	80086b8 <USBD_LL_StallEP>
      break;
 8007252:	bf00      	nop
  }

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	460b      	mov	r3, r1
 8007268:	607a      	str	r2, [r7, #4]
 800726a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d14b      	bne.n	800730a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007278:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007280:	2b03      	cmp	r3, #3
 8007282:	d134      	bne.n	80072ee <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	d919      	bls.n	80072c4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	1ad2      	subs	r2, r2, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d203      	bcs.n	80072b2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	e002      	b.n	80072b8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 ff35 	bl	800812c <USBD_CtlContinueRx>
 80072c2:	e038      	b.n	8007336 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d105      	bne.n	80072e6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 ff32 	bl	8008150 <USBD_CtlSendStatus>
 80072ec:	e023      	b.n	8007336 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072f4:	2b05      	cmp	r3, #5
 80072f6:	d11e      	bne.n	8007336 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f9d8 	bl	80086b8 <USBD_LL_StallEP>
 8007308:	e015      	b.n	8007336 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00d      	beq.n	8007332 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800731c:	2b03      	cmp	r3, #3
 800731e:	d108      	bne.n	8007332 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	7afa      	ldrb	r2, [r7, #11]
 800732a:	4611      	mov	r1, r2
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	4798      	blx	r3
 8007330:	e001      	b.n	8007336 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007332:	2302      	movs	r3, #2
 8007334:	e000      	b.n	8007338 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	460b      	mov	r3, r1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d17f      	bne.n	8007454 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3314      	adds	r3, #20
 8007358:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007360:	2b02      	cmp	r3, #2
 8007362:	d15c      	bne.n	800741e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	429a      	cmp	r2, r3
 800736e:	d915      	bls.n	800739c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	1ad2      	subs	r2, r2, r3
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 febd 	bl	8008108 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800738e:	2300      	movs	r3, #0
 8007390:	2200      	movs	r2, #0
 8007392:	2100      	movs	r1, #0
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f001 fa3b 	bl	8008810 <USBD_LL_PrepareReceive>
 800739a:	e04e      	b.n	800743a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	6912      	ldr	r2, [r2, #16]
 80073a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80073a8:	fb01 f202 	mul.w	r2, r1, r2
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d11c      	bne.n	80073ec <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d316      	bcc.n	80073ec <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d20f      	bcs.n	80073ec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073cc:	2200      	movs	r2, #0
 80073ce:	2100      	movs	r1, #0
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fe99 	bl	8008108 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073de:	2300      	movs	r3, #0
 80073e0:	2200      	movs	r2, #0
 80073e2:	2100      	movs	r1, #0
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f001 fa13 	bl	8008810 <USBD_LL_PrepareReceive>
 80073ea:	e026      	b.n	800743a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d105      	bne.n	800740e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800740e:	2180      	movs	r1, #128	@ 0x80
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f001 f951 	bl	80086b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fead 	bl	8008176 <USBD_CtlReceiveStatus>
 800741c:	e00d      	b.n	800743a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007424:	2b04      	cmp	r3, #4
 8007426:	d004      	beq.n	8007432 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800742e:	2b00      	cmp	r3, #0
 8007430:	d103      	bne.n	800743a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007432:	2180      	movs	r1, #128	@ 0x80
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 f93f 	bl	80086b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007440:	2b01      	cmp	r3, #1
 8007442:	d11d      	bne.n	8007480 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff fe81 	bl	800714c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007452:	e015      	b.n	8007480 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00d      	beq.n	800747c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007466:	2b03      	cmp	r3, #3
 8007468:	d108      	bne.n	800747c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	7afa      	ldrb	r2, [r7, #11]
 8007474:	4611      	mov	r1, r2
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	4798      	blx	r3
 800747a:	e001      	b.n	8007480 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800747c:	2302      	movs	r3, #2
 800747e:	e000      	b.n	8007482 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007492:	2340      	movs	r3, #64	@ 0x40
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 f8c8 	bl	800862e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2240      	movs	r2, #64	@ 0x40
 80074aa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ae:	2340      	movs	r3, #64	@ 0x40
 80074b0:	2200      	movs	r2, #0
 80074b2:	2180      	movs	r1, #128	@ 0x80
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f8ba 	bl	800862e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2240      	movs	r2, #64	@ 0x40
 80074c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d009      	beq.n	8007502 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6852      	ldr	r2, [r2, #4]
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	4611      	mov	r1, r2
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
  }

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr

0800752a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2204      	movs	r2, #4
 8007542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007560:	2b04      	cmp	r3, #4
 8007562:	d105      	bne.n	8007570 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr

0800757c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758a:	2b03      	cmp	r3, #3
 800758c:	d10b      	bne.n	80075a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d005      	beq.n	80075a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075c6:	2b40      	cmp	r3, #64	@ 0x40
 80075c8:	d005      	beq.n	80075d6 <USBD_StdDevReq+0x26>
 80075ca:	2b40      	cmp	r3, #64	@ 0x40
 80075cc:	d84f      	bhi.n	800766e <USBD_StdDevReq+0xbe>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <USBD_StdDevReq+0x36>
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d14b      	bne.n	800766e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
      break;
 80075e4:	e048      	b.n	8007678 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b09      	cmp	r3, #9
 80075ec:	d839      	bhi.n	8007662 <USBD_StdDevReq+0xb2>
 80075ee:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <USBD_StdDevReq+0x44>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007645 	.word	0x08007645
 80075f8:	08007659 	.word	0x08007659
 80075fc:	08007663 	.word	0x08007663
 8007600:	0800764f 	.word	0x0800764f
 8007604:	08007663 	.word	0x08007663
 8007608:	08007627 	.word	0x08007627
 800760c:	0800761d 	.word	0x0800761d
 8007610:	08007663 	.word	0x08007663
 8007614:	0800763b 	.word	0x0800763b
 8007618:	08007631 	.word	0x08007631
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9dc 	bl	80079dc <USBD_GetDescriptor>
          break;
 8007624:	e022      	b.n	800766c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb3f 	bl	8007cac <USBD_SetAddress>
          break;
 800762e:	e01d      	b.n	800766c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fb7e 	bl	8007d34 <USBD_SetConfig>
          break;
 8007638:	e018      	b.n	800766c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fc07 	bl	8007e50 <USBD_GetConfig>
          break;
 8007642:	e013      	b.n	800766c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fc37 	bl	8007eba <USBD_GetStatus>
          break;
 800764c:	e00e      	b.n	800766c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc65 	bl	8007f20 <USBD_SetFeature>
          break;
 8007656:	e009      	b.n	800766c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fc74 	bl	8007f48 <USBD_ClrFeature>
          break;
 8007660:	e004      	b.n	800766c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fcc9 	bl	8007ffc <USBD_CtlError>
          break;
 800766a:	bf00      	nop
      }
      break;
 800766c:	e004      	b.n	8007678 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fcc3 	bl	8007ffc <USBD_CtlError>
      break;
 8007676:	bf00      	nop
  }

  return ret;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop

08007684 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800769a:	2b40      	cmp	r3, #64	@ 0x40
 800769c:	d005      	beq.n	80076aa <USBD_StdItfReq+0x26>
 800769e:	2b40      	cmp	r3, #64	@ 0x40
 80076a0:	d82e      	bhi.n	8007700 <USBD_StdItfReq+0x7c>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <USBD_StdItfReq+0x26>
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d12a      	bne.n	8007700 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076b0:	3b01      	subs	r3, #1
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d81d      	bhi.n	80076f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	889b      	ldrh	r3, [r3, #4]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d813      	bhi.n	80076e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	88db      	ldrh	r3, [r3, #6]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d110      	bne.n	80076fc <USBD_StdItfReq+0x78>
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10d      	bne.n	80076fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fd35 	bl	8008150 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076e6:	e009      	b.n	80076fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fc86 	bl	8007ffc <USBD_CtlError>
          break;
 80076f0:	e004      	b.n	80076fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fc81 	bl	8007ffc <USBD_CtlError>
          break;
 80076fa:	e000      	b.n	80076fe <USBD_StdItfReq+0x7a>
          break;
 80076fc:	bf00      	nop
      }
      break;
 80076fe:	e004      	b.n	800770a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc7a 	bl	8007ffc <USBD_CtlError>
      break;
 8007708:	bf00      	nop
  }

  return USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	889b      	ldrh	r3, [r3, #4]
 8007726:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007730:	2b40      	cmp	r3, #64	@ 0x40
 8007732:	d007      	beq.n	8007744 <USBD_StdEPReq+0x30>
 8007734:	2b40      	cmp	r3, #64	@ 0x40
 8007736:	f200 8146 	bhi.w	80079c6 <USBD_StdEPReq+0x2b2>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <USBD_StdEPReq+0x40>
 800773e:	2b20      	cmp	r3, #32
 8007740:	f040 8141 	bne.w	80079c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
      break;
 8007752:	e13d      	b.n	80079d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800775c:	2b20      	cmp	r3, #32
 800775e:	d10a      	bne.n	8007776 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
 800776e:	4603      	mov	r3, r0
 8007770:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	e12d      	b.n	80079d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b03      	cmp	r3, #3
 800777c:	d007      	beq.n	800778e <USBD_StdEPReq+0x7a>
 800777e:	2b03      	cmp	r3, #3
 8007780:	f300 811b 	bgt.w	80079ba <USBD_StdEPReq+0x2a6>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d072      	beq.n	800786e <USBD_StdEPReq+0x15a>
 8007788:	2b01      	cmp	r3, #1
 800778a:	d03a      	beq.n	8007802 <USBD_StdEPReq+0xee>
 800778c:	e115      	b.n	80079ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007794:	2b02      	cmp	r3, #2
 8007796:	d002      	beq.n	800779e <USBD_StdEPReq+0x8a>
 8007798:	2b03      	cmp	r3, #3
 800779a:	d015      	beq.n	80077c8 <USBD_StdEPReq+0xb4>
 800779c:	e02b      	b.n	80077f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00c      	beq.n	80077be <USBD_StdEPReq+0xaa>
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b80      	cmp	r3, #128	@ 0x80
 80077a8:	d009      	beq.n	80077be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ff82 	bl	80086b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077b4:	2180      	movs	r1, #128	@ 0x80
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 ff7e 	bl	80086b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077bc:	e020      	b.n	8007800 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fc1b 	bl	8007ffc <USBD_CtlError>
              break;
 80077c6:	e01b      	b.n	8007800 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10e      	bne.n	80077ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <USBD_StdEPReq+0xda>
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b80      	cmp	r3, #128	@ 0x80
 80077da:	d008      	beq.n	80077ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	88db      	ldrh	r3, [r3, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 ff65 	bl	80086b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fcae 	bl	8008150 <USBD_CtlSendStatus>

              break;
 80077f4:	e004      	b.n	8007800 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fbff 	bl	8007ffc <USBD_CtlError>
              break;
 80077fe:	bf00      	nop
          }
          break;
 8007800:	e0e0      	b.n	80079c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007808:	2b02      	cmp	r3, #2
 800780a:	d002      	beq.n	8007812 <USBD_StdEPReq+0xfe>
 800780c:	2b03      	cmp	r3, #3
 800780e:	d015      	beq.n	800783c <USBD_StdEPReq+0x128>
 8007810:	e026      	b.n	8007860 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <USBD_StdEPReq+0x11e>
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b80      	cmp	r3, #128	@ 0x80
 800781c:	d009      	beq.n	8007832 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 ff48 	bl	80086b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007828:	2180      	movs	r1, #128	@ 0x80
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 ff44 	bl	80086b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007830:	e01c      	b.n	800786c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fbe1 	bl	8007ffc <USBD_CtlError>
              break;
 800783a:	e017      	b.n	800786c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	885b      	ldrh	r3, [r3, #2]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d112      	bne.n	800786a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 ff4f 	bl	80086f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fc79 	bl	8008150 <USBD_CtlSendStatus>
              }
              break;
 800785e:	e004      	b.n	800786a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fbca 	bl	8007ffc <USBD_CtlError>
              break;
 8007868:	e000      	b.n	800786c <USBD_StdEPReq+0x158>
              break;
 800786a:	bf00      	nop
          }
          break;
 800786c:	e0aa      	b.n	80079c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007874:	2b02      	cmp	r3, #2
 8007876:	d002      	beq.n	800787e <USBD_StdEPReq+0x16a>
 8007878:	2b03      	cmp	r3, #3
 800787a:	d032      	beq.n	80078e2 <USBD_StdEPReq+0x1ce>
 800787c:	e097      	b.n	80079ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <USBD_StdEPReq+0x180>
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b80      	cmp	r3, #128	@ 0x80
 8007888:	d004      	beq.n	8007894 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fbb5 	bl	8007ffc <USBD_CtlError>
                break;
 8007892:	e091      	b.n	80079b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da0b      	bge.n	80078b4 <USBD_StdEPReq+0x1a0>
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	3310      	adds	r3, #16
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	3304      	adds	r3, #4
 80078b2:	e00b      	b.n	80078cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	3304      	adds	r3, #4
 80078cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2202      	movs	r2, #2
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fbf8 	bl	80080d0 <USBD_CtlSendData>
              break;
 80078e0:	e06a      	b.n	80079b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	da11      	bge.n	800790e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	f003 020f 	and.w	r2, r3, #15
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	3318      	adds	r3, #24
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d117      	bne.n	8007934 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fb78 	bl	8007ffc <USBD_CtlError>
                  break;
 800790c:	e054      	b.n	80079b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fb65 	bl	8007ffc <USBD_CtlError>
                  break;
 8007932:	e041      	b.n	80079b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007938:	2b00      	cmp	r3, #0
 800793a:	da0b      	bge.n	8007954 <USBD_StdEPReq+0x240>
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	3310      	adds	r3, #16
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	3304      	adds	r3, #4
 8007952:	e00b      	b.n	800796c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	4413      	add	r3, r2
 800796a:	3304      	adds	r3, #4
 800796c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <USBD_StdEPReq+0x266>
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b80      	cmp	r3, #128	@ 0x80
 8007978:	d103      	bne.n	8007982 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	e00e      	b.n	80079a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fed4 	bl	8008734 <USBD_LL_IsStallEP>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2201      	movs	r2, #1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e002      	b.n	80079a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2202      	movs	r2, #2
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb92 	bl	80080d0 <USBD_CtlSendData>
              break;
 80079ac:	e004      	b.n	80079b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fb23 	bl	8007ffc <USBD_CtlError>
              break;
 80079b6:	bf00      	nop
          }
          break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fb1d 	bl	8007ffc <USBD_CtlError>
          break;
 80079c2:	bf00      	nop
      }
      break;
 80079c4:	e004      	b.n	80079d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fb17 	bl	8007ffc <USBD_CtlError>
      break;
 80079ce:	bf00      	nop
  }

  return ret;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	f200 8128 	bhi.w	8007c52 <USBD_GetDescriptor+0x276>
 8007a02:	a201      	add	r2, pc, #4	@ (adr r2, 8007a08 <USBD_GetDescriptor+0x2c>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a25 	.word	0x08007a25
 8007a0c:	08007a3d 	.word	0x08007a3d
 8007a10:	08007a7d 	.word	0x08007a7d
 8007a14:	08007c53 	.word	0x08007c53
 8007a18:	08007c53 	.word	0x08007c53
 8007a1c:	08007bf3 	.word	0x08007bf3
 8007a20:	08007c1f 	.word	0x08007c1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	7c12      	ldrb	r2, [r2, #16]
 8007a30:	f107 0108 	add.w	r1, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
      break;
 8007a3a:	e112      	b.n	8007c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	7c1b      	ldrb	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10d      	bne.n	8007a60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	f107 0208 	add.w	r2, r7, #8
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a5e:	e100      	b.n	8007c62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a68:	f107 0208 	add.w	r2, r7, #8
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
 8007a70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	2202      	movs	r2, #2
 8007a78:	701a      	strb	r2, [r3, #0]
      break;
 8007a7a:	e0f2      	b.n	8007c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	885b      	ldrh	r3, [r3, #2]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	f200 80ac 	bhi.w	8007be0 <USBD_GetDescriptor+0x204>
 8007a88:	a201      	add	r2, pc, #4	@ (adr r2, 8007a90 <USBD_GetDescriptor+0xb4>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007aa9 	.word	0x08007aa9
 8007a94:	08007add 	.word	0x08007add
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b45 	.word	0x08007b45
 8007aa0:	08007b79 	.word	0x08007b79
 8007aa4:	08007bad 	.word	0x08007bad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7c12      	ldrb	r2, [r2, #16]
 8007ac0:	f107 0108 	add.w	r1, r7, #8
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
 8007ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aca:	e091      	b.n	8007bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa94 	bl	8007ffc <USBD_CtlError>
            err++;
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ada:	e089      	b.n	8007bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 0108 	add.w	r1, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afe:	e077      	b.n	8007bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa7a 	bl	8007ffc <USBD_CtlError>
            err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0e:	e06f      	b.n	8007bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b32:	e05d      	b.n	8007bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa60 	bl	8007ffc <USBD_CtlError>
            err++;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	72fb      	strb	r3, [r7, #11]
          break;
 8007b42:	e055      	b.n	8007bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7c12      	ldrb	r2, [r2, #16]
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b66:	e043      	b.n	8007bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa46 	bl	8007ffc <USBD_CtlError>
            err++;
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	3301      	adds	r3, #1
 8007b74:	72fb      	strb	r3, [r7, #11]
          break;
 8007b76:	e03b      	b.n	8007bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	f107 0108 	add.w	r1, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9a:	e029      	b.n	8007bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa2c 	bl	8007ffc <USBD_CtlError>
            err++;
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8007baa:	e021      	b.n	8007bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	7c12      	ldrb	r2, [r2, #16]
 8007bc4:	f107 0108 	add.w	r1, r7, #8
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
 8007bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bce:	e00f      	b.n	8007bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa12 	bl	8007ffc <USBD_CtlError>
            err++;
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bde:	e007      	b.n	8007bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa0a 	bl	8007ffc <USBD_CtlError>
          err++;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	3301      	adds	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bee:	e038      	b.n	8007c62 <USBD_GetDescriptor+0x286>
 8007bf0:	e037      	b.n	8007c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7c1b      	ldrb	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c02:	f107 0208 	add.w	r2, r7, #8
 8007c06:	4610      	mov	r0, r2
 8007c08:	4798      	blx	r3
 8007c0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c0c:	e029      	b.n	8007c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9f3 	bl	8007ffc <USBD_CtlError>
        err++;
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c1c:	e021      	b.n	8007c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7c1b      	ldrb	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2e:	f107 0208 	add.w	r2, r7, #8
 8007c32:	4610      	mov	r0, r2
 8007c34:	4798      	blx	r3
 8007c36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c40:	e00f      	b.n	8007c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f9d9 	bl	8007ffc <USBD_CtlError>
        err++;
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c50:	e007      	b.n	8007c62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f9d1 	bl	8007ffc <USBD_CtlError>
      err++;
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c60:	bf00      	nop
  }

  if (err != 0U)
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11c      	bne.n	8007ca2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c68:	893b      	ldrh	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <USBD_GetDescriptor+0x2b6>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	88db      	ldrh	r3, [r3, #6]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00d      	beq.n	8007c92 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	88da      	ldrh	r2, [r3, #6]
 8007c7a:	893b      	ldrh	r3, [r7, #8]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	bf28      	it	cs
 8007c80:	4613      	movcs	r3, r2
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c86:	893b      	ldrh	r3, [r7, #8]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68f9      	ldr	r1, [r7, #12]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fa1f 	bl	80080d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa58 	bl	8008150 <USBD_CtlSendStatus>
 8007ca0:	e000      	b.n	8007ca4 <USBD_GetDescriptor+0x2c8>
    return;
 8007ca2:	bf00      	nop
    }
  }
}
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop

08007cac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	889b      	ldrh	r3, [r3, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d130      	bne.n	8007d20 <USBD_SetAddress+0x74>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	88db      	ldrh	r3, [r3, #6]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d12c      	bne.n	8007d20 <USBD_SetAddress+0x74>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ccc:	d828      	bhi.n	8007d20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d104      	bne.n	8007cee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f988 	bl	8007ffc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cec:	e01d      	b.n	8007d2a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	7bfa      	ldrb	r2, [r7, #15]
 8007cf2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fd46 	bl	800878c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fa25 	bl	8008150 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d14:	e009      	b.n	8007d2a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1e:	e004      	b.n	8007d2a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f96a 	bl	8007ffc <USBD_CtlError>
  }
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	4b41      	ldr	r3, [pc, #260]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007d46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d48:	4b40      	ldr	r3, [pc, #256]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d904      	bls.n	8007d5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f952 	bl	8007ffc <USBD_CtlError>
 8007d58:	e075      	b.n	8007e46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d002      	beq.n	8007d6a <USBD_SetConfig+0x36>
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d023      	beq.n	8007db0 <USBD_SetConfig+0x7c>
 8007d68:	e062      	b.n	8007e30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d6a:	4b38      	ldr	r3, [pc, #224]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d01a      	beq.n	8007da8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d72:	4b36      	ldr	r3, [pc, #216]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d84:	4b31      	ldr	r3, [pc, #196]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff f9e8 	bl	8007160 <USBD_SetClassConfig>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d104      	bne.n	8007da0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f92f 	bl	8007ffc <USBD_CtlError>
            return;
 8007d9e:	e052      	b.n	8007e46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f9d5 	bl	8008150 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007da6:	e04e      	b.n	8007e46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f9d1 	bl	8008150 <USBD_CtlSendStatus>
        break;
 8007dae:	e04a      	b.n	8007e46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007db0:	4b26      	ldr	r3, [pc, #152]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d112      	bne.n	8007dde <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007dc0:	4b22      	ldr	r3, [pc, #136]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dca:	4b20      	ldr	r3, [pc, #128]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff f9e4 	bl	800719e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f9ba 	bl	8008150 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ddc:	e033      	b.n	8007e46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007dde:	4b1b      	ldr	r3, [pc, #108]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d01d      	beq.n	8007e28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff f9d2 	bl	800719e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007dfa:	4b14      	ldr	r3, [pc, #80]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e04:	4b11      	ldr	r3, [pc, #68]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff f9a8 	bl	8007160 <USBD_SetClassConfig>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d104      	bne.n	8007e20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8ef 	bl	8007ffc <USBD_CtlError>
            return;
 8007e1e:	e012      	b.n	8007e46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f995 	bl	8008150 <USBD_CtlSendStatus>
        break;
 8007e26:	e00e      	b.n	8007e46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f991 	bl	8008150 <USBD_CtlSendStatus>
        break;
 8007e2e:	e00a      	b.n	8007e46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f8e2 	bl	8007ffc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e38:	4b04      	ldr	r3, [pc, #16]	@ (8007e4c <USBD_SetConfig+0x118>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff f9ad 	bl	800719e <USBD_ClrClassConfig>
        break;
 8007e44:	bf00      	nop
    }
  }
}
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000214 	.word	0x20000214

08007e50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88db      	ldrh	r3, [r3, #6]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d004      	beq.n	8007e6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f8c9 	bl	8007ffc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e6a:	e022      	b.n	8007eb2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	dc02      	bgt.n	8007e7c <USBD_GetConfig+0x2c>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dc03      	bgt.n	8007e82 <USBD_GetConfig+0x32>
 8007e7a:	e015      	b.n	8007ea8 <USBD_GetConfig+0x58>
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetConfig+0x48>
 8007e80:	e012      	b.n	8007ea8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f91d 	bl	80080d0 <USBD_CtlSendData>
        break;
 8007e96:	e00c      	b.n	8007eb2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f915 	bl	80080d0 <USBD_CtlSendData>
        break;
 8007ea6:	e004      	b.n	8007eb2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f8a6 	bl	8007ffc <USBD_CtlError>
        break;
 8007eb0:	bf00      	nop
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d81e      	bhi.n	8007f0e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	88db      	ldrh	r3, [r3, #6]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d004      	beq.n	8007ee2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f88e 	bl	8007ffc <USBD_CtlError>
        break;
 8007ee0:	e01a      	b.n	8007f18 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f043 0202 	orr.w	r2, r3, #2
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	330c      	adds	r3, #12
 8007f02:	2202      	movs	r2, #2
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8e2 	bl	80080d0 <USBD_CtlSendData>
      break;
 8007f0c:	e004      	b.n	8007f18 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f873 	bl	8007ffc <USBD_CtlError>
      break;
 8007f16:	bf00      	nop
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d106      	bne.n	8007f40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f908 	bl	8008150 <USBD_CtlSendStatus>
  }
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d80b      	bhi.n	8007f76 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d10c      	bne.n	8007f80 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f8ee 	bl	8008150 <USBD_CtlSendStatus>
      }
      break;
 8007f74:	e004      	b.n	8007f80 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f83f 	bl	8007ffc <USBD_CtlError>
      break;
 8007f7e:	e000      	b.n	8007f82 <USBD_ClrFeature+0x3a>
      break;
 8007f80:	bf00      	nop
  }
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	785a      	ldrb	r2, [r3, #1]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	3303      	adds	r3, #3
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	3305      	adds	r3, #5
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	3306      	adds	r3, #6
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4413      	add	r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	80da      	strh	r2, [r3, #6]

}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr

08007ffc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008006:	2180      	movs	r1, #128	@ 0x80
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fb55 	bl	80086b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800800e:	2100      	movs	r1, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fb51 	bl	80086b8 <USBD_LL_StallEP>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b086      	sub	sp, #24
 8008022:	af00      	add	r7, sp, #0
 8008024:	60f8      	str	r0, [r7, #12]
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d032      	beq.n	800809a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f834 	bl	80080a2 <USBD_GetLen>
 800803a:	4603      	mov	r3, r0
 800803c:	3301      	adds	r3, #1
 800803e:	b29b      	uxth	r3, r3
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	75fa      	strb	r2, [r7, #23]
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4413      	add	r3, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	75fa      	strb	r2, [r7, #23]
 8008060:	461a      	mov	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	2203      	movs	r2, #3
 8008068:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800806a:	e012      	b.n	8008092 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	60fa      	str	r2, [r7, #12]
 8008072:	7dfa      	ldrb	r2, [r7, #23]
 8008074:	1c51      	adds	r1, r2, #1
 8008076:	75f9      	strb	r1, [r7, #23]
 8008078:	4611      	mov	r1, r2
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	440a      	add	r2, r1
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	75fa      	strb	r2, [r7, #23]
 8008088:	461a      	mov	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e8      	bne.n	800806c <USBD_GetString+0x4e>
    }
  }
}
 800809a:	bf00      	nop
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b085      	sub	sp, #20
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080ae:	e005      	b.n	80080bc <USBD_GetLen+0x1a>
  {
    len++;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	3301      	adds	r3, #1
 80080b4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3301      	adds	r3, #1
 80080ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f5      	bne.n	80080b0 <USBD_GetLen+0xe>
  }

  return len;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr

080080d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80080e6:	88fa      	ldrh	r2, [r7, #6]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080ec:	88fa      	ldrh	r2, [r7, #6]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	2100      	movs	r1, #0
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fb66 	bl	80087ca <USBD_LL_Transmit>

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	2100      	movs	r1, #0
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 fb54 	bl	80087ca <USBD_LL_Transmit>

  return USBD_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	2100      	movs	r1, #0
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 fb65 	bl	8008810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2204      	movs	r2, #4
 800815c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008160:	2300      	movs	r3, #0
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fb2f 	bl	80087ca <USBD_LL_Transmit>

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2205      	movs	r2, #5
 8008182:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008186:	2300      	movs	r3, #0
 8008188:	2200      	movs	r2, #0
 800818a:	2100      	movs	r1, #0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fb3f 	bl	8008810 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081a0:	2200      	movs	r2, #0
 80081a2:	490e      	ldr	r1, [pc, #56]	@ (80081dc <MX_USB_DEVICE_Init+0x40>)
 80081a4:	480e      	ldr	r0, [pc, #56]	@ (80081e0 <MX_USB_DEVICE_Init+0x44>)
 80081a6:	f7fe ff81 	bl	80070ac <USBD_Init>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081b0:	f7f8 f9c8 	bl	8000544 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80081b4:	490b      	ldr	r1, [pc, #44]	@ (80081e4 <MX_USB_DEVICE_Init+0x48>)
 80081b6:	480a      	ldr	r0, [pc, #40]	@ (80081e0 <MX_USB_DEVICE_Init+0x44>)
 80081b8:	f7fe ffa3 	bl	8007102 <USBD_RegisterClass>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081c2:	f7f8 f9bf 	bl	8000544 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081c6:	4806      	ldr	r0, [pc, #24]	@ (80081e0 <MX_USB_DEVICE_Init+0x44>)
 80081c8:	f7fe ffb4 	bl	8007134 <USBD_Start>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80081d2:	f7f8 f9b7 	bl	8000544 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081d6:	bf00      	nop
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	20000108 	.word	0x20000108
 80081e0:	20000218 	.word	0x20000218
 80081e4:	2000000c 	.word	0x2000000c

080081e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2212      	movs	r2, #18
 80081f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081fa:	4b03      	ldr	r3, [pc, #12]	@ (8008208 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000124 	.word	0x20000124

0800820c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2204      	movs	r2, #4
 800821c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800821e:	4b03      	ldr	r3, [pc, #12]	@ (800822c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20000138 	.word	0x20000138

08008230 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d105      	bne.n	800824e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4907      	ldr	r1, [pc, #28]	@ (8008264 <USBD_FS_ProductStrDescriptor+0x34>)
 8008246:	4808      	ldr	r0, [pc, #32]	@ (8008268 <USBD_FS_ProductStrDescriptor+0x38>)
 8008248:	f7ff fee9 	bl	800801e <USBD_GetString>
 800824c:	e004      	b.n	8008258 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	4904      	ldr	r1, [pc, #16]	@ (8008264 <USBD_FS_ProductStrDescriptor+0x34>)
 8008252:	4805      	ldr	r0, [pc, #20]	@ (8008268 <USBD_FS_ProductStrDescriptor+0x38>)
 8008254:	f7ff fee3 	bl	800801e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008258:	4b02      	ldr	r3, [pc, #8]	@ (8008264 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	200004dc 	.word	0x200004dc
 8008268:	08008960 	.word	0x08008960

0800826c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	4904      	ldr	r1, [pc, #16]	@ (800828c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800827c:	4804      	ldr	r0, [pc, #16]	@ (8008290 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800827e:	f7ff fece 	bl	800801e <USBD_GetString>
  return USBD_StrDesc;
 8008282:	4b02      	ldr	r3, [pc, #8]	@ (800828c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200004dc 	.word	0x200004dc
 8008290:	08008978 	.word	0x08008978

08008294 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	221a      	movs	r2, #26
 80082a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082a6:	f000 f843 	bl	8008330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082aa:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	2000013c 	.word	0x2000013c

080082b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d105      	bne.n	80082d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	4907      	ldr	r1, [pc, #28]	@ (80082ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ce:	4808      	ldr	r0, [pc, #32]	@ (80082f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082d0:	f7ff fea5 	bl	800801e <USBD_GetString>
 80082d4:	e004      	b.n	80082e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	4904      	ldr	r1, [pc, #16]	@ (80082ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80082da:	4805      	ldr	r0, [pc, #20]	@ (80082f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082dc:	f7ff fe9f 	bl	800801e <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e0:	4b02      	ldr	r3, [pc, #8]	@ (80082ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	200004dc 	.word	0x200004dc
 80082f0:	0800898c 	.word	0x0800898c

080082f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d105      	bne.n	8008312 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4907      	ldr	r1, [pc, #28]	@ (8008328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800830a:	4808      	ldr	r0, [pc, #32]	@ (800832c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800830c:	f7ff fe87 	bl	800801e <USBD_GetString>
 8008310:	e004      	b.n	800831c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4904      	ldr	r1, [pc, #16]	@ (8008328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008316:	4805      	ldr	r0, [pc, #20]	@ (800832c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008318:	f7ff fe81 	bl	800801e <USBD_GetString>
  }
  return USBD_StrDesc;
 800831c:	4b02      	ldr	r3, [pc, #8]	@ (8008328 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200004dc 	.word	0x200004dc
 800832c:	0800899c 	.word	0x0800899c

08008330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4413      	add	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008344:	2208      	movs	r2, #8
 8008346:	4906      	ldr	r1, [pc, #24]	@ (8008360 <Get_SerialNum+0x30>)
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f80d 	bl	8008368 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800834e:	2204      	movs	r2, #4
 8008350:	4904      	ldr	r1, [pc, #16]	@ (8008364 <Get_SerialNum+0x34>)
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f808 	bl	8008368 <IntToUnicode>
  }
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	2000013e 	.word	0x2000013e
 8008364:	2000014e 	.word	0x2000014e

08008368 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800837a:	2300      	movs	r3, #0
 800837c:	75fb      	strb	r3, [r7, #23]
 800837e:	e027      	b.n	80083d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	0f1b      	lsrs	r3, r3, #28
 8008384:	2b09      	cmp	r3, #9
 8008386:	d80b      	bhi.n	80083a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	0f1b      	lsrs	r3, r3, #28
 800838c:	b2da      	uxtb	r2, r3
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4619      	mov	r1, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	440b      	add	r3, r1
 8008398:	3230      	adds	r2, #48	@ 0x30
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e00a      	b.n	80083b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	0f1b      	lsrs	r3, r3, #28
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4619      	mov	r1, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	440b      	add	r3, r1
 80083b0:	3237      	adds	r2, #55	@ 0x37
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	3301      	adds	r3, #1
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4413      	add	r3, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	3301      	adds	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
 80083d0:	7dfa      	ldrb	r2, [r7, #23]
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d3d3      	bcc.n	8008380 <IntToUnicode+0x18>
  }
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008428 <HAL_PCD_MspInit+0x44>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d113      	bne.n	800841e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083f6:	4b0d      	ldr	r3, [pc, #52]	@ (800842c <HAL_PCD_MspInit+0x48>)
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	4a0c      	ldr	r2, [pc, #48]	@ (800842c <HAL_PCD_MspInit+0x48>)
 80083fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008400:	61d3      	str	r3, [r2, #28]
 8008402:	4b0a      	ldr	r3, [pc, #40]	@ (800842c <HAL_PCD_MspInit+0x48>)
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800840e:	2200      	movs	r2, #0
 8008410:	2100      	movs	r1, #0
 8008412:	2014      	movs	r0, #20
 8008414:	f7f8 faf5 	bl	8000a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008418:	2014      	movs	r0, #20
 800841a:	f7f8 fb0e 	bl	8000a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800841e:	bf00      	nop
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40005c00 	.word	0x40005c00
 800842c:	40021000 	.word	0x40021000

08008430 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7fe febc 	bl	80071c4 <USBD_LL_SetupStage>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	440b      	add	r3, r1
 8008474:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	4619      	mov	r1, r3
 800847e:	f7fe feee 	bl	800725e <USBD_LL_DataOutStage>
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	440b      	add	r3, r1
 80084aa:	333c      	adds	r3, #60	@ 0x3c
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f7fe ff45 	bl	8007340 <USBD_LL_DataInStage>
}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff f855 	bl	800757c <USBD_LL_SOF>
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d001      	beq.n	80084f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084ee:	f7f8 f829 	bl	8000544 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff f805 	bl	800750c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe ffbe 	bl	800748a <USBD_LL_Reset>
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe ffff 	bl	800752a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008534:	4b04      	ldr	r3, [pc, #16]	@ (8008548 <HAL_PCD_SuspendCallback+0x30>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	4a03      	ldr	r2, [pc, #12]	@ (8008548 <HAL_PCD_SuspendCallback+0x30>)
 800853a:	f043 0306 	orr.w	r3, r3, #6
 800853e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	e000ed00 	.word	0xe000ed00

0800854c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fff9 	bl	8007552 <USBD_LL_Resume>
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008570:	4a1f      	ldr	r2, [pc, #124]	@ (80085f0 <USBD_LL_Init+0x88>)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a1d      	ldr	r2, [pc, #116]	@ (80085f0 <USBD_LL_Init+0x88>)
 800857c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008580:	4b1b      	ldr	r3, [pc, #108]	@ (80085f0 <USBD_LL_Init+0x88>)
 8008582:	4a1c      	ldr	r2, [pc, #112]	@ (80085f4 <USBD_LL_Init+0x8c>)
 8008584:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008586:	4b1a      	ldr	r3, [pc, #104]	@ (80085f0 <USBD_LL_Init+0x88>)
 8008588:	2208      	movs	r2, #8
 800858a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800858c:	4b18      	ldr	r3, [pc, #96]	@ (80085f0 <USBD_LL_Init+0x88>)
 800858e:	2202      	movs	r2, #2
 8008590:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008592:	4b17      	ldr	r3, [pc, #92]	@ (80085f0 <USBD_LL_Init+0x88>)
 8008594:	2200      	movs	r2, #0
 8008596:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008598:	4b15      	ldr	r3, [pc, #84]	@ (80085f0 <USBD_LL_Init+0x88>)
 800859a:	2200      	movs	r2, #0
 800859c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800859e:	4b14      	ldr	r3, [pc, #80]	@ (80085f0 <USBD_LL_Init+0x88>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085a4:	4812      	ldr	r0, [pc, #72]	@ (80085f0 <USBD_LL_Init+0x88>)
 80085a6:	f7f8 fcc8 	bl	8000f3a <HAL_PCD_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085b0:	f7f7 ffc8 	bl	8000544 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085ba:	2318      	movs	r3, #24
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	f7fa f9cf 	bl	8002962 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085ca:	2358      	movs	r3, #88	@ 0x58
 80085cc:	2200      	movs	r2, #0
 80085ce:	2180      	movs	r1, #128	@ 0x80
 80085d0:	f7fa f9c7 	bl	8002962 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085de:	2200      	movs	r2, #0
 80085e0:	2181      	movs	r1, #129	@ 0x81
 80085e2:	f7fa f9be 	bl	8002962 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	200006dc 	.word	0x200006dc
 80085f4:	40005c00 	.word	0x40005c00

080085f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800860e:	4618      	mov	r0, r3
 8008610:	f7f8 fd92 	bl	8001138 <HAL_PCD_Start>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f93c 	bl	8008898 <USBD_Get_USB_Status>
 8008620:	4603      	mov	r3, r0
 8008622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008624:	7bbb      	ldrb	r3, [r7, #14]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	461a      	mov	r2, r3
 800863c:	4603      	mov	r3, r0
 800863e:	70fb      	strb	r3, [r7, #3]
 8008640:	460b      	mov	r3, r1
 8008642:	70bb      	strb	r3, [r7, #2]
 8008644:	4613      	mov	r3, r2
 8008646:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008656:	78bb      	ldrb	r3, [r7, #2]
 8008658:	883a      	ldrh	r2, [r7, #0]
 800865a:	78f9      	ldrb	r1, [r7, #3]
 800865c:	f7f8 fee7 	bl	800142e <HAL_PCD_EP_Open>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f916 	bl	8008898 <USBD_Get_USB_Status>
 800866c:	4603      	mov	r3, r0
 800866e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008670:	7bbb      	ldrb	r3, [r7, #14]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008694:	78fa      	ldrb	r2, [r7, #3]
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f7f8 ff25 	bl	80014e8 <HAL_PCD_EP_Close>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f8f7 	bl	8008898 <USBD_Get_USB_Status>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f8 ffb6 	bl	8001648 <HAL_PCD_EP_SetStall>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f8d8 	bl	8008898 <USBD_Get_USB_Status>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	460b      	mov	r3, r1
 8008700:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f7f8 fff7 	bl	8001708 <HAL_PCD_EP_ClrStall>
 800871a:	4603      	mov	r3, r0
 800871c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f8b9 	bl	8008898 <USBD_Get_USB_Status>
 8008726:	4603      	mov	r3, r0
 8008728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872a:	7bbb      	ldrb	r3, [r7, #14]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008746:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800874c:	2b00      	cmp	r3, #0
 800874e:	da0c      	bge.n	800876a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	440b      	add	r3, r1
 8008764:	3302      	adds	r3, #2
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	e00b      	b.n	8008782 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	440b      	add	r3, r1
 800877c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008780:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	bc80      	pop	{r7}
 800878a:	4770      	bx	lr

0800878c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087a6:	78fa      	ldrb	r2, [r7, #3]
 80087a8:	4611      	mov	r1, r2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f8 fe1a 	bl	80013e4 <HAL_PCD_SetAddress>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f86e 	bl	8008898 <USBD_Get_USB_Status>
 80087bc:	4603      	mov	r3, r0
 80087be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b086      	sub	sp, #24
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	461a      	mov	r2, r3
 80087d6:	460b      	mov	r3, r1
 80087d8:	72fb      	strb	r3, [r7, #11]
 80087da:	4613      	mov	r3, r2
 80087dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	7af9      	ldrb	r1, [r7, #11]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	f7f8 fef2 	bl	80015da <HAL_PCD_EP_Transmit>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 f84b 	bl	8008898 <USBD_Get_USB_Status>
 8008802:	4603      	mov	r3, r0
 8008804:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008806:	7dbb      	ldrb	r3, [r7, #22]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	607a      	str	r2, [r7, #4]
 800881a:	461a      	mov	r2, r3
 800881c:	460b      	mov	r3, r1
 800881e:	72fb      	strb	r3, [r7, #11]
 8008820:	4613      	mov	r3, r2
 8008822:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008832:	893b      	ldrh	r3, [r7, #8]
 8008834:	7af9      	ldrb	r1, [r7, #11]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	f7f8 fe9e 	bl	8001578 <HAL_PCD_EP_Receive>
 800883c:	4603      	mov	r3, r0
 800883e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f828 	bl	8008898 <USBD_Get_USB_Status>
 8008848:	4603      	mov	r3, r0
 800884a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800884c:	7dbb      	ldrb	r3, [r7, #22]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008860:	4b02      	ldr	r3, [pc, #8]	@ (800886c <USBD_static_malloc+0x14>)
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr
 800886c:	200009cc 	.word	0x200009cc

08008870 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr

08008882 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr

08008898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	d817      	bhi.n	80088dc <USBD_Get_USB_Status+0x44>
 80088ac:	a201      	add	r2, pc, #4	@ (adr r2, 80088b4 <USBD_Get_USB_Status+0x1c>)
 80088ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b2:	bf00      	nop
 80088b4:	080088c5 	.word	0x080088c5
 80088b8:	080088cb 	.word	0x080088cb
 80088bc:	080088d1 	.word	0x080088d1
 80088c0:	080088d7 	.word	0x080088d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
    break;
 80088c8:	e00b      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088ca:	2302      	movs	r3, #2
 80088cc:	73fb      	strb	r3, [r7, #15]
    break;
 80088ce:	e008      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
    break;
 80088d4:	e005      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088d6:	2302      	movs	r3, #2
 80088d8:	73fb      	strb	r3, [r7, #15]
    break;
 80088da:	e002      	b.n	80088e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088dc:	2302      	movs	r3, #2
 80088de:	73fb      	strb	r3, [r7, #15]
    break;
 80088e0:	bf00      	nop
  }
  return usb_status;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop

080088f0 <memset>:
 80088f0:	4603      	mov	r3, r0
 80088f2:	4402      	add	r2, r0
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d100      	bne.n	80088fa <memset+0xa>
 80088f8:	4770      	bx	lr
 80088fa:	f803 1b01 	strb.w	r1, [r3], #1
 80088fe:	e7f9      	b.n	80088f4 <memset+0x4>

08008900 <__libc_init_array>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	2600      	movs	r6, #0
 8008904:	4d0c      	ldr	r5, [pc, #48]	@ (8008938 <__libc_init_array+0x38>)
 8008906:	4c0d      	ldr	r4, [pc, #52]	@ (800893c <__libc_init_array+0x3c>)
 8008908:	1b64      	subs	r4, r4, r5
 800890a:	10a4      	asrs	r4, r4, #2
 800890c:	42a6      	cmp	r6, r4
 800890e:	d109      	bne.n	8008924 <__libc_init_array+0x24>
 8008910:	f000 f81a 	bl	8008948 <_init>
 8008914:	2600      	movs	r6, #0
 8008916:	4d0a      	ldr	r5, [pc, #40]	@ (8008940 <__libc_init_array+0x40>)
 8008918:	4c0a      	ldr	r4, [pc, #40]	@ (8008944 <__libc_init_array+0x44>)
 800891a:	1b64      	subs	r4, r4, r5
 800891c:	10a4      	asrs	r4, r4, #2
 800891e:	42a6      	cmp	r6, r4
 8008920:	d105      	bne.n	800892e <__libc_init_array+0x2e>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	f855 3b04 	ldr.w	r3, [r5], #4
 8008928:	4798      	blx	r3
 800892a:	3601      	adds	r6, #1
 800892c:	e7ee      	b.n	800890c <__libc_init_array+0xc>
 800892e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008932:	4798      	blx	r3
 8008934:	3601      	adds	r6, #1
 8008936:	e7f2      	b.n	800891e <__libc_init_array+0x1e>
 8008938:	080089d8 	.word	0x080089d8
 800893c:	080089d8 	.word	0x080089d8
 8008940:	080089d8 	.word	0x080089d8
 8008944:	080089dc 	.word	0x080089dc

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
