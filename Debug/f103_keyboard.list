
f103_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080087f8  080087f8  000097f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008870  08008870  0000a158  2**0
                  CONTENTS
  4 .ARM          00000000  08008870  08008870  0000a158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008870  08008870  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008870  08008870  00009870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008874  08008874  00009874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08008878  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20000158  080089d0  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  080089d0  0000a9e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141ee  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003301  00000000  00000000  0001e36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00021670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de9  00000000  00000000  00022888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b9  00000000  00000000  00023671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d4c  00000000  00000000  0003d82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee5d  00000000  00000000  00055576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e43d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b04  00000000  00000000  000e4418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e8f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	080087e0 	.word	0x080087e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	080087e0 	.word	0x080087e0

0800014c <GetPointerData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ----------------------- 获取键位 ------------------------*/
static void GetPointerData(uint8_t *pbuf)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  //   for (int i = 0; i < 8; i++) {
  //     pbuf[i] = 0;
  //   }
  // }
  // 清空报告缓冲区（8字节全0）
  memset(pbuf, 0, 8);
 8000154:	2208      	movs	r2, #8
 8000156:	2100      	movs	r1, #0
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f008 fb15 	bl	8008788 <memset>
  
  // 检测KEY0按下（假设按下为低电平）
  if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == 1) {
 800015e:	2102      	movs	r1, #2
 8000160:	4806      	ldr	r0, [pc, #24]	@ (800017c <GetPointerData+0x30>)
 8000162:	f000 fe1f 	bl	8000da4 <HAL_GPIO_ReadPin>
 8000166:	4603      	mov	r3, r0
 8000168:	2b01      	cmp	r3, #1
 800016a:	d103      	bne.n	8000174 <GetPointerData+0x28>
    pbuf[2] = 0x1D;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3302      	adds	r3, #2
 8000170:	221d      	movs	r2, #29
 8000172:	701a      	strb	r2, [r3, #0]
    // HAL_Delay(20); // 简单去抖动（需确保不影响USB响应）
  }
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	40010800 	.word	0x40010800

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000184:	f000 fa68 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000188:	f000 f810 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018c:	f000 f8de 	bl	800034c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000190:	f000 f8b2 	bl	80002f8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000194:	f007 ff4e 	bl	8008034 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000198:	f000 f862 	bl	8000260 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800019c:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <main+0x28>)
 800019e:	f003 f885 	bl	80032ac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a2:	bf00      	nop
 80001a4:	e7fd      	b.n	80001a2 <main+0x22>
 80001a6:	bf00      	nop
 80001a8:	20000174 	.word	0x20000174

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b094      	sub	sp, #80	@ 0x50
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001b6:	2228      	movs	r2, #40	@ 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f008 fae4 	bl	8008788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	f107 0314 	add.w	r3, r7, #20
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
 80001ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fb3c 	bl	8002880 <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800020e:	f000 f8fd 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000222:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fda8 	bl	8002d84 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023a:	f000 f8e7 	bl	800040c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800023e:	2310      	movs	r3, #16
 8000240:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000242:	2300      	movs	r3, #0
 8000244:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f002 ff29 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000254:	f000 f8da 	bl	800040c <Error_Handler>
  }
}
 8000258:	bf00      	nop
 800025a:	3750      	adds	r7, #80	@ 0x50
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000274:	463b      	mov	r3, r7
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800027c:	4b1d      	ldr	r3, [pc, #116]	@ (80002f4 <MX_TIM2_Init+0x94>)
 800027e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000284:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <MX_TIM2_Init+0x94>)
 8000286:	2247      	movs	r2, #71	@ 0x47
 8000288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800028a:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <MX_TIM2_Init+0x94>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000290:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <MX_TIM2_Init+0x94>)
 8000292:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000298:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <MX_TIM2_Init+0x94>)
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800029e:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <MX_TIM2_Init+0x94>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002a4:	4813      	ldr	r0, [pc, #76]	@ (80002f4 <MX_TIM2_Init+0x94>)
 80002a6:	f002 ffb1 	bl	800320c <HAL_TIM_Base_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002b0:	f000 f8ac 	bl	800040c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ba:	f107 0308 	add.w	r3, r7, #8
 80002be:	4619      	mov	r1, r3
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <MX_TIM2_Init+0x94>)
 80002c2:	f003 f94d 	bl	8003560 <HAL_TIM_ConfigClockSource>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002cc:	f000 f89e 	bl	800040c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d0:	2300      	movs	r3, #0
 80002d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	4619      	mov	r1, r3
 80002dc:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_TIM2_Init+0x94>)
 80002de:	f003 fb23 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002e8:	f000 f890 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000174 	.word	0x20000174

080002f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	@ (8000348 <MX_USART1_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000304:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000330:	f003 fb6a 	bl	8003a08 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f867 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200001bc 	.word	0x200001bc
 8000348:	40013800 	.word	0x40013800

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <MX_GPIO_Init+0x64>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a12      	ldr	r2, [pc, #72]	@ (80003b0 <MX_GPIO_Init+0x64>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_GPIO_Init+0x64>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b0d      	ldr	r3, [pc, #52]	@ (80003b0 <MX_GPIO_Init+0x64>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a0c      	ldr	r2, [pc, #48]	@ (80003b0 <MX_GPIO_Init+0x64>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <MX_GPIO_Init+0x64>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000390:	2302      	movs	r3, #2
 8000392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  // GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000398:	2302      	movs	r3, #2
 800039a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800039c:	f107 0308 	add.w	r3, r7, #8
 80003a0:	4619      	mov	r1, r3
 80003a2:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <MX_GPIO_Init+0x68>)
 80003a4:	f000 fb7a 	bl	8000a9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800

080003b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* --------------------------- 定时器中断 ------------------------------------------*/
  static volatile uint32_t counter = 0;
    if (htim->Instance == TIM2)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003c8:	d115      	bne.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      // 每10ms执行一次PC的轮询回应
      if(counter++ == USBD_HID_GetPollingInterval(&hUsbDeviceFS))
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003cc:	681c      	ldr	r4, [r3, #0]
 80003ce:	1c63      	adds	r3, r4, #1
 80003d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000400 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003d2:	6013      	str	r3, [r2, #0]
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80003d6:	f006 fd4d 	bl	8006e74 <USBD_HID_GetPollingInterval>
 80003da:	4603      	mov	r3, r0
 80003dc:	429c      	cmp	r4, r3
 80003de:	d10a      	bne.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
        GetPointerData(HID_Buffer);
 80003e0:	4809      	ldr	r0, [pc, #36]	@ (8000408 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80003e2:	f7ff feb3 	bl	800014c <GetPointerData>
        USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80003e6:	2208      	movs	r2, #8
 80003e8:	4907      	ldr	r1, [pc, #28]	@ (8000408 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80003ea:	4806      	ldr	r0, [pc, #24]	@ (8000404 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80003ec:	f006 fd20 	bl	8006e30 <USBD_HID_SendReport>
        counter = 0;
 80003f0:	4b03      	ldr	r3, [pc, #12]	@ (8000400 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
      }
    }
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd90      	pop	{r4, r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000020c 	.word	0x2000020c
 8000404:	20000218 	.word	0x20000218
 8000408:	20000204 	.word	0x20000204

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <Error_Handler+0x8>

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	@ (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800048c:	d113      	bne.n	80004b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <HAL_TIM_Base_MspInit+0x44>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <HAL_TIM_Base_MspInit+0x44>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <HAL_TIM_Base_MspInit+0x44>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	201c      	movs	r0, #28
 80004ac:	f000 fa0d 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004b0:	201c      	movs	r0, #28
 80004b2:	f000 fa26 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a20      	ldr	r2, [pc, #128]	@ (8000560 <HAL_UART_MspInit+0x9c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d139      	bne.n	8000558 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <HAL_UART_MspInit+0xa0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000564 <HAL_UART_MspInit+0xa0>)
 80004ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <HAL_UART_MspInit+0xa0>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <HAL_UART_MspInit+0xa0>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a18      	ldr	r2, [pc, #96]	@ (8000564 <HAL_UART_MspInit+0xa0>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <HAL_UART_MspInit+0xa0>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000514:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	480f      	ldr	r0, [pc, #60]	@ (8000568 <HAL_UART_MspInit+0xa4>)
 800052a:	f000 fab7 	bl	8000a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800052e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4809      	ldr	r0, [pc, #36]	@ (8000568 <HAL_UART_MspInit+0xa4>)
 8000544:	f000 faaa 	bl	8000a9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2100      	movs	r1, #0
 800054c:	2025      	movs	r0, #37	@ 0x25
 800054e:	f000 f9bc 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000552:	2025      	movs	r0, #37	@ 0x25
 8000554:	f000 f9d5 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013800 	.word	0x40013800
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <NMI_Handler+0x4>

08000574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <MemManage_Handler+0x4>

08000584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <UsageFault_Handler+0x4>

08000594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f892 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005c8:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ca:	f000 fd27 	bl	800101c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200006dc 	.word	0x200006dc

080005d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005dc:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <TIM2_IRQHandler+0x10>)
 80005de:	f002 feb7 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000174 	.word	0x20000174

080005ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005f0:	4802      	ldr	r0, [pc, #8]	@ (80005fc <USART1_IRQHandler+0x10>)
 80005f2:	f003 fa59 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200001bc 	.word	0x200001bc

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800060c:	f7ff fff8 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480b      	ldr	r0, [pc, #44]	@ (8000640 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000612:	490c      	ldr	r1, [pc, #48]	@ (8000644 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000614:	4a0c      	ldr	r2, [pc, #48]	@ (8000648 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a09      	ldr	r2, [pc, #36]	@ (800064c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000628:	4c09      	ldr	r4, [pc, #36]	@ (8000650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000636:	f008 f8af 	bl	8008798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fda1 	bl	8000180 <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000648:	08008878 	.word	0x08008878
  ldr r2, =_sbss
 800064c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000650:	200009e0 	.word	0x200009e0

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f923 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	200f      	movs	r0, #15
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff fed0 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f93b 	bl	800091e <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f903 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	@ (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	@ (8000704 <HAL_IncTick+0x20>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	20000008 	.word	0x20000008
 8000704:	20000210 	.word	0x20000210

08000708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	@ (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000210 	.word	0x20000210

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0b      	blt.n	80007aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4906      	ldr	r1, [pc, #24]	@ (80007b4 <__NVIC_EnableIRQ+0x34>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	@ (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	@ (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	@ 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff90 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff2d 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff42 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff35 	bl	8000780 <__NVIC_EnableIRQ>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffa2 	bl	8000870 <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000936:	b480      	push	{r7}
 8000938:	b085      	sub	sp, #20
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b02      	cmp	r3, #2
 800094c:	d008      	beq.n	8000960 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2204      	movs	r2, #4
 8000952:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e020      	b.n	80009a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 020e 	bic.w	r2, r2, #14
 800096e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0201 	bic.w	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000988:	2101      	movs	r1, #1
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d005      	beq.n	80009d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2204      	movs	r2, #4
 80009c8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e051      	b.n	8000a74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 020e 	bic.w	r2, r2, #14
 80009de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0201 	bic.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <HAL_DMA_Abort_IT+0xd4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d029      	beq.n	8000a4e <HAL_DMA_Abort_IT+0xa2>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a21      	ldr	r2, [pc, #132]	@ (8000a84 <HAL_DMA_Abort_IT+0xd8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d022      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x9e>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1f      	ldr	r2, [pc, #124]	@ (8000a88 <HAL_DMA_Abort_IT+0xdc>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d01a      	beq.n	8000a44 <HAL_DMA_Abort_IT+0x98>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <HAL_DMA_Abort_IT+0xe0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d012      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x92>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <HAL_DMA_Abort_IT+0xe4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00a      	beq.n	8000a38 <HAL_DMA_Abort_IT+0x8c>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <HAL_DMA_Abort_IT+0xe8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d102      	bne.n	8000a32 <HAL_DMA_Abort_IT+0x86>
 8000a2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a30:	e00e      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a36:	e00b      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a3c:	e008      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a42:	e005      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a48:	e002      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	e000      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4a11      	ldr	r2, [pc, #68]	@ (8000a98 <HAL_DMA_Abort_IT+0xec>)
 8000a52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	4798      	blx	r3
    } 
  }
  return status;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020008 	.word	0x40020008
 8000a84:	4002001c 	.word	0x4002001c
 8000a88:	40020030 	.word	0x40020030
 8000a8c:	40020044 	.word	0x40020044
 8000a90:	40020058 	.word	0x40020058
 8000a94:	4002006c 	.word	0x4002006c
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b08b      	sub	sp, #44	@ 0x2c
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	e169      	b.n	8000d84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f040 8158 	bne.w	8000d7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4a9a      	ldr	r2, [pc, #616]	@ (8000d3c <HAL_GPIO_Init+0x2a0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d05e      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a98      	ldr	r2, [pc, #608]	@ (8000d3c <HAL_GPIO_Init+0x2a0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d875      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000ade:	4a98      	ldr	r2, [pc, #608]	@ (8000d40 <HAL_GPIO_Init+0x2a4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d058      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a96      	ldr	r2, [pc, #600]	@ (8000d40 <HAL_GPIO_Init+0x2a4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d86f      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000aea:	4a96      	ldr	r2, [pc, #600]	@ (8000d44 <HAL_GPIO_Init+0x2a8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d052      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000af0:	4a94      	ldr	r2, [pc, #592]	@ (8000d44 <HAL_GPIO_Init+0x2a8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d869      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000af6:	4a94      	ldr	r2, [pc, #592]	@ (8000d48 <HAL_GPIO_Init+0x2ac>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d04c      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000afc:	4a92      	ldr	r2, [pc, #584]	@ (8000d48 <HAL_GPIO_Init+0x2ac>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d863      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b02:	4a92      	ldr	r2, [pc, #584]	@ (8000d4c <HAL_GPIO_Init+0x2b0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d046      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000b08:	4a90      	ldr	r2, [pc, #576]	@ (8000d4c <HAL_GPIO_Init+0x2b0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d85d      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b0e:	2b12      	cmp	r3, #18
 8000b10:	d82a      	bhi.n	8000b68 <HAL_GPIO_Init+0xcc>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d859      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b16:	a201      	add	r2, pc, #4	@ (adr r2, 8000b1c <HAL_GPIO_Init+0x80>)
 8000b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1c:	08000b97 	.word	0x08000b97
 8000b20:	08000b71 	.word	0x08000b71
 8000b24:	08000b83 	.word	0x08000b83
 8000b28:	08000bc5 	.word	0x08000bc5
 8000b2c:	08000bcb 	.word	0x08000bcb
 8000b30:	08000bcb 	.word	0x08000bcb
 8000b34:	08000bcb 	.word	0x08000bcb
 8000b38:	08000bcb 	.word	0x08000bcb
 8000b3c:	08000bcb 	.word	0x08000bcb
 8000b40:	08000bcb 	.word	0x08000bcb
 8000b44:	08000bcb 	.word	0x08000bcb
 8000b48:	08000bcb 	.word	0x08000bcb
 8000b4c:	08000bcb 	.word	0x08000bcb
 8000b50:	08000bcb 	.word	0x08000bcb
 8000b54:	08000bcb 	.word	0x08000bcb
 8000b58:	08000bcb 	.word	0x08000bcb
 8000b5c:	08000bcb 	.word	0x08000bcb
 8000b60:	08000b79 	.word	0x08000b79
 8000b64:	08000b8d 	.word	0x08000b8d
 8000b68:	4a79      	ldr	r2, [pc, #484]	@ (8000d50 <HAL_GPIO_Init+0x2b4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d013      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b6e:	e02c      	b.n	8000bca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e029      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e024      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	3308      	adds	r3, #8
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e01f      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	330c      	adds	r3, #12
 8000b92:	623b      	str	r3, [r7, #32]
          break;
 8000b94:	e01a      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e013      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d105      	bne.n	8000bb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	611a      	str	r2, [r3, #16]
          break;
 8000bb6:	e009      	b.n	8000bcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	615a      	str	r2, [r3, #20]
          break;
 8000bc2:	e003      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e000      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          break;
 8000bca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2bff      	cmp	r3, #255	@ 0xff
 8000bd0:	d801      	bhi.n	8000bd6 <HAL_GPIO_Init+0x13a>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	e001      	b.n	8000bda <HAL_GPIO_Init+0x13e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2bff      	cmp	r3, #255	@ 0xff
 8000be0:	d802      	bhi.n	8000be8 <HAL_GPIO_Init+0x14c>
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x152>
 8000be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bea:	3b08      	subs	r3, #8
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	6a39      	ldr	r1, [r7, #32]
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80b1 	beq.w	8000d7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a4c      	ldr	r2, [pc, #304]	@ (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c34:	4a48      	ldr	r2, [pc, #288]	@ (8000d58 <HAL_GPIO_Init+0x2bc>)
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a40      	ldr	r2, [pc, #256]	@ (8000d5c <HAL_GPIO_Init+0x2c0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d013      	beq.n	8000c88 <HAL_GPIO_Init+0x1ec>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3f      	ldr	r2, [pc, #252]	@ (8000d60 <HAL_GPIO_Init+0x2c4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00d      	beq.n	8000c84 <HAL_GPIO_Init+0x1e8>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d64 <HAL_GPIO_Init+0x2c8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x1e4>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3d      	ldr	r2, [pc, #244]	@ (8000d68 <HAL_GPIO_Init+0x2cc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_Init+0x1e0>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9a:	492f      	ldr	r1, [pc, #188]	@ (8000d58 <HAL_GPIO_Init+0x2bc>)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	492c      	ldr	r1, [pc, #176]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4928      	ldr	r1, [pc, #160]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cdc:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	4922      	ldr	r1, [pc, #136]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	491e      	ldr	r1, [pc, #120]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d04:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4918      	ldr	r1, [pc, #96]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4914      	ldr	r1, [pc, #80]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d021      	beq.n	8000d70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	490e      	ldr	r1, [pc, #56]	@ (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
 8000d38:	e021      	b.n	8000d7e <HAL_GPIO_Init+0x2e2>
 8000d3a:	bf00      	nop
 8000d3c:	10320000 	.word	0x10320000
 8000d40:	10310000 	.word	0x10310000
 8000d44:	10220000 	.word	0x10220000
 8000d48:	10210000 	.word	0x10210000
 8000d4c:	10120000 	.word	0x10120000
 8000d50:	10110000 	.word	0x10110000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40011000 	.word	0x40011000
 8000d68:	40011400 	.word	0x40011400
 8000d6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_GPIO_Init+0x304>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4909      	ldr	r1, [pc, #36]	@ (8000da0 <HAL_GPIO_Init+0x304>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	3301      	adds	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f47f ae8e 	bne.w	8000ab0 <HAL_GPIO_Init+0x14>
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	372c      	adds	r7, #44	@ 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd4:	b08b      	sub	sp, #44	@ 0x2c
 8000dd6:	af06      	add	r7, sp, #24
 8000dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e0f1      	b.n	8000fc8 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d106      	bne.n	8000dfe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f007 fa3f 	bl	800827c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fb54 	bl	80044b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	687e      	ldr	r6, [r7, #4]
 8000e18:	466d      	mov	r5, sp
 8000e1a:	f106 0410 	add.w	r4, r6, #16
 8000e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	602b      	str	r3, [r5, #0]
 8000e26:	1d33      	adds	r3, r6, #4
 8000e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	f003 fb1e 	bl	800446c <USB_CoreInit>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e0c2      	b.n	8000fc8 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fb4f 	bl	80044ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e040      	b.n	8000ed6 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	440b      	add	r3, r1
 8000e64:	3301      	adds	r3, #1
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	440b      	add	r3, r1
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3303      	adds	r3, #3
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e94:	7bfa      	ldrb	r2, [r7, #15]
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3338      	adds	r3, #56	@ 0x38
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	333c      	adds	r3, #60	@ 0x3c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	440b      	add	r3, r1
 8000eca:	3340      	adds	r3, #64	@ 0x40
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d3b9      	bcc.n	8000e54 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e044      	b.n	8000f70 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ee6:	7bfa      	ldrb	r2, [r7, #15]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	440b      	add	r3, r1
 8000f36:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	440b      	add	r3, r1
 8000f62:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3b5      	bcc.n	8000ee6 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	687e      	ldr	r6, [r7, #4]
 8000f82:	466d      	mov	r5, sp
 8000f84:	f106 0410 	add.w	r4, r6, #16
 8000f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	602b      	str	r3, [r5, #0]
 8000f90:	1d33      	adds	r3, r6, #4
 8000f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f003 fab5 	bl	8004504 <USB_DevInit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e00d      	b.n	8000fc8 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 fd36 	bl	8006a32 <USB_DevDisconnect>

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HAL_PCD_Start+0x16>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e016      	b.n	8001014 <HAL_PCD_Start+0x44>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fa4a 	bl	800448c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f007 fb8d 	bl	800871a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fd0a 	bl	8006a1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fd0c 	bl	8006a46 <USB_ReadInterrupts>
 800102e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fb04 	bl	8001648 <PCD_EP_ISR_Handler>

    return;
 8001040:	e119      	b.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800105e:	b292      	uxth	r2, r2
 8001060:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f007 f984 	bl	8008372 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800106a:	2100      	movs	r1, #0
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f905 	bl	800127c <HAL_PCD_SetAddress>

    return;
 8001072:	e100      	b.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00c      	beq.n	8001098 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001090:	b292      	uxth	r2, r2
 8001092:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001096:	e0ee      	b.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00c      	beq.n	80010bc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010b4:	b292      	uxth	r2, r2
 80010b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010ba:	e0dc      	b.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d027      	beq.n	8001116 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0204 	bic.w	r2, r2, #4
 80010d8:	b292      	uxth	r2, r2
 80010da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0208 	bic.w	r2, r2, #8
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f007 f974 	bl	80083e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800110e:	b292      	uxth	r2, r2
 8001110:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001114:	e0af      	b.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8083 	beq.w	8001228 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	77fb      	strb	r3, [r7, #31]
 8001126:	e010      	b.n	800114a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	7ffb      	ldrb	r3, [r7, #31]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	441a      	add	r2, r3
 8001134:	7ffb      	ldrb	r3, [r7, #31]
 8001136:	8812      	ldrh	r2, [r2, #0]
 8001138:	b292      	uxth	r2, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3320      	adds	r3, #32
 800113e:	443b      	add	r3, r7
 8001140:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	3301      	adds	r3, #1
 8001148:	77fb      	strb	r3, [r7, #31]
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	2b07      	cmp	r3, #7
 800114e:	d9eb      	bls.n	8001128 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	b292      	uxth	r2, r2
 8001164:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	b292      	uxth	r2, r2
 800117c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001180:	bf00      	nop
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800118a:	b29b      	uxth	r3, r3
 800118c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f6      	beq.n	8001182 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011a6:	b292      	uxth	r2, r2
 80011a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	77fb      	strb	r3, [r7, #31]
 80011b0:	e00f      	b.n	80011d2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4611      	mov	r1, r2
 80011ba:	7ffa      	ldrb	r2, [r7, #31]
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	440a      	add	r2, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	3320      	adds	r3, #32
 80011c4:	443b      	add	r3, r7
 80011c6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011ca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011cc:	7ffb      	ldrb	r3, [r7, #31]
 80011ce:	3301      	adds	r3, #1
 80011d0:	77fb      	strb	r3, [r7, #31]
 80011d2:	7ffb      	ldrb	r3, [r7, #31]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d9ec      	bls.n	80011b2 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001202:	b292      	uxth	r2, r2
 8001204:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0204 	orr.w	r2, r2, #4
 800121a:	b292      	uxth	r2, r2
 800121c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f007 f8c5 	bl	80083b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001226:	e026      	b.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00f      	beq.n	8001252 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001244:	b292      	uxth	r2, r2
 8001246:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f007 f883 	bl	8008356 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001250:	e011      	b.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800126e:	b292      	uxth	r2, r2
 8001270:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001274:	bf00      	nop
  }
}
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_PCD_SetAddress+0x1a>
 8001292:	2302      	movs	r3, #2
 8001294:	e013      	b.n	80012be <HAL_PCD_SetAddress+0x42>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fba2 	bl	80069f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	4608      	mov	r0, r1
 80012d0:	4611      	mov	r1, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	4603      	mov	r3, r0
 80012d6:	70fb      	strb	r3, [r7, #3]
 80012d8:	460b      	mov	r3, r1
 80012da:	803b      	strh	r3, [r7, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da0e      	bge.n	800130a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	705a      	strb	r2, [r3, #1]
 8001308:	e00e      	b.n	8001328 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	f003 0207 	and.w	r2, r3, #7
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	b2da      	uxtb	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001334:	883a      	ldrh	r2, [r7, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	78ba      	ldrb	r2, [r7, #2]
 800133e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001340:	78bb      	ldrb	r3, [r7, #2]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d102      	bne.n	800134c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_PCD_EP_Open+0x94>
 8001356:	2302      	movs	r3, #2
 8001358:	e00e      	b.n	8001378 <HAL_PCD_EP_Open+0xb2>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68f9      	ldr	r1, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 f8eb 	bl	8004544 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001376:	7afb      	ldrb	r3, [r7, #11]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800138c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da0e      	bge.n	80013b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	705a      	strb	r2, [r3, #1]
 80013b0:	e00e      	b.n	80013d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f003 0207 	and.w	r2, r3, #7
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_PCD_EP_Close+0x6a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e00e      	b.n	8001408 <HAL_PCD_EP_Close+0x88>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68f9      	ldr	r1, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fc63 	bl	8004cc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	460b      	mov	r3, r1
 800141e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	f003 0207 	and.w	r2, r3, #7
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4413      	add	r3, r2
 8001436:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	b2da      	uxtb	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6979      	ldr	r1, [r7, #20]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fe1a 	bl	800509c <USB_EPStartXfer>

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	460b      	mov	r3, r1
 8001480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2201      	movs	r2, #1
 80014bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6979      	ldr	r1, [r7, #20]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fde3 	bl	800509c <USB_EPStartXfer>

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0207 	and.w	r2, r3, #7
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d901      	bls.n	80014fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e04c      	b.n	8001598 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001502:	2b00      	cmp	r3, #0
 8001504:	da0e      	bge.n	8001524 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	705a      	strb	r2, [r3, #1]
 8001522:	e00c      	b.n	800153e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	b2da      	uxtb	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_PCD_EP_SetStall+0x7e>
 800155a:	2302      	movs	r3, #2
 800155c:	e01c      	b.n	8001598 <HAL_PCD_EP_SetStall+0xb8>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68f9      	ldr	r1, [r7, #12]
 800156c:	4618      	mov	r0, r3
 800156e:	f005 f946 	bl	80067fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	2b00      	cmp	r3, #0
 800157a:	d108      	bne.n	800158e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f005 fa6b 	bl	8006a64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 020f 	and.w	r2, r3, #15
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d901      	bls.n	80015be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e040      	b.n	8001640 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da0e      	bge.n	80015e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	705a      	strb	r2, [r3, #1]
 80015e2:	e00e      	b.n	8001602 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 0207 	and.w	r2, r3, #7
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_PCD_EP_ClrStall+0x82>
 800161e:	2302      	movs	r3, #2
 8001620:	e00e      	b.n	8001640 <HAL_PCD_EP_ClrStall+0xa0>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	4618      	mov	r0, r3
 8001632:	f005 f934 	bl	800689e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	@ 0x58
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001650:	e3be      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800165a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800165e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800166c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 8178 	bne.w	8001966 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d151      	bne.n	8001726 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800168e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001692:	81fb      	strh	r3, [r7, #14]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800169e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3328      	adds	r3, #40	@ 0x28
 80016aa:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	3302      	adds	r3, #2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	441a      	add	r2, r3
 80016e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f006 fe1a 	bl	8008322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 836a 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x788>
 80016fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 8365 	bne.w	8001dd0 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001712:	b2da      	uxtb	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001724:	e354      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800172c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001738:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800173c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001740:	2b00      	cmp	r3, #0
 8001742:	d034      	beq.n	80017ae <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800174c:	b29b      	uxth	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	3306      	adds	r3, #6
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800176c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 800177a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800177c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800177e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001780:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001782:	b29b      	uxth	r3, r3
 8001784:	f005 f9be 	bl	8006b04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29a      	uxth	r2, r3
 8001790:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001794:	4013      	ands	r3, r2
 8001796:	823b      	strh	r3, [r7, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	8a3a      	ldrh	r2, [r7, #16]
 800179e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017a2:	b292      	uxth	r2, r2
 80017a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f006 fd8e 	bl	80082c8 <HAL_PCD_SetupStageCallback>
 80017ac:	e310      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f280 830c 	bge.w	8001dd0 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017c4:	4013      	ands	r3, r2
 80017c6:	83fb      	strh	r3, [r7, #30]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	8bfa      	ldrh	r2, [r7, #30]
 80017ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017d2:	b292      	uxth	r2, r2
 80017d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	3306      	adds	r3, #6
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001800:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <PCD_EP_ISR_Handler+0x1f6>
 800180a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001818:	6959      	ldr	r1, [r3, #20]
 800181a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800181c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800181e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001820:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001822:	b29b      	uxth	r3, r3
 8001824:	f005 f96e 	bl	8006b04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	441a      	add	r2, r3
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001836:	2100      	movs	r1, #0
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f006 fd57 	bl	80082ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800184c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 82bd 	bne.w	8001dd0 <PCD_EP_ISR_Handler+0x788>
 8001856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800185a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800185e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001862:	f000 82b5 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	4413      	add	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001890:	b29a      	uxth	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b3e      	cmp	r3, #62	@ 0x3e
 800189c:	d91d      	bls.n	80018da <PCD_EP_ISR_Handler+0x292>
 800189e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80018a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <PCD_EP_ISR_Handler+0x270>
 80018b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b4:	3b01      	subs	r3, #1
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	801a      	strh	r2, [r3, #0]
 80018d8:	e026      	b.n	8001928 <PCD_EP_ISR_Handler+0x2e0>
 80018da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <PCD_EP_ISR_Handler+0x2b0>
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	e017      	b.n	8001928 <PCD_EP_ISR_Handler+0x2e0>
 80018f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <PCD_EP_ISR_Handler+0x2ca>
 800190c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190e:	3301      	adds	r3, #1
 8001910:	647b      	str	r3, [r7, #68]	@ 0x44
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29a      	uxth	r2, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800191a:	b29b      	uxth	r3, r3
 800191c:	029b      	lsls	r3, r3, #10
 800191e:	b29b      	uxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001938:	827b      	strh	r3, [r7, #18]
 800193a:	8a7b      	ldrh	r3, [r7, #18]
 800193c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001940:	827b      	strh	r3, [r7, #18]
 8001942:	8a7b      	ldrh	r3, [r7, #18]
 8001944:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001948:	827b      	strh	r3, [r7, #18]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	8a7b      	ldrh	r3, [r7, #18]
 8001950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800195c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001960:	b29b      	uxth	r3, r3
 8001962:	8013      	strh	r3, [r2, #0]
 8001964:	e234      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800197a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800197e:	2b00      	cmp	r3, #0
 8001980:	f280 80fc 	bge.w	8001b7c <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800199a:	4013      	ands	r3, r2
 800199c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80019b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019b6:	b292      	uxth	r2, r2
 80019b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d125      	bne.n	8001a24 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	3306      	adds	r3, #6
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a00:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001a04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8092 	beq.w	8001b32 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a14:	6959      	ldr	r1, [r3, #20]
 8001a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a18:	88da      	ldrh	r2, [r3, #6]
 8001a1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a1e:	f005 f871 	bl	8006b04 <USB_ReadPMA>
 8001a22:	e086      	b.n	8001b32 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d10a      	bne.n	8001a42 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a30:	461a      	mov	r2, r3
 8001a32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f9d9 	bl	8001dec <HAL_PCD_EP_DB_Receive>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001a40:	e077      	b.n	8001b32 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a5c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	441a      	add	r2, r3
 8001a6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d024      	beq.n	8001aea <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001acc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d02e      	beq.n	8001b32 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	6959      	ldr	r1, [r3, #20]
 8001adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ade:	891a      	ldrh	r2, [r3, #8]
 8001ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ae4:	f005 f80e 	bl	8006b04 <USB_ReadPMA>
 8001ae8:	e023      	b.n	8001b32 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	3306      	adds	r3, #6
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b12:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b24:	6959      	ldr	r1, [r3, #20]
 8001b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b28:	895a      	ldrh	r2, [r3, #10]
 8001b2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b2e:	f004 ffe9 	bl	8006b04 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b3a:	441a      	add	r2, r3
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b48:	441a      	add	r2, r3
 8001b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <PCD_EP_ISR_Handler+0x51a>
 8001b56:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d206      	bcs.n	8001b70 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f006 fbbf 	bl	80082ec <HAL_PCD_DataOutStageCallback>
 8001b6e:	e005      	b.n	8001b7c <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fa90 	bl	800509c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8123 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b8a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	441a      	add	r2, r3
 8001bca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	78db      	ldrb	r3, [r3, #3]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	f040 80a2 	bne.w	8001d28 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bec:	7b1b      	ldrb	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8093 	beq.w	8001d1a <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d046      	beq.n	8001c8e <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d126      	bne.n	8001c56 <PCD_EP_ISR_Handler+0x60e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	4413      	add	r3, r2
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	011a      	lsls	r2, r3, #4
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	4413      	add	r3, r2
 8001c2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	e061      	b.n	8001d1a <PCD_EP_ISR_Handler+0x6d2>
 8001c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d15d      	bne.n	8001d1a <PCD_EP_ISR_Handler+0x6d2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c72:	4413      	add	r3, r2
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	011a      	lsls	r2, r3, #4
 8001c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7e:	4413      	add	r3, r2
 8001c80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	e045      	b.n	8001d1a <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c96:	785b      	ldrb	r3, [r3, #1]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d126      	bne.n	8001cea <PCD_EP_ISR_Handler+0x6a2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb0:	4413      	add	r3, r2
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	011a      	lsls	r2, r3, #4
 8001cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd2:	801a      	strh	r2, [r3, #0]
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	e017      	b.n	8001d1a <PCD_EP_ISR_Handler+0x6d2>
 8001cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d113      	bne.n	8001d1a <PCD_EP_ISR_Handler+0x6d2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d00:	4413      	add	r3, r2
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	011a      	lsls	r2, r3, #4
 8001d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d16:	2200      	movs	r2, #0
 8001d18:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f006 fafe 	bl	8008322 <HAL_PCD_DataInStageCallback>
 8001d26:	e053      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d146      	bne.n	8001dc2 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d907      	bls.n	8001d7c <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d78:	619a      	str	r2, [r3, #24]
 8001d7a:	e002      	b.n	8001d82 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f006 fac6 	bl	8008322 <HAL_PCD_DataInStageCallback>
 8001d96:	e01b      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001da0:	441a      	add	r2, r3
 8001da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dae:	441a      	add	r2, r3
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 f96e 	bl	800509c <USB_EPStartXfer>
 8001dc0:	e006      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f91b 	bl	8002006 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f6ff ac38 	blt.w	8001652 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3758      	adds	r7, #88	@ 0x58
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	4613      	mov	r3, r2
 8001df8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d07e      	beq.n	8001f02 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	8b7b      	ldrh	r3, [r7, #26]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d306      	bcc.n	8001e46 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	8b7b      	ldrh	r3, [r7, #26]
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	619a      	str	r2, [r3, #24]
 8001e44:	e002      	b.n	8001e4c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d123      	bne.n	8001e9c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e6e:	833b      	strh	r3, [r7, #24]
 8001e70:	8b3b      	ldrh	r3, [r7, #24]
 8001e72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e76:	833b      	strh	r3, [r7, #24]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	441a      	add	r2, r3
 8001e86:	8b3b      	ldrh	r3, [r7, #24]
 8001e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ec0:	82fb      	strh	r3, [r7, #22]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ede:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ee6:	8b7b      	ldrh	r3, [r7, #26]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8087 	beq.w	8001ffc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	6959      	ldr	r1, [r3, #20]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	891a      	ldrh	r2, [r3, #8]
 8001efa:	8b7b      	ldrh	r3, [r7, #26]
 8001efc:	f004 fe02 	bl	8006b04 <USB_ReadPMA>
 8001f00:	e07c      	b.n	8001ffc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	3306      	adds	r3, #6
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	8b7b      	ldrh	r3, [r7, #26]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d306      	bcc.n	8001f44 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	8b7b      	ldrh	r3, [r7, #26]
 8001f3c:	1ad2      	subs	r2, r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	e002      	b.n	8001f4a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d123      	bne.n	8001f9a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f6c:	83fb      	strh	r3, [r7, #30]
 8001f6e:	8bfb      	ldrh	r3, [r7, #30]
 8001f70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f74:	83fb      	strh	r3, [r7, #30]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	441a      	add	r2, r3
 8001f84:	8bfb      	ldrh	r3, [r7, #30]
 8001f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d11f      	bne.n	8001fe4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fbe:	83bb      	strh	r3, [r7, #28]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	441a      	add	r2, r3
 8001fce:	8bbb      	ldrh	r3, [r7, #28]
 8001fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fe4:	8b7b      	ldrh	r3, [r7, #26]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6959      	ldr	r1, [r3, #20]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	895a      	ldrh	r2, [r3, #10]
 8001ff6:	8b7b      	ldrh	r3, [r7, #26]
 8001ff8:	f004 fd84 	bl	8006b04 <USB_ReadPMA>
    }
  }

  return count;
 8001ffc:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b0a4      	sub	sp, #144	@ 0x90
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	4613      	mov	r3, r2
 8002012:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 81dd 	beq.w	80023da <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	3302      	adds	r3, #2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002054:	429a      	cmp	r2, r3
 8002056:	d907      	bls.n	8002068 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	e002      	b.n	800206e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 80b9 	bne.w	80021ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d126      	bne.n	80020ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002094:	4413      	add	r3, r2
 8002096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	011a      	lsls	r2, r3, #4
 800209e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a0:	4413      	add	r3, r2
 80020a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b6:	801a      	strh	r2, [r3, #0]
 80020b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ca:	801a      	strh	r2, [r3, #0]
 80020cc:	e01a      	b.n	8002104 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d116      	bne.n	8002104 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	637b      	str	r3, [r7, #52]	@ 0x34
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ea:	4413      	add	r3, r2
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	011a      	lsls	r2, r3, #4
 80020f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f6:	4413      	add	r3, r2
 80020f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80020fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	785b      	ldrb	r3, [r3, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d126      	bne.n	8002160 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	011a      	lsls	r2, r3, #4
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002144:	b29a      	uxth	r2, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002158:	b29a      	uxth	r2, r3
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	e017      	b.n	8002190 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d113      	bne.n	8002190 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	4413      	add	r3, r2
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	011a      	lsls	r2, r3, #4
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	4413      	add	r3, r2
 8002184:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2200      	movs	r2, #0
 800218e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f006 f8c3 	bl	8008322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 82fc 	beq.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021c2:	82fb      	strh	r3, [r7, #22]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	441a      	add	r2, r3
 80021d2:	8afb      	ldrh	r3, [r7, #22]
 80021d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	8013      	strh	r3, [r2, #0]
 80021e8:	e2da      	b.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800220a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800220e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	441a      	add	r2, r3
 8002220:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800222c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002234:	b29b      	uxth	r3, r3
 8002236:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800223e:	2b01      	cmp	r3, #1
 8002240:	f040 82ae 	bne.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800224c:	441a      	add	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800225a:	441a      	add	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d30b      	bcc.n	8002284 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800227c:	1ad2      	subs	r2, r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	621a      	str	r2, [r3, #32]
 8002282:	e017      	b.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800228c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800229c:	e00a      	b.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d165      	bne.n	8002388 <HAL_PCD_EP_DB_Transmit+0x382>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d0:	4413      	add	r3, r2
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	011a      	lsls	r2, r3, #4
 80022da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022dc:	4413      	add	r3, r2
 80022de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f2:	801a      	strh	r2, [r3, #0]
 80022f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80022fa:	d91d      	bls.n	8002338 <HAL_PCD_EP_DB_Transmit+0x332>
 80022fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_PCD_EP_DB_Transmit+0x310>
 8002310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002312:	3b01      	subs	r3, #1
 8002314:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29a      	uxth	r2, r3
 800231c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800231e:	b29b      	uxth	r3, r3
 8002320:	029b      	lsls	r3, r3, #10
 8002322:	b29b      	uxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b29b      	uxth	r3, r3
 8002328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002330:	b29a      	uxth	r2, r3
 8002332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	e044      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0x350>
 8002340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234e:	b29a      	uxth	r2, r3
 8002350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e035      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800235e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_PCD_EP_DB_Transmit+0x36a>
 800236a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800236c:	3301      	adds	r3, #1
 800236e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29a      	uxth	r2, r3
 8002376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002378:	b29b      	uxth	r3, r3
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	b29b      	uxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b29a      	uxth	r2, r3
 8002382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002384:	801a      	strh	r2, [r3, #0]
 8002386:	e01c      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d118      	bne.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	647b      	str	r3, [r7, #68]	@ 0x44
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a4:	4413      	add	r3, r2
 80023a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	011a      	lsls	r2, r3, #4
 80023ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b0:	4413      	add	r3, r2
 80023b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80023b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6959      	ldr	r1, [r3, #20]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	891a      	ldrh	r2, [r3, #8]
 80023ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f004 fb51 	bl	8006a7a <USB_WritePMA>
 80023d8:	e1e2      	b.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	3306      	adds	r3, #6
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002402:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800240e:	429a      	cmp	r2, r3
 8002410:	d307      	bcc.n	8002422 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800241a:	1ad2      	subs	r2, r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	619a      	str	r2, [r3, #24]
 8002420:	e002      	b.n	8002428 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 80c0 	bne.w	80025b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d126      	bne.n	8002488 <HAL_PCD_EP_DB_Transmit+0x482>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800244e:	4413      	add	r3, r2
 8002450:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	011a      	lsls	r2, r3, #4
 8002458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800245a:	4413      	add	r3, r2
 800245c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246c:	b29a      	uxth	r2, r3
 800246e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002480:	b29a      	uxth	r2, r3
 8002482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002484:	801a      	strh	r2, [r3, #0]
 8002486:	e01a      	b.n	80024be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d116      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	667b      	str	r3, [r7, #100]	@ 0x64
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024a4:	4413      	add	r3, r2
 80024a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	011a      	lsls	r2, r3, #4
 80024ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024b0:	4413      	add	r3, r2
 80024b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ba:	2200      	movs	r2, #0
 80024bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d12b      	bne.n	8002524 <HAL_PCD_EP_DB_Transmit+0x51e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e0:	4413      	add	r3, r2
 80024e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ec:	4413      	add	r3, r2
 80024ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002502:	b29a      	uxth	r2, r3
 8002504:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251a:	b29a      	uxth	r2, r3
 800251c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	e017      	b.n	8002554 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	785b      	ldrb	r3, [r3, #1]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d113      	bne.n	8002554 <HAL_PCD_EP_DB_Transmit+0x54e>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800253a:	4413      	add	r3, r2
 800253c:	677b      	str	r3, [r7, #116]	@ 0x74
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	011a      	lsls	r2, r3, #4
 8002544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002546:	4413      	add	r3, r2
 8002548:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800254c:	673b      	str	r3, [r7, #112]	@ 0x70
 800254e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f005 fee1 	bl	8008322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 811a 	bne.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002586:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	441a      	add	r2, r3
 8002598:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800259c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	8013      	strh	r3, [r2, #0]
 80025b0:	e0f6      	b.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d121      	bne.n	8002600 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	441a      	add	r2, r3
 80025e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 80ca 	bne.w	80027a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002614:	441a      	add	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002622:	441a      	add	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d30b      	bcc.n	800264c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	621a      	str	r2, [r3, #32]
 800264a:	e017      	b.n	800267c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002654:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002658:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002664:	e00a      	b.n	800267c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	657b      	str	r3, [r7, #84]	@ 0x54
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d165      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x750>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269e:	4413      	add	r3, r2
 80026a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	011a      	lsls	r2, r3, #4
 80026a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026aa:	4413      	add	r3, r2
 80026ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80026c8:	d91d      	bls.n	8002706 <HAL_PCD_EP_DB_Transmit+0x700>
 80026ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80026de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026e0:	3b01      	subs	r3, #1
 80026e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e041      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <HAL_PCD_EP_DB_Transmit+0x71e>
 800270e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800271c:	b29a      	uxth	r2, r3
 800271e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002720:	801a      	strh	r2, [r3, #0]
 8002722:	e032      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 8002724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800272c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_PCD_EP_DB_Transmit+0x738>
 8002738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800273a:	3301      	adds	r3, #1
 800273c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800273e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29a      	uxth	r2, r3
 8002744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002746:	b29b      	uxth	r3, r3
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	b29b      	uxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b29a      	uxth	r2, r3
 8002750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e019      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	785b      	ldrb	r3, [r3, #1]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d115      	bne.n	800278a <HAL_PCD_EP_DB_Transmit+0x784>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276c:	4413      	add	r3, r2
 800276e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	011a      	lsls	r2, r3, #4
 8002776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002778:	4413      	add	r3, r2
 800277a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800277e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002780:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002784:	b29a      	uxth	r2, r3
 8002786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002788:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6959      	ldr	r1, [r3, #20]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	895a      	ldrh	r2, [r3, #10]
 8002796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279a:	b29b      	uxth	r3, r3
 800279c:	f004 f96d 	bl	8006a7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ba:	82bb      	strh	r3, [r7, #20]
 80027bc:	8abb      	ldrh	r3, [r7, #20]
 80027be:	f083 0310 	eor.w	r3, r3, #16
 80027c2:	82bb      	strh	r3, [r7, #20]
 80027c4:	8abb      	ldrh	r3, [r7, #20]
 80027c6:	f083 0320 	eor.w	r3, r3, #32
 80027ca:	82bb      	strh	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	8abb      	ldrh	r3, [r7, #20]
 80027dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3790      	adds	r7, #144	@ 0x90
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	817b      	strh	r3, [r7, #10]
 8002808:	4613      	mov	r3, r2
 800280a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800280c:	897b      	ldrh	r3, [r7, #10]
 800280e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e009      	b.n	8002844 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002830:	897a      	ldrh	r2, [r7, #10]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002844:	893b      	ldrh	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d107      	bne.n	800285a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	b29a      	uxth	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	80da      	strh	r2, [r3, #6]
 8002858:	e00b      	b.n	8002872 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2201      	movs	r2, #1
 800285e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	b29a      	uxth	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0c1b      	lsrs	r3, r3, #16
 800286c:	b29a      	uxth	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e272      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8087 	beq.w	80029ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a0:	4b92      	ldr	r3, [pc, #584]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ac:	4b8f      	ldr	r3, [pc, #572]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d112      	bne.n	80028de <HAL_RCC_OscConfig+0x5e>
 80028b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c4:	d10b      	bne.n	80028de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c6:	4b89      	ldr	r3, [pc, #548]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d06c      	beq.n	80029ac <HAL_RCC_OscConfig+0x12c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d168      	bne.n	80029ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e24c      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x76>
 80028e8:	4b80      	ldr	r3, [pc, #512]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7f      	ldr	r2, [pc, #508]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e02e      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x98>
 80028fe:	4b7b      	ldr	r3, [pc, #492]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7a      	ldr	r2, [pc, #488]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b78      	ldr	r3, [pc, #480]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a77      	ldr	r2, [pc, #476]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002910:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e01d      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0xbc>
 8002922:	4b72      	ldr	r3, [pc, #456]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a71      	ldr	r2, [pc, #452]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b6f      	ldr	r3, [pc, #444]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6e      	ldr	r2, [pc, #440]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 800293c:	4b6b      	ldr	r3, [pc, #428]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6a      	ldr	r2, [pc, #424]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b68      	ldr	r3, [pc, #416]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a67      	ldr	r2, [pc, #412]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fd fed4 	bl	8000708 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7fd fed0 	bl	8000708 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e200      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b5d      	ldr	r3, [pc, #372]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0xe4>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fd fec0 	bl	8000708 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fd febc 	bl	8000708 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	@ 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1ec      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x10c>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d063      	beq.n	8002a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ba:	4b4c      	ldr	r3, [pc, #304]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029c6:	4b49      	ldr	r3, [pc, #292]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d11c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x18c>
 80029d2:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_RCC_OscConfig+0x176>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e1c0      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4939      	ldr	r1, [pc, #228]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0a:	e03a      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a14:	4b36      	ldr	r3, [pc, #216]	@ (8002af0 <HAL_RCC_OscConfig+0x270>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fd fe75 	bl	8000708 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a22:	f7fd fe71 	bl	8000708 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1a1      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b2a      	ldr	r3, [pc, #168]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4927      	ldr	r1, [pc, #156]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a56:	4b26      	ldr	r3, [pc, #152]	@ (8002af0 <HAL_RCC_OscConfig+0x270>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fd fe54 	bl	8000708 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a64:	f7fd fe50 	bl	8000708 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e180      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d03a      	beq.n	8002b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9c:	f7fd fe34 	bl	8000708 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fd fe30 	bl	8000708 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e160      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f000 face 	bl	8003064 <RCC_Delay>
 8002ac8:	e01c      	b.n	8002b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_RCC_OscConfig+0x274>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad0:	f7fd fe1a 	bl	8000708 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad6:	e00f      	b.n	8002af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fd fe16 	bl	8000708 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d908      	bls.n	8002af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e146      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	42420000 	.word	0x42420000
 8002af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	4b92      	ldr	r3, [pc, #584]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e9      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80a6 	beq.w	8002c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b8b      	ldr	r3, [pc, #556]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a87      	ldr	r2, [pc, #540]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]
 8002b2e:	4b85      	ldr	r3, [pc, #532]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fd fdd7 	bl	8000708 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fd fdd3 	bl	8000708 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	@ 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e103      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b75      	ldr	r3, [pc, #468]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x312>
 8002b84:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x334>
 8002b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a69      	ldr	r2, [pc, #420]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	4b67      	ldr	r3, [pc, #412]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a66      	ldr	r2, [pc, #408]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6213      	str	r3, [r2, #32]
 8002bb2:	e01c      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x356>
 8002bbc:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4a60      	ldr	r2, [pc, #384]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a5a      	ldr	r2, [pc, #360]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	4b58      	ldr	r3, [pc, #352]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a57      	ldr	r2, [pc, #348]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fd fd87 	bl	8000708 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fd fd83 	bl	8000708 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0b1      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	4b4b      	ldr	r3, [pc, #300]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ee      	beq.n	8002bfe <HAL_RCC_OscConfig+0x37e>
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7fd fd71 	bl	8000708 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fd fd6d 	bl	8000708 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e09b      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a3b      	ldr	r2, [pc, #236]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8087 	beq.w	8002d76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d061      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d146      	bne.n	8002d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fd fd41 	bl	8000708 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fd fd3d 	bl	8000708 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e06d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb0:	d108      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cb2:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4921      	ldr	r1, [pc, #132]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a19      	ldr	r1, [r3, #32]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	491b      	ldr	r1, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fd11 	bl	8000708 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fd fd0d 	bl	8000708 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x46a>
 8002d08:	e035      	b.n	8002d76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fd fcfa 	bl	8000708 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fd fcf6 	bl	8000708 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e026      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x498>
 8002d36:	e01e      	b.n	8002d76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e019      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_OscConfig+0x500>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0d0      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b67      	ldr	r3, [pc, #412]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	4965      	ldr	r1, [pc, #404]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b63      	ldr	r3, [pc, #396]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0b8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de0:	4b59      	ldr	r3, [pc, #356]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a58      	ldr	r2, [pc, #352]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df8:	4b53      	ldr	r3, [pc, #332]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b50      	ldr	r3, [pc, #320]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	494d      	ldr	r1, [pc, #308]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d040      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d115      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e073      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3d      	ldr	r3, [pc, #244]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4936      	ldr	r1, [pc, #216]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fd fc48 	bl	8000708 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fd fc44 	bl	8000708 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e053      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d210      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4922      	ldr	r1, [pc, #136]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e032      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4916      	ldr	r1, [pc, #88]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002efe:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	490e      	ldr	r1, [pc, #56]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f12:	f000 f821 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	490a      	ldr	r1, [pc, #40]	@ (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	5ccb      	ldrb	r3, [r1, r3]
 8002f26:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2a:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <HAL_RCC_ClockConfig+0x1cc>)
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_RCC_ClockConfig+0x1d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fba6 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08008844 	.word	0x08008844
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f72:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x94>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x30>
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x36>
 8002f86:	e027      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f8a:	613b      	str	r3, [r7, #16]
      break;
 8002f8c:	e027      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	0c5b      	lsrs	r3, r3, #17
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	613b      	str	r3, [r7, #16]
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fda:	613b      	str	r3, [r7, #16]
      break;
 8002fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fde:	693b      	ldr	r3, [r7, #16]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	007a1200 	.word	0x007a1200
 8002ff4:	0800885c 	.word	0x0800885c
 8002ff8:	0800886c 	.word	0x0800886c
 8002ffc:	003d0900 	.word	0x003d0900

08003000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b02      	ldr	r3, [pc, #8]	@ (8003010 <HAL_RCC_GetHCLKFreq+0x10>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	20000000 	.word	0x20000000

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003018:	f7ff fff2 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4903      	ldr	r1, [pc, #12]	@ (8003038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	08008854 	.word	0x08008854

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003040:	f7ff ffde 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0adb      	lsrs	r3, r3, #11
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	@ (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	08008854 	.word	0x08008854

08003064 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <RCC_Delay+0x34>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <RCC_Delay+0x38>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0a5b      	lsrs	r3, r3, #9
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003080:	bf00      	nop
  }
  while (Delay --);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e5a      	subs	r2, r3, #1
 8003086:	60fa      	str	r2, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f9      	bne.n	8003080 <RCC_Delay+0x1c>
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	20000000 	.word	0x20000000
 800309c:	10624dd3 	.word	0x10624dd3

080030a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d07d      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	61d3      	str	r3, [r2, #28]
 80030d8:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b46      	ldr	r3, [pc, #280]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d118      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f4:	4b43      	ldr	r3, [pc, #268]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a42      	ldr	r2, [pc, #264]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003100:	f7fd fb02 	bl	8000708 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	e008      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7fd fafe 	bl	8000708 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	@ 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e06d      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b3a      	ldr	r3, [pc, #232]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003126:	4b36      	ldr	r3, [pc, #216]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02e      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d027      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003144:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800314c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314e:	4b2e      	ldr	r3, [pc, #184]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003154:	4b2c      	ldr	r3, [pc, #176]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800315a:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d014      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fd facd 	bl	8000708 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fd fac9 	bl	8000708 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e036      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ee      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4917      	ldr	r1, [pc, #92]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	4a13      	ldr	r2, [pc, #76]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	490b      	ldr	r1, [pc, #44]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e2:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4904      	ldr	r1, [pc, #16]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
 8003208:	42420440 	.word	0x42420440

0800320c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd f922 	bl	800047c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fa74 	bl	8003738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e03a      	b.n	800333a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_TIM_Base_Start_IT+0x98>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ee:	d009      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a14      	ldr	r2, [pc, #80]	@ (8003348 <HAL_TIM_Base_Start_IT+0x9c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a13      	ldr	r2, [pc, #76]	@ (800334c <HAL_TIM_Base_Start_IT+0xa0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d010      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e007      	b.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0202 	mvn.w	r2, #2
 800337c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9b4 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f9a7 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f9b6 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0204 	mvn.w	r2, #4
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f98a 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f97d 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f98c 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0208 	mvn.w	r2, #8
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2204      	movs	r2, #4
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f960 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f953 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f962 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b10      	cmp	r3, #16
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2208      	movs	r2, #8
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f936 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f929 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f938 	bl	8003712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0201 	mvn.w	r2, #1
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fc ff72 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b80      	cmp	r3, #128	@ 0x80
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	2b80      	cmp	r3, #128	@ 0x80
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa7b 	bl	80039f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003518:	2b40      	cmp	r3, #64	@ 0x40
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8fc 	bl	8003724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0220 	mvn.w	r2, #32
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa46 	bl	80039e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_TIM_ConfigClockSource+0x1c>
 8003578:	2302      	movs	r3, #2
 800357a:	e0b4      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x186>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800359a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b4:	d03e      	beq.n	8003634 <HAL_TIM_ConfigClockSource+0xd4>
 80035b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ba:	f200 8087 	bhi.w	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c2:	f000 8086 	beq.w	80036d2 <HAL_TIM_ConfigClockSource+0x172>
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ca:	d87f      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b70      	cmp	r3, #112	@ 0x70
 80035ce:	d01a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0xa6>
 80035d0:	2b70      	cmp	r3, #112	@ 0x70
 80035d2:	d87b      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035d4:	2b60      	cmp	r3, #96	@ 0x60
 80035d6:	d050      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x11a>
 80035d8:	2b60      	cmp	r3, #96	@ 0x60
 80035da:	d877      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b50      	cmp	r3, #80	@ 0x50
 80035de:	d03c      	beq.n	800365a <HAL_TIM_ConfigClockSource+0xfa>
 80035e0:	2b50      	cmp	r3, #80	@ 0x50
 80035e2:	d873      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	d058      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x13a>
 80035e8:	2b40      	cmp	r3, #64	@ 0x40
 80035ea:	d86f      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035ec:	2b30      	cmp	r3, #48	@ 0x30
 80035ee:	d064      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x15a>
 80035f0:	2b30      	cmp	r3, #48	@ 0x30
 80035f2:	d86b      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d060      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x15a>
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d867      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d05c      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x15a>
 8003600:	2b10      	cmp	r3, #16
 8003602:	d05a      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x15a>
 8003604:	e062      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003616:	f000 f968 	bl	80038ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	609a      	str	r2, [r3, #8]
      break;
 8003632:	e04f      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003644:	f000 f951 	bl	80038ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003656:	609a      	str	r2, [r3, #8]
      break;
 8003658:	e03c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003666:	461a      	mov	r2, r3
 8003668:	f000 f8c8 	bl	80037fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2150      	movs	r1, #80	@ 0x50
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f91f 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 8003678:	e02c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003686:	461a      	mov	r2, r3
 8003688:	f000 f8e6 	bl	8003858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2160      	movs	r1, #96	@ 0x60
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f90f 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 8003698:	e01c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 f8a8 	bl	80037fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2140      	movs	r1, #64	@ 0x40
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f8ff 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 80036b8:	e00c      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f000 f8f6 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 80036ca:	e003      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      break;
 80036d0:	e000      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
	...

08003738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a29      	ldr	r2, [pc, #164]	@ (80037f0 <TIM_Base_SetConfig+0xb8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_Base_SetConfig+0x30>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003756:	d007      	beq.n	8003768 <TIM_Base_SetConfig+0x30>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a26      	ldr	r2, [pc, #152]	@ (80037f4 <TIM_Base_SetConfig+0xbc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0x30>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a25      	ldr	r2, [pc, #148]	@ (80037f8 <TIM_Base_SetConfig+0xc0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d108      	bne.n	800377a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1c      	ldr	r2, [pc, #112]	@ (80037f0 <TIM_Base_SetConfig+0xb8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a19      	ldr	r2, [pc, #100]	@ (80037f4 <TIM_Base_SetConfig+0xbc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0x62>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <TIM_Base_SetConfig+0xc0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <TIM_Base_SetConfig+0xb8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800

080037fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 030a 	bic.w	r3, r3, #10
 8003838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0210 	bic.w	r2, r3, #16
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	031b      	lsls	r3, r3, #12
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003894:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f043 0307 	orr.w	r3, r3, #7
 80038d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b087      	sub	sp, #28
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003904:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	021a      	lsls	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	431a      	orrs	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4313      	orrs	r3, r2
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	609a      	str	r2, [r3, #8]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800393c:	2302      	movs	r3, #2
 800393e:	e046      	b.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a16      	ldr	r2, [pc, #88]	@ (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d009      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a12      	ldr	r2, [pc, #72]	@ (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a10      	ldr	r2, [pc, #64]	@ (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10c      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800

080039e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e042      	b.n	8003aa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fc fd48 	bl	80004c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	@ 0x24
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fc7f 	bl	8004350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b0ba      	sub	sp, #232	@ 0xe8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_UART_IRQHandler+0x66>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fb63 	bl	80041d2 <UART_Receive_IT>
      return;
 8003b0c:	e25b      	b.n	8003fc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80de 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x22c>
 8003b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80d1 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_UART_IRQHandler+0xae>
 8003b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f043 0201 	orr.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_UART_IRQHandler+0xd2>
 8003b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f043 0202 	orr.w	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_UART_IRQHandler+0xf6>
 8003b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <HAL_UART_IRQHandler+0x126>
 8003baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 81f2 	beq.w	8003fbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x14e>
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 faee 	bl	80041d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_UART_IRQHandler+0x17a>
 8003c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d04f      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9f8 	bl	8004018 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d041      	beq.n	8003cba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1d9      	bne.n	8003c36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d013      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e88 <HAL_UART_IRQHandler+0x3e0>)
 8003c90:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fc fe88 	bl	80009ac <HAL_DMA_Abort_IT>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cac:	4610      	mov	r0, r2
 8003cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e00e      	b.n	8003cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f99c 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	e00a      	b.n	8003cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f998 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	e006      	b.n	8003cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f994 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cce:	e175      	b.n	8003fbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	bf00      	nop
    return;
 8003cd2:	e173      	b.n	8003fbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 814f 	bne.w	8003f7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8148 	beq.w	8003f7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8141 	beq.w	8003f7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80b6 	beq.w	8003e8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8145 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	f080 813e 	bcs.w	8003fc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	f000 8088 	beq.w	8003e68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d84:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1d9      	bne.n	8003d58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003db4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dc8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e1      	bne.n	8003da4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003df0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e04:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e3      	bne.n	8003de0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fd67 	bl	8000936 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8bf 	bl	8004002 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e84:	e09c      	b.n	8003fc0 <HAL_UART_IRQHandler+0x518>
 8003e86:	bf00      	nop
 8003e88:	080040dd 	.word	0x080040dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 808e 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8089 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ed6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ed8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003edc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e3      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3314      	adds	r3, #20
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e3      	bne.n	8003eea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f54:	61fa      	str	r2, [r7, #28]
 8003f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	617b      	str	r3, [r7, #20]
   return(result);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e3      	bne.n	8003f30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f844 	bl	8004002 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f7a:	e023      	b.n	8003fc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_UART_IRQHandler+0x4f4>
 8003f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8b5 	bl	8004104 <UART_Transmit_IT>
    return;
 8003f9a:	e014      	b.n	8003fc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x51e>
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8f4 	bl	80041a2 <UART_EndTransmit_IT>
    return;
 8003fba:	e004      	b.n	8003fc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fc4:	bf00      	nop
  }
}
 8003fc6:	37e8      	adds	r7, #232	@ 0xe8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b095      	sub	sp, #84	@ 0x54
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004040:	643a      	str	r2, [r7, #64]	@ 0x40
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004046:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800404e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	61fb      	str	r3, [r7, #28]
   return(result);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3314      	adds	r3, #20
 8004072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800407a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	2b01      	cmp	r3, #1
 800408e:	d119      	bne.n	80040c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f023 0310 	bic.w	r3, r3, #16
 80040a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040b0:	61ba      	str	r2, [r7, #24]
 80040b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6979      	ldr	r1, [r7, #20]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	613b      	str	r3, [r7, #16]
   return(result);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e5      	bne.n	8004090 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040d2:	bf00      	nop
 80040d4:	3754      	adds	r7, #84	@ 0x54
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff7a 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b21      	cmp	r3, #33	@ 0x21
 8004116:	d13e      	bne.n	8004196 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004120:	d114      	bne.n	800414c <UART_Transmit_IT+0x48>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d110      	bne.n	800414c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]
 800414a:	e008      	b.n	800415e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	1c59      	adds	r1, r3, #1
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6211      	str	r1, [r2, #32]
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29b      	uxth	r3, r3
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4619      	mov	r1, r3
 800416c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004180:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004190:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff02 	bl	8003fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08c      	sub	sp, #48	@ 0x30
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b22      	cmp	r3, #34	@ 0x22
 80041e4:	f040 80ae 	bne.w	8004344 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f0:	d117      	bne.n	8004222 <UART_Receive_IT+0x50>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004210:	b29a      	uxth	r2, r3
 8004212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004214:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004220:	e026      	b.n	8004270 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004234:	d007      	beq.n	8004246 <UART_Receive_IT+0x74>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <UART_Receive_IT+0x82>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e008      	b.n	8004266 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004260:	b2da      	uxtb	r2, r3
 8004262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004264:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4619      	mov	r1, r3
 800427e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004280:	2b00      	cmp	r3, #0
 8004282:	d15d      	bne.n	8004340 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0220 	bic.w	r2, r2, #32
 8004292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d135      	bne.n	8004336 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	613b      	str	r3, [r7, #16]
   return(result);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f023 0310 	bic.w	r3, r3, #16
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f0:	623a      	str	r2, [r7, #32]
 80042f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	69f9      	ldr	r1, [r7, #28]
 80042f6:	6a3a      	ldr	r2, [r7, #32]
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b10      	cmp	r3, #16
 8004310:	d10a      	bne.n	8004328 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff fe67 	bl	8004002 <HAL_UARTEx_RxEventCallback>
 8004334:	e002      	b.n	800433c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fe51 	bl	8003fde <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e002      	b.n	8004346 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3730      	adds	r7, #48	@ 0x30
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800438a:	f023 030c 	bic.w	r3, r3, #12
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	430b      	orrs	r3, r1
 8004396:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004464 <UART_SetConfig+0x114>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fe40 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	e002      	b.n	80043c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043c0:	f7fe fe28 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80043c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009a      	lsls	r2, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	4a22      	ldr	r2, [pc, #136]	@ (8004468 <UART_SetConfig+0x118>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	0119      	lsls	r1, r3, #4
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <UART_SetConfig+0x118>)
 80043fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2064      	movs	r0, #100	@ 0x64
 8004406:	fb00 f303 	mul.w	r3, r0, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	@ 0x32
 8004410:	4a15      	ldr	r2, [pc, #84]	@ (8004468 <UART_SetConfig+0x118>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800441c:	4419      	add	r1, r3
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <UART_SetConfig+0x118>)
 8004436:	fba3 0302 	umull	r0, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2064      	movs	r0, #100	@ 0x64
 800443e:	fb00 f303 	mul.w	r3, r0, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	@ 0x32
 8004448:	4a07      	ldr	r2, [pc, #28]	@ (8004468 <UART_SetConfig+0x118>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	440a      	add	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40013800 	.word	0x40013800
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800446c:	b084      	sub	sp, #16
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	f107 0014 	add.w	r0, r7, #20
 800447a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	b004      	add	sp, #16
 800448a:	4770      	bx	lr

0800448c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800449c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044c0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004504:	b084      	sub	sp, #16
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	f107 0014 	add.w	r0, r7, #20
 8004512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	b004      	add	sp, #16
 8004542:	4770      	bx	lr

08004544 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004544:	b480      	push	{r7}
 8004546:	b09d      	sub	sp, #116	@ 0x74
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	78db      	ldrb	r3, [r3, #3]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d81f      	bhi.n	80045b6 <USB_ActivateEndpoint+0x72>
 8004576:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <USB_ActivateEndpoint+0x38>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	0800458d 	.word	0x0800458d
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045bf 	.word	0x080045bf
 8004588:	0800459b 	.word	0x0800459b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800458c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004590:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004594:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004598:	e012      	b.n	80045c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800459a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800459e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80045a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045a6:	e00b      	b.n	80045c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045b4:	e004      	b.n	80045c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80045bc:	e000      	b.n	80045c0 <USB_ActivateEndpoint+0x7c>
      break;
 80045be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800461e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	7b1b      	ldrb	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8178 	bne.w	8004920 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8084 	beq.w	8004742 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004644:	b29b      	uxth	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4413      	add	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	011a      	lsls	r2, r3, #4
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	88db      	ldrh	r3, [r3, #6]
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	827b      	strh	r3, [r7, #18]
 800467c:	8a7b      	ldrh	r3, [r7, #18]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01b      	beq.n	80046be <USB_ActivateEndpoint+0x17a>
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469c:	823b      	strh	r3, [r7, #16]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	8a3b      	ldrh	r3, [r7, #16]
 80046aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	78db      	ldrb	r3, [r3, #3]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d020      	beq.n	8004708 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046dc:	81bb      	strh	r3, [r7, #12]
 80046de:	89bb      	ldrh	r3, [r7, #12]
 80046e0:	f083 0320 	eor.w	r3, r3, #32
 80046e4:	81bb      	strh	r3, [r7, #12]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	89bb      	ldrh	r3, [r7, #12]
 80046f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004702:	b29b      	uxth	r3, r3
 8004704:	8013      	strh	r3, [r2, #0]
 8004706:	e2d5      	b.n	8004cb4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800471e:	81fb      	strh	r3, [r7, #14]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	89fb      	ldrh	r3, [r7, #14]
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
 8004740:	e2b8      	b.n	8004cb4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	633b      	str	r3, [r7, #48]	@ 0x30
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	4413      	add	r3, r2
 8004754:	633b      	str	r3, [r7, #48]	@ 0x30
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	4413      	add	r3, r2
 8004760:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	88db      	ldrh	r3, [r3, #6]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	b29b      	uxth	r3, r3
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004774:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004786:	4413      	add	r3, r2
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	011a      	lsls	r2, r3, #4
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	4413      	add	r3, r2
 8004794:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80047b0:	d91d      	bls.n	80047ee <USB_ActivateEndpoint+0x2aa>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <USB_ActivateEndpoint+0x288>
 80047c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047c8:	3b01      	subs	r3, #1
 80047ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	029b      	lsls	r3, r3, #10
 80047d8:	b29b      	uxth	r3, r3
 80047da:	4313      	orrs	r3, r2
 80047dc:	b29b      	uxth	r3, r3
 80047de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	e026      	b.n	800483c <USB_ActivateEndpoint+0x2f8>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <USB_ActivateEndpoint+0x2c8>
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004804:	b29a      	uxth	r2, r3
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	e017      	b.n	800483c <USB_ActivateEndpoint+0x2f8>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <USB_ActivateEndpoint+0x2e2>
 8004820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004822:	3301      	adds	r3, #1
 8004824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29a      	uxth	r2, r3
 800482c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800482e:	b29b      	uxth	r3, r3
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	b29b      	uxth	r3, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	b29a      	uxth	r2, r3
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	847b      	strh	r3, [r7, #34]	@ 0x22
 800484a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800484c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <USB_ActivateEndpoint+0x348>
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486a:	843b      	strh	r3, [r7, #32]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	8c3b      	ldrh	r3, [r7, #32]
 8004878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004880:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004888:	b29b      	uxth	r3, r3
 800488a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d124      	bne.n	80048de <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048aa:	83bb      	strh	r3, [r7, #28]
 80048ac:	8bbb      	ldrh	r3, [r7, #28]
 80048ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048b2:	83bb      	strh	r3, [r7, #28]
 80048b4:	8bbb      	ldrh	r3, [r7, #28]
 80048b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048ba:	83bb      	strh	r3, [r7, #28]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	8bbb      	ldrh	r3, [r7, #28]
 80048c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d8:	b29b      	uxth	r3, r3
 80048da:	8013      	strh	r3, [r2, #0]
 80048dc:	e1ea      	b.n	8004cb4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f4:	83fb      	strh	r3, [r7, #30]
 80048f6:	8bfb      	ldrh	r3, [r7, #30]
 80048f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048fc:	83fb      	strh	r3, [r7, #30]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	8bfb      	ldrh	r3, [r7, #30]
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]
 800491e:	e1c9      	b.n	8004cb4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	78db      	ldrb	r3, [r3, #3]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d11e      	bne.n	8004966 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004958:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800495c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]
 8004964:	e01d      	b.n	80049a2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800498e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b2:	4413      	add	r3, r2
 80049b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	011a      	lsls	r2, r3, #4
 80049bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	891b      	ldrh	r3, [r3, #8]
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e6:	4413      	add	r3, r2
 80049e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	011a      	lsls	r2, r3, #4
 80049f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80049f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	895b      	ldrh	r3, [r3, #10]
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a08:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 8093 	bne.w	8004b3a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004a24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <USB_ActivateEndpoint+0x524>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004a76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <USB_ActivateEndpoint+0x574>
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a96:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ab0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ace:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ad0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ad2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ad6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ad8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ada:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ade:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	441a      	add	r2, r3
 8004aea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b16:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
 8004b38:	e0bc      	b.n	8004cb4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01d      	beq.n	8004b92 <USB_ActivateEndpoint+0x64e>
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004ba2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01d      	beq.n	8004bea <USB_ActivateEndpoint+0x6a6>
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	78db      	ldrb	r3, [r3, #3]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d024      	beq.n	8004c3c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c08:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c10:	f083 0320 	eor.w	r3, r3, #32
 8004c14:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
 8004c3a:	e01d      	b.n	8004c78 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cb4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3774      	adds	r7, #116	@ 0x74
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop

08004cc4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b08d      	sub	sp, #52	@ 0x34
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	7b1b      	ldrb	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 808e 	bne.w	8004df4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d044      	beq.n	8004d6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	81bb      	strh	r3, [r7, #12]
 8004cee:	89bb      	ldrh	r3, [r7, #12]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <USB_DeactivateEndpoint+0x6c>
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0e:	817b      	strh	r3, [r7, #10]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	441a      	add	r2, r3
 8004d1a:	897b      	ldrh	r3, [r7, #10]
 8004d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d46:	813b      	strh	r3, [r7, #8]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	893b      	ldrh	r3, [r7, #8]
 8004d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]
 8004d68:	e192      	b.n	8005090 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	827b      	strh	r3, [r7, #18]
 8004d78:	8a7b      	ldrh	r3, [r7, #18]
 8004d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01b      	beq.n	8004dba <USB_DeactivateEndpoint+0xf6>
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d98:	823b      	strh	r3, [r7, #16]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	8a3b      	ldrh	r3, [r7, #16]
 8004da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd0:	81fb      	strh	r3, [r7, #14]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	441a      	add	r2, r3
 8004ddc:	89fb      	ldrh	r3, [r7, #14]
 8004dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8013      	strh	r3, [r2, #0]
 8004df2:	e14d      	b.n	8005090 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f040 80a5 	bne.w	8004f48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	843b      	strh	r3, [r7, #32]
 8004e0c:	8c3b      	ldrh	r3, [r7, #32]
 8004e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01b      	beq.n	8004e4e <USB_DeactivateEndpoint+0x18a>
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2c:	83fb      	strh	r3, [r7, #30]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	8bfb      	ldrh	r3, [r7, #30]
 8004e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	83bb      	strh	r3, [r7, #28]
 8004e5c:	8bbb      	ldrh	r3, [r7, #28]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01b      	beq.n	8004e9e <USB_DeactivateEndpoint+0x1da>
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7c:	837b      	strh	r3, [r7, #26]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	8b7b      	ldrh	r3, [r7, #26]
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb4:	833b      	strh	r3, [r7, #24]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	8b3b      	ldrh	r3, [r7, #24]
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ece:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eec:	82fb      	strh	r3, [r7, #22]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	8afb      	ldrh	r3, [r7, #22]
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f24:	82bb      	strh	r3, [r7, #20]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	8abb      	ldrh	r3, [r7, #20]
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
 8004f46:	e0a3      	b.n	8005090 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01b      	beq.n	8004f98 <USB_DeactivateEndpoint+0x2d4>
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004fa6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01b      	beq.n	8004fe8 <USB_DeactivateEndpoint+0x324>
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fe0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800500c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501c:	b29b      	uxth	r3, r3
 800501e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005036:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005054:	b29b      	uxth	r3, r3
 8005056:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800506a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3734      	adds	r7, #52	@ 0x34
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b0c2      	sub	sp, #264	@ 0x108
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050aa:	6018      	str	r0, [r3, #0]
 80050ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	f040 86b7 	bne.w	8005e36 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699a      	ldr	r2, [r3, #24]
 80050d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d908      	bls.n	80050f6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80050f4:	e007      	b.n	8005106 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	7b1b      	ldrb	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d13a      	bne.n	800518c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6959      	ldr	r1, [r3, #20]
 8005122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	88da      	ldrh	r2, [r3, #6]
 800512e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005132:	b29b      	uxth	r3, r3
 8005134:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005138:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f001 fc9c 	bl	8006a7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800515c:	b29b      	uxth	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4413      	add	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800516a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	011a      	lsls	r2, r3, #4
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	801a      	strh	r2, [r3, #0]
 8005188:	f000 be1f 	b.w	8005dca <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800518c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	78db      	ldrb	r3, [r3, #3]
 8005198:	2b02      	cmp	r3, #2
 800519a:	f040 8462 	bne.w	8005a62 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800519e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	f240 83df 	bls.w	800597a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80051e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800520c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005228:	1ad2      	subs	r2, r2, r3
 800522a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 81c7 	beq.w	80055ec <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800525e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005262:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	633b      	str	r3, [r7, #48]	@ 0x30
 800526a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d177      	bne.n	800536a <USB_EPStartXfer+0x2ce>
 800527a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	4413      	add	r3, r2
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	011a      	lsls	r2, r3, #4
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80052cc:	d921      	bls.n	8005312 <USB_EPStartXfer+0x276>
 80052ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <USB_EPStartXfer+0x252>
 80052e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052e8:	3b01      	subs	r3, #1
 80052ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	029b      	lsls	r3, r3, #10
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4313      	orrs	r3, r2
 8005300:	b29b      	uxth	r3, r3
 8005302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530a:	b29a      	uxth	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	801a      	strh	r2, [r3, #0]
 8005310:	e050      	b.n	80053b4 <USB_EPStartXfer+0x318>
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <USB_EPStartXfer+0x294>
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005328:	b29a      	uxth	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	e041      	b.n	80053b4 <USB_EPStartXfer+0x318>
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <USB_EPStartXfer+0x2b4>
 8005346:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800534a:	3301      	adds	r3, #1
 800534c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29a      	uxth	r2, r3
 8005356:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800535a:	b29b      	uxth	r3, r3
 800535c:	029b      	lsls	r3, r3, #10
 800535e:	b29b      	uxth	r3, r3
 8005360:	4313      	orrs	r3, r2
 8005362:	b29a      	uxth	r2, r3
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e024      	b.n	80053b4 <USB_EPStartXfer+0x318>
 800536a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d11c      	bne.n	80053b4 <USB_EPStartXfer+0x318>
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	4413      	add	r3, r2
 8005390:	633b      	str	r3, [r7, #48]	@ 0x30
 8005392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	895b      	ldrh	r3, [r3, #10]
 80053c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6959      	ldr	r1, [r3, #20]
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053e2:	6800      	ldr	r0, [r0, #0]
 80053e4:	f001 fb49 	bl	8006a7a <USB_WritePMA>
            ep->xfer_buff += len;
 80053e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f8:	441a      	add	r2, r3
 80053fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d90f      	bls.n	8005442 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	621a      	str	r2, [r3, #32]
 8005440:	e00e      	b.n	8005460 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2200      	movs	r2, #0
 800545e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d177      	bne.n	8005560 <USB_EPStartXfer+0x4c4>
 8005470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	4413      	add	r3, r2
 80054a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80054c2:	d921      	bls.n	8005508 <USB_EPStartXfer+0x46c>
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <USB_EPStartXfer+0x448>
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054de:	3b01      	subs	r3, #1
 80054e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005500:	b29a      	uxth	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	e056      	b.n	80055b6 <USB_EPStartXfer+0x51a>
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <USB_EPStartXfer+0x48a>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551e:	b29a      	uxth	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	e047      	b.n	80055b6 <USB_EPStartXfer+0x51a>
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <USB_EPStartXfer+0x4aa>
 800553c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005540:	3301      	adds	r3, #1
 8005542:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29a      	uxth	r2, r3
 800554c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005550:	b29b      	uxth	r3, r3
 8005552:	029b      	lsls	r3, r3, #10
 8005554:	b29b      	uxth	r3, r3
 8005556:	4313      	orrs	r3, r2
 8005558:	b29a      	uxth	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	801a      	strh	r2, [r3, #0]
 800555e:	e02a      	b.n	80055b6 <USB_EPStartXfer+0x51a>
 8005560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d122      	bne.n	80055b6 <USB_EPStartXfer+0x51a>
 8005570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	623b      	str	r3, [r7, #32]
 800557c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	4413      	add	r3, r2
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	891b      	ldrh	r3, [r3, #8]
 80055c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6959      	ldr	r1, [r3, #20]
 80055d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055e4:	6800      	ldr	r0, [r0, #0]
 80055e6:	f001 fa48 	bl	8006a7a <USB_WritePMA>
 80055ea:	e3ee      	b.n	8005dca <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d177      	bne.n	80056ec <USB_EPStartXfer+0x650>
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005616:	b29b      	uxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800561c:	4413      	add	r3, r2
 800561e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	011a      	lsls	r2, r3, #4
 800562e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005630:	4413      	add	r3, r2
 8005632:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005636:	647b      	str	r3, [r7, #68]	@ 0x44
 8005638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005642:	b29a      	uxth	r2, r3
 8005644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564c:	2b3e      	cmp	r3, #62	@ 0x3e
 800564e:	d921      	bls.n	8005694 <USB_EPStartXfer+0x5f8>
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800565a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <USB_EPStartXfer+0x5d4>
 8005666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800566a:	3b01      	subs	r3, #1
 800566c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29a      	uxth	r2, r3
 8005676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800567a:	b29b      	uxth	r3, r3
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	b29b      	uxth	r3, r3
 8005680:	4313      	orrs	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568c:	b29a      	uxth	r2, r3
 800568e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e056      	b.n	8005742 <USB_EPStartXfer+0x6a6>
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <USB_EPStartXfer+0x616>
 800569c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	e047      	b.n	8005742 <USB_EPStartXfer+0x6a6>
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <USB_EPStartXfer+0x636>
 80056c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056cc:	3301      	adds	r3, #1
 80056ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056dc:	b29b      	uxth	r3, r3
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	e02a      	b.n	8005742 <USB_EPStartXfer+0x6a6>
 80056ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d122      	bne.n	8005742 <USB_EPStartXfer+0x6a6>
 80056fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	653b      	str	r3, [r7, #80]	@ 0x50
 8005708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571c:	4413      	add	r3, r2
 800571e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	011a      	lsls	r2, r3, #4
 800572e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005730:	4413      	add	r3, r2
 8005732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573c:	b29a      	uxth	r2, r3
 800573e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005740:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	891b      	ldrh	r3, [r3, #8]
 800574e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6959      	ldr	r1, [r3, #20]
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005762:	b29b      	uxth	r3, r3
 8005764:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005768:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800576c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005770:	6800      	ldr	r0, [r0, #0]
 8005772:	f001 f982 	bl	8006a7a <USB_WritePMA>
            ep->xfer_buff += len;
 8005776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005786:	441a      	add	r2, r3
 8005788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a1a      	ldr	r2, [r3, #32]
 80057a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d90f      	bls.n	80057d0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c0:	1ad2      	subs	r2, r2, r3
 80057c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	621a      	str	r2, [r3, #32]
 80057ce:	e00e      	b.n	80057ee <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d177      	bne.n	80058fa <USB_EPStartXfer+0x85e>
 800580a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005824:	b29b      	uxth	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	4413      	add	r3, r2
 800582c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	011a      	lsls	r2, r3, #4
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	4413      	add	r3, r2
 8005840:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005844:	637b      	str	r3, [r7, #52]	@ 0x34
 8005846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005850:	b29a      	uxth	r2, r3
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	2b3e      	cmp	r3, #62	@ 0x3e
 800585c:	d921      	bls.n	80058a2 <USB_EPStartXfer+0x806>
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <USB_EPStartXfer+0x7e2>
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005878:	3b01      	subs	r3, #1
 800587a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800587e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29a      	uxth	r2, r3
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29b      	uxth	r3, r3
 800588e:	4313      	orrs	r3, r2
 8005890:	b29b      	uxth	r3, r3
 8005892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589a:	b29a      	uxth	r2, r3
 800589c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e050      	b.n	8005944 <USB_EPStartXfer+0x8a8>
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <USB_EPStartXfer+0x824>
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e041      	b.n	8005944 <USB_EPStartXfer+0x8a8>
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <USB_EPStartXfer+0x844>
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	3301      	adds	r3, #1
 80058dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	029b      	lsls	r3, r3, #10
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4313      	orrs	r3, r2
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e024      	b.n	8005944 <USB_EPStartXfer+0x8a8>
 80058fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d11c      	bne.n	8005944 <USB_EPStartXfer+0x8a8>
 800590a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005918:	b29b      	uxth	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800591e:	4413      	add	r3, r2
 8005920:	643b      	str	r3, [r7, #64]	@ 0x40
 8005922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	011a      	lsls	r2, r3, #4
 8005930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005932:	4413      	add	r3, r2
 8005934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593e:	b29a      	uxth	r2, r3
 8005940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005942:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	895b      	ldrh	r3, [r3, #10]
 8005950:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6959      	ldr	r1, [r3, #20]
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005964:	b29b      	uxth	r3, r3
 8005966:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800596a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800596e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005972:	6800      	ldr	r0, [r0, #0]
 8005974:	f001 f881 	bl	8006a7a <USB_WritePMA>
 8005978:	e227      	b.n	8005dca <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800597a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800598a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80059ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80059b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a06:	4413      	add	r3, r2
 8005a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	011a      	lsls	r2, r3, #4
 8005a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	891b      	ldrh	r3, [r3, #8]
 8005a38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6959      	ldr	r1, [r3, #20]
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	f001 f80d 	bl	8006a7a <USB_WritePMA>
 8005a60:	e1b3      	b.n	8005dca <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a1a      	ldr	r2, [r3, #32]
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80c6 	beq.w	8005c34 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d177      	bne.n	8005bb4 <USB_EPStartXfer+0xb18>
 8005ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ae4:	4413      	add	r3, r2
 8005ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	011a      	lsls	r2, r3, #4
 8005af6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005afe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b16:	d921      	bls.n	8005b5c <USB_EPStartXfer+0xac0>
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <USB_EPStartXfer+0xa9c>
 8005b2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b32:	3b01      	subs	r3, #1
 8005b34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	029b      	lsls	r3, r3, #10
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	e050      	b.n	8005bfe <USB_EPStartXfer+0xb62>
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <USB_EPStartXfer+0xade>
 8005b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e041      	b.n	8005bfe <USB_EPStartXfer+0xb62>
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <USB_EPStartXfer+0xafe>
 8005b90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	e024      	b.n	8005bfe <USB_EPStartXfer+0xb62>
 8005bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d11c      	bne.n	8005bfe <USB_EPStartXfer+0xb62>
 8005bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bd8:	4413      	add	r3, r2
 8005bda:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	895b      	ldrh	r3, [r3, #10]
 8005c0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6959      	ldr	r1, [r3, #20]
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f000 ff24 	bl	8006a7a <USB_WritePMA>
 8005c32:	e0ca      	b.n	8005dca <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d177      	bne.n	8005d34 <USB_EPStartXfer+0xc98>
 8005c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c64:	4413      	add	r3, r2
 8005c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c78:	4413      	add	r3, r2
 8005c7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c94:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c96:	d921      	bls.n	8005cdc <USB_EPStartXfer+0xc40>
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <USB_EPStartXfer+0xc1c>
 8005cae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	e05c      	b.n	8005d96 <USB_EPStartXfer+0xcfa>
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <USB_EPStartXfer+0xc5e>
 8005ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e04d      	b.n	8005d96 <USB_EPStartXfer+0xcfa>
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <USB_EPStartXfer+0xc7e>
 8005d10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d14:	3301      	adds	r3, #1
 8005d16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	e030      	b.n	8005d96 <USB_EPStartXfer+0xcfa>
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d128      	bne.n	8005d96 <USB_EPStartXfer+0xcfa>
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d68:	4413      	add	r3, r2
 8005d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	011a      	lsls	r2, r3, #4
 8005d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	891b      	ldrh	r3, [r3, #8]
 8005da2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6959      	ldr	r1, [r3, #20]
 8005db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005dbc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dc0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005dc4:	6800      	ldr	r0, [r0, #0]
 8005dc6:	f000 fe58 	bl	8006a7a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df0:	817b      	strh	r3, [r7, #10]
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	f083 0310 	eor.w	r3, r3, #16
 8005df8:	817b      	strh	r3, [r7, #10]
 8005dfa:	897b      	ldrh	r3, [r7, #10]
 8005dfc:	f083 0320 	eor.w	r3, r3, #32
 8005e00:	817b      	strh	r3, [r7, #10]
 8005e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	897b      	ldrh	r3, [r7, #10]
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
 8005e32:	f000 bcde 	b.w	80067f2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	7b1b      	ldrb	r3, [r3, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 80bb 	bne.w	8005fbe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d917      	bls.n	8005e94 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699a      	ldr	r2, [r3, #24]
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e84:	1ad2      	subs	r2, r2, r3
 8005e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	619a      	str	r2, [r3, #24]
 8005e92:	e00e      	b.n	8005eb2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	011a      	lsls	r2, r3, #4
 8005eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f12:	d924      	bls.n	8005f5e <USB_EPStartXfer+0xec2>
 8005f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <USB_EPStartXfer+0xe98>
 8005f2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	029b      	lsls	r3, r3, #10
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	f000 bc10 	b.w	800677e <USB_EPStartXfer+0x16e2>
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10c      	bne.n	8005f80 <USB_EPStartXfer+0xee4>
 8005f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	e3fe      	b.n	800677e <USB_EPStartXfer+0x16e2>
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <USB_EPStartXfer+0xf04>
 8005f96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	029b      	lsls	r3, r3, #10
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e3df      	b.n	800677e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	78db      	ldrb	r3, [r3, #3]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	f040 8218 	bne.w	8006400 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 809d 	bne.w	800611c <USB_EPStartXfer+0x1080>
 8005fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006006:	4413      	add	r3, r2
 8006008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	011a      	lsls	r2, r3, #4
 800601a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800601e:	4413      	add	r3, r2
 8006020:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006034:	b29a      	uxth	r2, r3
 8006036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b3e      	cmp	r3, #62	@ 0x3e
 800604a:	d92b      	bls.n	80060a4 <USB_EPStartXfer+0x1008>
 800604c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <USB_EPStartXfer+0xfe0>
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006076:	3b01      	subs	r3, #1
 8006078:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800607c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29a      	uxth	r2, r3
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006088:	b29b      	uxth	r3, r3
 800608a:	029b      	lsls	r3, r3, #10
 800608c:	b29b      	uxth	r3, r3
 800608e:	4313      	orrs	r3, r2
 8006090:	b29b      	uxth	r3, r3
 8006092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e070      	b.n	8006186 <USB_EPStartXfer+0x10ea>
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10c      	bne.n	80060ce <USB_EPStartXfer+0x1032>
 80060b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	e05b      	b.n	8006186 <USB_EPStartXfer+0x10ea>
 80060ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d004      	beq.n	80060fe <USB_EPStartXfer+0x1062>
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f8:	3301      	adds	r3, #1
 80060fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610a:	b29b      	uxth	r3, r3
 800610c:	029b      	lsls	r3, r3, #10
 800610e:	b29b      	uxth	r3, r3
 8006110:	4313      	orrs	r3, r2
 8006112:	b29a      	uxth	r2, r3
 8006114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e034      	b.n	8006186 <USB_EPStartXfer+0x10ea>
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d12c      	bne.n	8006186 <USB_EPStartXfer+0x10ea>
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800613a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006150:	4413      	add	r3, r2
 8006152:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	011a      	lsls	r2, r3, #4
 8006164:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006168:	4413      	add	r3, r2
 800616a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800616e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	b29a      	uxth	r2, r3
 8006180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f040 809d 	bne.w	80062e0 <USB_EPStartXfer+0x1244>
 80061a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061ca:	4413      	add	r3, r2
 80061cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	011a      	lsls	r2, r3, #4
 80061de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e2:	4413      	add	r3, r2
 80061e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b3e      	cmp	r3, #62	@ 0x3e
 800620e:	d92b      	bls.n	8006268 <USB_EPStartXfer+0x11cc>
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <USB_EPStartXfer+0x11a4>
 8006236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800623a:	3b01      	subs	r3, #1
 800623c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29a      	uxth	r2, r3
 8006248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624c:	b29b      	uxth	r3, r3
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	b29b      	uxth	r3, r3
 8006252:	4313      	orrs	r3, r2
 8006254:	b29b      	uxth	r3, r3
 8006256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625e:	b29a      	uxth	r2, r3
 8006260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	e069      	b.n	800633c <USB_EPStartXfer+0x12a0>
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10c      	bne.n	8006292 <USB_EPStartXfer+0x11f6>
 8006278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	e054      	b.n	800633c <USB_EPStartXfer+0x12a0>
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <USB_EPStartXfer+0x1226>
 80062b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062bc:	3301      	adds	r3, #1
 80062be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	029b      	lsls	r3, r3, #10
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e02d      	b.n	800633c <USB_EPStartXfer+0x12a0>
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d125      	bne.n	800633c <USB_EPStartXfer+0x12a0>
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006306:	4413      	add	r3, r2
 8006308:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800630c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	011a      	lsls	r2, r3, #4
 800631a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800631e:	4413      	add	r3, r2
 8006320:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800633a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800633c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8218 	beq.w	800677e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800634e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800636e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <USB_EPStartXfer+0x12ea>
 800637a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800637e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10d      	bne.n	80063a2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006386:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800638a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 81f5 	bne.w	800677e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006394:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	f040 81ee 	bne.w	800677e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]
 80063fe:	e1be      	b.n	800677e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	78db      	ldrb	r3, [r3, #3]
 800640c:	2b01      	cmp	r3, #1
 800640e:	f040 81b4 	bne.w	800677a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	429a      	cmp	r2, r3
 800642c:	d917      	bls.n	800645e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	619a      	str	r2, [r3, #24]
 800645c:	e00e      	b.n	800647c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 8085 	bne.w	8006598 <USB_EPStartXfer+0x14fc>
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800649c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064b2:	4413      	add	r3, r2
 80064b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	011a      	lsls	r2, r3, #4
 80064c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064ca:	4413      	add	r3, r2
 80064cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ee:	d923      	bls.n	8006538 <USB_EPStartXfer+0x149c>
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <USB_EPStartXfer+0x1474>
 8006506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800650a:	3b01      	subs	r3, #1
 800650c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800651c:	b29b      	uxth	r3, r3
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	b29b      	uxth	r3, r3
 8006522:	4313      	orrs	r3, r2
 8006524:	b29b      	uxth	r3, r3
 8006526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652e:	b29a      	uxth	r2, r3
 8006530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	e060      	b.n	80065fa <USB_EPStartXfer+0x155e>
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10c      	bne.n	800655a <USB_EPStartXfer+0x14be>
 8006540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006550:	b29a      	uxth	r2, r3
 8006552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e04f      	b.n	80065fa <USB_EPStartXfer+0x155e>
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <USB_EPStartXfer+0x14de>
 8006570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006574:	3301      	adds	r3, #1
 8006576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800657a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29a      	uxth	r2, r3
 8006582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006586:	b29b      	uxth	r3, r3
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	b29b      	uxth	r3, r3
 800658c:	4313      	orrs	r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006594:	801a      	strh	r2, [r3, #0]
 8006596:	e030      	b.n	80065fa <USB_EPStartXfer+0x155e>
 8006598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d128      	bne.n	80065fa <USB_EPStartXfer+0x155e>
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065cc:	4413      	add	r3, r2
 80065ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	011a      	lsls	r2, r3, #4
 80065e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 8085 	bne.w	8006724 <USB_EPStartXfer+0x1688>
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006636:	b29b      	uxth	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800663e:	4413      	add	r3, r2
 8006640:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	011a      	lsls	r2, r3, #4
 8006652:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006656:	4413      	add	r3, r2
 8006658:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800665c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800666c:	b29a      	uxth	r2, r3
 800666e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	2b3e      	cmp	r3, #62	@ 0x3e
 800667a:	d923      	bls.n	80066c4 <USB_EPStartXfer+0x1628>
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <USB_EPStartXfer+0x1600>
 8006692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006696:	3b01      	subs	r3, #1
 8006698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800669c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	029b      	lsls	r3, r3, #10
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	e05c      	b.n	800677e <USB_EPStartXfer+0x16e2>
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10c      	bne.n	80066e6 <USB_EPStartXfer+0x164a>
 80066cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066dc:	b29a      	uxth	r2, r3
 80066de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	e04b      	b.n	800677e <USB_EPStartXfer+0x16e2>
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <USB_EPStartXfer+0x166a>
 80066fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006700:	3301      	adds	r3, #1
 8006702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006712:	b29b      	uxth	r3, r3
 8006714:	029b      	lsls	r3, r3, #10
 8006716:	b29b      	uxth	r3, r3
 8006718:	4313      	orrs	r3, r2
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	e02c      	b.n	800677e <USB_EPStartXfer+0x16e2>
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d124      	bne.n	800677e <USB_EPStartXfer+0x16e2>
 8006734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800674a:	4413      	add	r3, r2
 800674c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	011a      	lsls	r2, r3, #4
 800675e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006762:	4413      	add	r3, r2
 8006764:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006768:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006770:	b29a      	uxth	r2, r3
 8006772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	e001      	b.n	800677e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e03a      	b.n	80067f4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800677e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d020      	beq.n	8006852 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006826:	81bb      	strh	r3, [r7, #12]
 8006828:	89bb      	ldrh	r3, [r7, #12]
 800682a:	f083 0310 	eor.w	r3, r3, #16
 800682e:	81bb      	strh	r3, [r7, #12]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	89bb      	ldrh	r3, [r7, #12]
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
 8006850:	e01f      	b.n	8006892 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006868:	81fb      	strh	r3, [r7, #14]
 800686a:	89fb      	ldrh	r3, [r7, #14]
 800686c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006870:	81fb      	strh	r3, [r7, #14]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	89fb      	ldrh	r3, [r7, #14]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800689e:	b480      	push	{r7}
 80068a0:	b087      	sub	sp, #28
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	7b1b      	ldrb	r3, [r3, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 809d 	bne.w	80069ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d04c      	beq.n	8006954 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	823b      	strh	r3, [r7, #16]
 80068c8:	8a3b      	ldrh	r3, [r7, #16]
 80068ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01b      	beq.n	800690a <USB_EPClearStall+0x6c>
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e8:	81fb      	strh	r3, [r7, #14]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	89fb      	ldrh	r3, [r7, #14]
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006902:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	78db      	ldrb	r3, [r3, #3]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d06c      	beq.n	80069ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006928:	81bb      	strh	r3, [r7, #12]
 800692a:	89bb      	ldrh	r3, [r7, #12]
 800692c:	f083 0320 	eor.w	r3, r3, #32
 8006930:	81bb      	strh	r3, [r7, #12]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	89bb      	ldrh	r3, [r7, #12]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
 8006952:	e04b      	b.n	80069ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	82fb      	strh	r3, [r7, #22]
 8006962:	8afb      	ldrh	r3, [r7, #22]
 8006964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01b      	beq.n	80069a4 <USB_EPClearStall+0x106>
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800697e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006982:	82bb      	strh	r3, [r7, #20]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	8abb      	ldrh	r3, [r7, #20]
 8006990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800699c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ba:	827b      	strh	r3, [r7, #18]
 80069bc:	8a7b      	ldrh	r3, [r7, #18]
 80069be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069c2:	827b      	strh	r3, [r7, #18]
 80069c4:	8a7b      	ldrh	r3, [r7, #18]
 80069c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069ca:	827b      	strh	r3, [r7, #18]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	8a7b      	ldrh	r3, [r7, #18]
 80069d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2280      	movs	r2, #128	@ 0x80
 8006a0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a58:	68fb      	ldr	r3, [r7, #12]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b08b      	sub	sp, #44	@ 0x2c
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	4611      	mov	r1, r2
 8006a86:	461a      	mov	r2, r3
 8006a88:	460b      	mov	r3, r1
 8006a8a:	80fb      	strh	r3, [r7, #6]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a90:	88bb      	ldrh	r3, [r7, #4]
 8006a92:	3301      	adds	r3, #1
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	005a      	lsls	r2, r3, #1
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab2:	e01e      	b.n	8006af2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	3301      	adds	r3, #1
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	b21a      	sxth	r2, r3
 8006ac4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	8a7a      	ldrh	r2, [r7, #18]
 8006ad2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	3302      	adds	r3, #2
 8006ad8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	3302      	adds	r3, #2
 8006ade:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	3b01      	subs	r3, #1
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1dd      	bne.n	8006ab4 <USB_WritePMA+0x3a>
  }
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	372c      	adds	r7, #44	@ 0x2c
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b08b      	sub	sp, #44	@ 0x2c
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	460b      	mov	r3, r1
 8006b14:	80fb      	strh	r3, [r7, #6]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b1a:	88bb      	ldrh	r3, [r7, #4]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	005a      	lsls	r2, r3, #1
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b36:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3c:	e01b      	b.n	8006b76 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	3302      	adds	r3, #2
 8006b4a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	3b01      	subs	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e0      	bne.n	8006b3e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b7c:	88bb      	ldrh	r3, [r7, #4]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	701a      	strb	r2, [r3, #0]
  }
}
 8006b98:	bf00      	nop
 8006b9a:	372c      	adds	r7, #44	@ 0x2c
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006bae:	2304      	movs	r3, #4
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	2181      	movs	r1, #129	@ 0x81
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fc86 	bl	80084c6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006bc0:	2010      	movs	r0, #16
 8006bc2:	f001 fd95 	bl	80086f0 <USBD_static_malloc>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e005      	b.n	8006be8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006be2:	2200      	movs	r2, #0
 8006be4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006bfc:	2181      	movs	r1, #129	@ 0x81
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 fc87 	bl	8008512 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fd74 	bl	8008708 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c44:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d045      	beq.n	8006cee <USBD_HID_Setup+0xba>
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	f040 80d3 	bne.w	8006e0e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	3b02      	subs	r3, #2
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	d835      	bhi.n	8006cde <USBD_HID_Setup+0xaa>
 8006c72:	a201      	add	r2, pc, #4	@ (adr r2, 8006c78 <USBD_HID_Setup+0x44>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006ccf 	.word	0x08006ccf
 8006c7c:	08006caf 	.word	0x08006caf
 8006c80:	08006cdf 	.word	0x08006cdf
 8006c84:	08006cdf 	.word	0x08006cdf
 8006c88:	08006cdf 	.word	0x08006cdf
 8006c8c:	08006cdf 	.word	0x08006cdf
 8006c90:	08006cdf 	.word	0x08006cdf
 8006c94:	08006cdf 	.word	0x08006cdf
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006ca1 	.word	0x08006ca1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	885b      	ldrh	r3, [r3, #2]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	601a      	str	r2, [r3, #0]
          break;
 8006cac:	e01e      	b.n	8006cec <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 f957 	bl	8007f68 <USBD_CtlSendData>
          break;
 8006cba:	e017      	b.n	8006cec <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	885b      	ldrh	r3, [r3, #2]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]
          break;
 8006ccc:	e00e      	b.n	8006cec <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 f946 	bl	8007f68 <USBD_CtlSendData>
          break;
 8006cdc:	e006      	b.n	8006cec <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 f8d7 	bl	8007e94 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cea:	bf00      	nop
      }
      break;
 8006cec:	e096      	b.n	8006e1c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	2b0b      	cmp	r3, #11
 8006cf4:	f200 8083 	bhi.w	8006dfe <USBD_HID_Setup+0x1ca>
 8006cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <USBD_HID_Setup+0xcc>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d31 	.word	0x08006d31
 8006d04:	08006dff 	.word	0x08006dff
 8006d08:	08006dff 	.word	0x08006dff
 8006d0c:	08006dff 	.word	0x08006dff
 8006d10:	08006dff 	.word	0x08006dff
 8006d14:	08006dff 	.word	0x08006dff
 8006d18:	08006d59 	.word	0x08006d59
 8006d1c:	08006dff 	.word	0x08006dff
 8006d20:	08006dff 	.word	0x08006dff
 8006d24:	08006dff 	.word	0x08006dff
 8006d28:	08006db1 	.word	0x08006db1
 8006d2c:	08006dd9 	.word	0x08006dd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d107      	bne.n	8006d4a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d3a:	f107 030e 	add.w	r3, r7, #14
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 f910 	bl	8007f68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d48:	e060      	b.n	8006e0c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 f8a1 	bl	8007e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d52:	2302      	movs	r3, #2
 8006d54:	75fb      	strb	r3, [r7, #23]
          break;
 8006d56:	e059      	b.n	8006e0c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	885b      	ldrh	r3, [r3, #2]
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b22      	cmp	r3, #34	@ 0x22
 8006d62:	d108      	bne.n	8006d76 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d6a:	bf28      	it	cs
 8006d6c:	233f      	movcs	r3, #63	@ 0x3f
 8006d6e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006d70:	4b2d      	ldr	r3, [pc, #180]	@ (8006e28 <USBD_HID_Setup+0x1f4>)
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	e015      	b.n	8006da2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b21      	cmp	r3, #33	@ 0x21
 8006d80:	d108      	bne.n	8006d94 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006d82:	4b2a      	ldr	r3, [pc, #168]	@ (8006e2c <USBD_HID_Setup+0x1f8>)
 8006d84:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	bf28      	it	cs
 8006d8e:	2309      	movcs	r3, #9
 8006d90:	83fb      	strh	r3, [r7, #30]
 8006d92:	e006      	b.n	8006da2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 f87c 	bl	8007e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	75fb      	strb	r3, [r7, #23]
            break;
 8006da0:	e034      	b.n	8006e0c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006da2:	8bfb      	ldrh	r3, [r7, #30]
 8006da4:	461a      	mov	r2, r3
 8006da6:	69b9      	ldr	r1, [r7, #24]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f8dd 	bl	8007f68 <USBD_CtlSendData>
          break;
 8006dae:	e02d      	b.n	8006e0c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d107      	bne.n	8006dca <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 f8d0 	bl	8007f68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc8:	e020      	b.n	8006e0c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f861 	bl	8007e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd6:	e019      	b.n	8006e0c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d106      	bne.n	8006df0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dee:	e00d      	b.n	8006e0c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 f84e 	bl	8007e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	75fb      	strb	r3, [r7, #23]
          break;
 8006dfc:	e006      	b.n	8006e0c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f847 	bl	8007e94 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e06:	2302      	movs	r3, #2
 8006e08:	75fb      	strb	r3, [r7, #23]
          break;
 8006e0a:	bf00      	nop
      }
      break;
 8006e0c:	e006      	b.n	8006e1c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f83f 	bl	8007e94 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1a:	bf00      	nop
  }

  return ret;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	200000c8 	.word	0x200000c8
 8006e2c:	200000b0 	.word	0x200000b0

08006e30 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e44:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d10c      	bne.n	8006e6a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	7b1b      	ldrb	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d108      	bne.n	8006e6a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	2181      	movs	r1, #129	@ 0x81
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f001 fbfc 	bl	8008662 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7c1b      	ldrb	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8006e88:	2308      	movs	r3, #8
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e001      	b.n	8006e92 <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8006e8e:	230a      	movs	r3, #10
 8006e90:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8006e92:	68fb      	ldr	r3, [r7, #12]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr
	...

08006ea0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2222      	movs	r2, #34	@ 0x22
 8006eac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006eae:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000044 	.word	0x20000044

08006ec0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2222      	movs	r2, #34	@ 0x22
 8006ecc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006ece:	4b03      	ldr	r3, [pc, #12]	@ (8006edc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000068 	.word	0x20000068

08006ee0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2222      	movs	r2, #34	@ 0x22
 8006eec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006eee:	4b03      	ldr	r3, [pc, #12]	@ (8006efc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	2000008c 	.word	0x2000008c

08006f00 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f12:	2200      	movs	r2, #0
 8006f14:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr
	...

08006f24 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	220a      	movs	r2, #10
 8006f30:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	@ (8006f40 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	200000bc 	.word	0x200000bc

08006f44 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e01a      	b.n	8006f92 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	79fa      	ldrb	r2, [r7, #7]
 8006f88:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f001 fa38 	bl	8008400 <USBD_LL_Init>

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d006      	beq.n	8006fbc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
 8006fba:	e001      	b.n	8006fc0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fa5b 	bl	8008490 <USBD_LL_Start>

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007004:	2302      	movs	r3, #2
 8007006:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00c      	beq.n	800702c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	4611      	mov	r1, r2
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	4611      	mov	r1, r2
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3

  return USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fed7 	bl	8007e22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007090:	f003 031f 	and.w	r3, r3, #31
 8007094:	2b02      	cmp	r3, #2
 8007096:	d016      	beq.n	80070c6 <USBD_LL_SetupStage+0x6a>
 8007098:	2b02      	cmp	r3, #2
 800709a:	d81c      	bhi.n	80070d6 <USBD_LL_SetupStage+0x7a>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <USBD_LL_SetupStage+0x4a>
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d008      	beq.n	80070b6 <USBD_LL_SetupStage+0x5a>
 80070a4:	e017      	b.n	80070d6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9ca 	bl	8007448 <USBD_StdDevReq>
      break;
 80070b4:	e01a      	b.n	80070ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa2c 	bl	800751c <USBD_StdItfReq>
      break;
 80070c4:	e012      	b.n	80070ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa6c 	bl	80075ac <USBD_StdEPReq>
      break;
 80070d4:	e00a      	b.n	80070ec <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fa33 	bl	8008550 <USBD_LL_StallEP>
      break;
 80070ea:	bf00      	nop
  }

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b086      	sub	sp, #24
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	460b      	mov	r3, r1
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d14b      	bne.n	80071a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007110:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007118:	2b03      	cmp	r3, #3
 800711a:	d134      	bne.n	8007186 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d919      	bls.n	800715c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800713e:	429a      	cmp	r2, r3
 8007140:	d203      	bcs.n	800714a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007146:	b29b      	uxth	r3, r3
 8007148:	e002      	b.n	8007150 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800714e:	b29b      	uxth	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 ff35 	bl	8007fc4 <USBD_CtlContinueRx>
 800715a:	e038      	b.n	80071ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800716e:	2b03      	cmp	r3, #3
 8007170:	d105      	bne.n	800717e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 ff32 	bl	8007fe8 <USBD_CtlSendStatus>
 8007184:	e023      	b.n	80071ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800718c:	2b05      	cmp	r3, #5
 800718e:	d11e      	bne.n	80071ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007198:	2100      	movs	r1, #0
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f001 f9d8 	bl	8008550 <USBD_LL_StallEP>
 80071a0:	e015      	b.n	80071ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00d      	beq.n	80071ca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d108      	bne.n	80071ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	7afa      	ldrb	r2, [r7, #11]
 80071c2:	4611      	mov	r1, r2
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	4798      	blx	r3
 80071c8:	e001      	b.n	80071ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071ca:	2302      	movs	r3, #2
 80071cc:	e000      	b.n	80071d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	460b      	mov	r3, r1
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d17f      	bne.n	80072ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3314      	adds	r3, #20
 80071f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d15c      	bne.n	80072b6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	429a      	cmp	r2, r3
 8007206:	d915      	bls.n	8007234 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	1ad2      	subs	r2, r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 febd 	bl	8007fa0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007226:	2300      	movs	r3, #0
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f001 fa3b 	bl	80086a8 <USBD_LL_PrepareReceive>
 8007232:	e04e      	b.n	80072d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	6912      	ldr	r2, [r2, #16]
 800723c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007240:	fb01 f202 	mul.w	r2, r1, r2
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d11c      	bne.n	8007284 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007252:	429a      	cmp	r2, r3
 8007254:	d316      	bcc.n	8007284 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007260:	429a      	cmp	r2, r3
 8007262:	d20f      	bcs.n	8007284 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fe99 	bl	8007fa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007276:	2300      	movs	r3, #0
 8007278:	2200      	movs	r2, #0
 800727a:	2100      	movs	r1, #0
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f001 fa13 	bl	80086a8 <USBD_LL_PrepareReceive>
 8007282:	e026      	b.n	80072d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007296:	2b03      	cmp	r3, #3
 8007298:	d105      	bne.n	80072a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072a6:	2180      	movs	r1, #128	@ 0x80
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f001 f951 	bl	8008550 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fead 	bl	800800e <USBD_CtlReceiveStatus>
 80072b4:	e00d      	b.n	80072d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d004      	beq.n	80072ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80072ca:	2180      	movs	r1, #128	@ 0x80
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f001 f93f 	bl	8008550 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d11d      	bne.n	8007318 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff fe81 	bl	8006fe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072ea:	e015      	b.n	8007318 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d108      	bne.n	8007314 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	7afa      	ldrb	r2, [r7, #11]
 800730c:	4611      	mov	r1, r2
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	4798      	blx	r3
 8007312:	e001      	b.n	8007318 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007314:	2302      	movs	r3, #2
 8007316:	e000      	b.n	800731a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800732a:	2340      	movs	r3, #64	@ 0x40
 800732c:	2200      	movs	r2, #0
 800732e:	2100      	movs	r1, #0
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f8c8 	bl	80084c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2240      	movs	r2, #64	@ 0x40
 8007342:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007346:	2340      	movs	r3, #64	@ 0x40
 8007348:	2200      	movs	r2, #0
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f8ba 	bl	80084c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2240      	movs	r2, #64	@ 0x40
 800735c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6852      	ldr	r2, [r2, #4]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	4611      	mov	r1, r2
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
  }

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	78fa      	ldrb	r2, [r7, #3]
 80073b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr

080073c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2204      	movs	r2, #4
 80073da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d105      	bne.n	8007408 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007422:	2b03      	cmp	r3, #3
 8007424:	d10b      	bne.n	800743e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800745e:	2b40      	cmp	r3, #64	@ 0x40
 8007460:	d005      	beq.n	800746e <USBD_StdDevReq+0x26>
 8007462:	2b40      	cmp	r3, #64	@ 0x40
 8007464:	d84f      	bhi.n	8007506 <USBD_StdDevReq+0xbe>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <USBD_StdDevReq+0x36>
 800746a:	2b20      	cmp	r3, #32
 800746c:	d14b      	bne.n	8007506 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
      break;
 800747c:	e048      	b.n	8007510 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b09      	cmp	r3, #9
 8007484:	d839      	bhi.n	80074fa <USBD_StdDevReq+0xb2>
 8007486:	a201      	add	r2, pc, #4	@ (adr r2, 800748c <USBD_StdDevReq+0x44>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074dd 	.word	0x080074dd
 8007490:	080074f1 	.word	0x080074f1
 8007494:	080074fb 	.word	0x080074fb
 8007498:	080074e7 	.word	0x080074e7
 800749c:	080074fb 	.word	0x080074fb
 80074a0:	080074bf 	.word	0x080074bf
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074fb 	.word	0x080074fb
 80074ac:	080074d3 	.word	0x080074d3
 80074b0:	080074c9 	.word	0x080074c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9dc 	bl	8007874 <USBD_GetDescriptor>
          break;
 80074bc:	e022      	b.n	8007504 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb3f 	bl	8007b44 <USBD_SetAddress>
          break;
 80074c6:	e01d      	b.n	8007504 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fb7e 	bl	8007bcc <USBD_SetConfig>
          break;
 80074d0:	e018      	b.n	8007504 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fc07 	bl	8007ce8 <USBD_GetConfig>
          break;
 80074da:	e013      	b.n	8007504 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fc37 	bl	8007d52 <USBD_GetStatus>
          break;
 80074e4:	e00e      	b.n	8007504 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fc65 	bl	8007db8 <USBD_SetFeature>
          break;
 80074ee:	e009      	b.n	8007504 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fc74 	bl	8007de0 <USBD_ClrFeature>
          break;
 80074f8:	e004      	b.n	8007504 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fcc9 	bl	8007e94 <USBD_CtlError>
          break;
 8007502:	bf00      	nop
      }
      break;
 8007504:	e004      	b.n	8007510 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fcc3 	bl	8007e94 <USBD_CtlError>
      break;
 800750e:	bf00      	nop
  }

  return ret;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop

0800751c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007532:	2b40      	cmp	r3, #64	@ 0x40
 8007534:	d005      	beq.n	8007542 <USBD_StdItfReq+0x26>
 8007536:	2b40      	cmp	r3, #64	@ 0x40
 8007538:	d82e      	bhi.n	8007598 <USBD_StdItfReq+0x7c>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <USBD_StdItfReq+0x26>
 800753e:	2b20      	cmp	r3, #32
 8007540:	d12a      	bne.n	8007598 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007548:	3b01      	subs	r3, #1
 800754a:	2b02      	cmp	r3, #2
 800754c:	d81d      	bhi.n	800758a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	889b      	ldrh	r3, [r3, #4]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	d813      	bhi.n	8007580 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
 8007566:	4603      	mov	r3, r0
 8007568:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	88db      	ldrh	r3, [r3, #6]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d110      	bne.n	8007594 <USBD_StdItfReq+0x78>
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10d      	bne.n	8007594 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fd35 	bl	8007fe8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800757e:	e009      	b.n	8007594 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fc86 	bl	8007e94 <USBD_CtlError>
          break;
 8007588:	e004      	b.n	8007594 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fc81 	bl	8007e94 <USBD_CtlError>
          break;
 8007592:	e000      	b.n	8007596 <USBD_StdItfReq+0x7a>
          break;
 8007594:	bf00      	nop
      }
      break;
 8007596:	e004      	b.n	80075a2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fc7a 	bl	8007e94 <USBD_CtlError>
      break;
 80075a0:	bf00      	nop
  }

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	889b      	ldrh	r3, [r3, #4]
 80075be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075c8:	2b40      	cmp	r3, #64	@ 0x40
 80075ca:	d007      	beq.n	80075dc <USBD_StdEPReq+0x30>
 80075cc:	2b40      	cmp	r3, #64	@ 0x40
 80075ce:	f200 8146 	bhi.w	800785e <USBD_StdEPReq+0x2b2>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <USBD_StdEPReq+0x40>
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	f040 8141 	bne.w	800785e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
      break;
 80075ea:	e13d      	b.n	8007868 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d10a      	bne.n	800760e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]

        return ret;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	e12d      	b.n	800786a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d007      	beq.n	8007626 <USBD_StdEPReq+0x7a>
 8007616:	2b03      	cmp	r3, #3
 8007618:	f300 811b 	bgt.w	8007852 <USBD_StdEPReq+0x2a6>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d072      	beq.n	8007706 <USBD_StdEPReq+0x15a>
 8007620:	2b01      	cmp	r3, #1
 8007622:	d03a      	beq.n	800769a <USBD_StdEPReq+0xee>
 8007624:	e115      	b.n	8007852 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800762c:	2b02      	cmp	r3, #2
 800762e:	d002      	beq.n	8007636 <USBD_StdEPReq+0x8a>
 8007630:	2b03      	cmp	r3, #3
 8007632:	d015      	beq.n	8007660 <USBD_StdEPReq+0xb4>
 8007634:	e02b      	b.n	800768e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00c      	beq.n	8007656 <USBD_StdEPReq+0xaa>
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b80      	cmp	r3, #128	@ 0x80
 8007640:	d009      	beq.n	8007656 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 ff82 	bl	8008550 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800764c:	2180      	movs	r1, #128	@ 0x80
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 ff7e 	bl	8008550 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007654:	e020      	b.n	8007698 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fc1b 	bl	8007e94 <USBD_CtlError>
              break;
 800765e:	e01b      	b.n	8007698 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	885b      	ldrh	r3, [r3, #2]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10e      	bne.n	8007686 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <USBD_StdEPReq+0xda>
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b80      	cmp	r3, #128	@ 0x80
 8007672:	d008      	beq.n	8007686 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	88db      	ldrh	r3, [r3, #6]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 ff65 	bl	8008550 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fcae 	bl	8007fe8 <USBD_CtlSendStatus>

              break;
 800768c:	e004      	b.n	8007698 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fbff 	bl	8007e94 <USBD_CtlError>
              break;
 8007696:	bf00      	nop
          }
          break;
 8007698:	e0e0      	b.n	800785c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0xfe>
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d015      	beq.n	80076d4 <USBD_StdEPReq+0x128>
 80076a8:	e026      	b.n	80076f8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00c      	beq.n	80076ca <USBD_StdEPReq+0x11e>
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b80      	cmp	r3, #128	@ 0x80
 80076b4:	d009      	beq.n	80076ca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 ff48 	bl	8008550 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076c0:	2180      	movs	r1, #128	@ 0x80
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 ff44 	bl	8008550 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076c8:	e01c      	b.n	8007704 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fbe1 	bl	8007e94 <USBD_CtlError>
              break;
 80076d2:	e017      	b.n	8007704 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	885b      	ldrh	r3, [r3, #2]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d112      	bne.n	8007702 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff4f 	bl	800858e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc79 	bl	8007fe8 <USBD_CtlSendStatus>
              }
              break;
 80076f6:	e004      	b.n	8007702 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fbca 	bl	8007e94 <USBD_CtlError>
              break;
 8007700:	e000      	b.n	8007704 <USBD_StdEPReq+0x158>
              break;
 8007702:	bf00      	nop
          }
          break;
 8007704:	e0aa      	b.n	800785c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800770c:	2b02      	cmp	r3, #2
 800770e:	d002      	beq.n	8007716 <USBD_StdEPReq+0x16a>
 8007710:	2b03      	cmp	r3, #3
 8007712:	d032      	beq.n	800777a <USBD_StdEPReq+0x1ce>
 8007714:	e097      	b.n	8007846 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <USBD_StdEPReq+0x180>
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b80      	cmp	r3, #128	@ 0x80
 8007720:	d004      	beq.n	800772c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fbb5 	bl	8007e94 <USBD_CtlError>
                break;
 800772a:	e091      	b.n	8007850 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800772c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	da0b      	bge.n	800774c <USBD_StdEPReq+0x1a0>
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	3310      	adds	r3, #16
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4413      	add	r3, r2
 8007748:	3304      	adds	r3, #4
 800774a:	e00b      	b.n	8007764 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	3304      	adds	r3, #4
 8007764:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2202      	movs	r2, #2
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fbf8 	bl	8007f68 <USBD_CtlSendData>
              break;
 8007778:	e06a      	b.n	8007850 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800777a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800777e:	2b00      	cmp	r3, #0
 8007780:	da11      	bge.n	80077a6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	f003 020f 	and.w	r2, r3, #15
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	440b      	add	r3, r1
 8007794:	3318      	adds	r3, #24
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d117      	bne.n	80077cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fb78 	bl	8007e94 <USBD_CtlError>
                  break;
 80077a4:	e054      	b.n	8007850 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	f003 020f 	and.w	r2, r3, #15
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fb65 	bl	8007e94 <USBD_CtlError>
                  break;
 80077ca:	e041      	b.n	8007850 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da0b      	bge.n	80077ec <USBD_StdEPReq+0x240>
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	3310      	adds	r3, #16
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4413      	add	r3, r2
 80077e8:	3304      	adds	r3, #4
 80077ea:	e00b      	b.n	8007804 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	3304      	adds	r3, #4
 8007804:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <USBD_StdEPReq+0x266>
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b80      	cmp	r3, #128	@ 0x80
 8007810:	d103      	bne.n	800781a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	e00e      	b.n	8007838 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fed4 	bl	80085cc <USBD_LL_IsStallEP>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2201      	movs	r2, #1
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e002      	b.n	8007838 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2202      	movs	r2, #2
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fb92 	bl	8007f68 <USBD_CtlSendData>
              break;
 8007844:	e004      	b.n	8007850 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fb23 	bl	8007e94 <USBD_CtlError>
              break;
 800784e:	bf00      	nop
          }
          break;
 8007850:	e004      	b.n	800785c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fb1d 	bl	8007e94 <USBD_CtlError>
          break;
 800785a:	bf00      	nop
      }
      break;
 800785c:	e004      	b.n	8007868 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fb17 	bl	8007e94 <USBD_CtlError>
      break;
 8007866:	bf00      	nop
  }

  return ret;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	2b06      	cmp	r3, #6
 8007896:	f200 8128 	bhi.w	8007aea <USBD_GetDescriptor+0x276>
 800789a:	a201      	add	r2, pc, #4	@ (adr r2, 80078a0 <USBD_GetDescriptor+0x2c>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078bd 	.word	0x080078bd
 80078a4:	080078d5 	.word	0x080078d5
 80078a8:	08007915 	.word	0x08007915
 80078ac:	08007aeb 	.word	0x08007aeb
 80078b0:	08007aeb 	.word	0x08007aeb
 80078b4:	08007a8b 	.word	0x08007a8b
 80078b8:	08007ab7 	.word	0x08007ab7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	7c12      	ldrb	r2, [r2, #16]
 80078c8:	f107 0108 	add.w	r1, r7, #8
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	60f8      	str	r0, [r7, #12]
      break;
 80078d2:	e112      	b.n	8007afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	7c1b      	ldrb	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10d      	bne.n	80078f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e4:	f107 0208 	add.w	r2, r7, #8
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3301      	adds	r3, #1
 80078f2:	2202      	movs	r2, #2
 80078f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078f6:	e100      	b.n	8007afa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007900:	f107 0208 	add.w	r2, r7, #8
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	2202      	movs	r2, #2
 8007910:	701a      	strb	r2, [r3, #0]
      break;
 8007912:	e0f2      	b.n	8007afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	885b      	ldrh	r3, [r3, #2]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b05      	cmp	r3, #5
 800791c:	f200 80ac 	bhi.w	8007a78 <USBD_GetDescriptor+0x204>
 8007920:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <USBD_GetDescriptor+0xb4>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007941 	.word	0x08007941
 800792c:	08007975 	.word	0x08007975
 8007930:	080079a9 	.word	0x080079a9
 8007934:	080079dd 	.word	0x080079dd
 8007938:	08007a11 	.word	0x08007a11
 800793c:	08007a45 	.word	0x08007a45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007962:	e091      	b.n	8007a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa94 	bl	8007e94 <USBD_CtlError>
            err++;
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	3301      	adds	r3, #1
 8007970:	72fb      	strb	r3, [r7, #11]
          break;
 8007972:	e089      	b.n	8007a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	f107 0108 	add.w	r1, r7, #8
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007996:	e077      	b.n	8007a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa7a 	bl	8007e94 <USBD_CtlError>
            err++;
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	3301      	adds	r3, #1
 80079a4:	72fb      	strb	r3, [r7, #11]
          break;
 80079a6:	e06f      	b.n	8007a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	7c12      	ldrb	r2, [r2, #16]
 80079c0:	f107 0108 	add.w	r1, r7, #8
 80079c4:	4610      	mov	r0, r2
 80079c6:	4798      	blx	r3
 80079c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ca:	e05d      	b.n	8007a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa60 	bl	8007e94 <USBD_CtlError>
            err++;
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	3301      	adds	r3, #1
 80079d8:	72fb      	strb	r3, [r7, #11]
          break;
 80079da:	e055      	b.n	8007a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	7c12      	ldrb	r2, [r2, #16]
 80079f4:	f107 0108 	add.w	r1, r7, #8
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fe:	e043      	b.n	8007a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa46 	bl	8007e94 <USBD_CtlError>
            err++;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0e:	e03b      	b.n	8007a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	7c12      	ldrb	r2, [r2, #16]
 8007a28:	f107 0108 	add.w	r1, r7, #8
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
 8007a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a32:	e029      	b.n	8007a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa2c 	bl	8007e94 <USBD_CtlError>
            err++;
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	72fb      	strb	r3, [r7, #11]
          break;
 8007a42:	e021      	b.n	8007a88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a66:	e00f      	b.n	8007a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa12 	bl	8007e94 <USBD_CtlError>
            err++;
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	3301      	adds	r3, #1
 8007a74:	72fb      	strb	r3, [r7, #11]
          break;
 8007a76:	e007      	b.n	8007a88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa0a 	bl	8007e94 <USBD_CtlError>
          err++;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	3301      	adds	r3, #1
 8007a84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a86:	e038      	b.n	8007afa <USBD_GetDescriptor+0x286>
 8007a88:	e037      	b.n	8007afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7c1b      	ldrb	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9a:	f107 0208 	add.w	r2, r7, #8
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	4798      	blx	r3
 8007aa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aa4:	e029      	b.n	8007afa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f9f3 	bl	8007e94 <USBD_CtlError>
        err++;
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab4:	e021      	b.n	8007afa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7c1b      	ldrb	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10d      	bne.n	8007ada <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac6:	f107 0208 	add.w	r2, r7, #8
 8007aca:	4610      	mov	r0, r2
 8007acc:	4798      	blx	r3
 8007ace:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	2207      	movs	r2, #7
 8007ad6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ad8:	e00f      	b.n	8007afa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f9d9 	bl	8007e94 <USBD_CtlError>
        err++;
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae8:	e007      	b.n	8007afa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f9d1 	bl	8007e94 <USBD_CtlError>
      err++;
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	3301      	adds	r3, #1
 8007af6:	72fb      	strb	r3, [r7, #11]
      break;
 8007af8:	bf00      	nop
  }

  if (err != 0U)
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d11c      	bne.n	8007b3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d011      	beq.n	8007b2a <USBD_GetDescriptor+0x2b6>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	88db      	ldrh	r3, [r3, #6]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	88da      	ldrh	r2, [r3, #6]
 8007b12:	893b      	ldrh	r3, [r7, #8]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	bf28      	it	cs
 8007b18:	4613      	movcs	r3, r2
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b1e:	893b      	ldrh	r3, [r7, #8]
 8007b20:	461a      	mov	r2, r3
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fa1f 	bl	8007f68 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	88db      	ldrh	r3, [r3, #6]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa58 	bl	8007fe8 <USBD_CtlSendStatus>
 8007b38:	e000      	b.n	8007b3c <USBD_GetDescriptor+0x2c8>
    return;
 8007b3a:	bf00      	nop
    }
  }
}
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop

08007b44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	889b      	ldrh	r3, [r3, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d130      	bne.n	8007bb8 <USBD_SetAddress+0x74>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	88db      	ldrh	r3, [r3, #6]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d12c      	bne.n	8007bb8 <USBD_SetAddress+0x74>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	885b      	ldrh	r3, [r3, #2]
 8007b62:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b64:	d828      	bhi.n	8007bb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d104      	bne.n	8007b86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f988 	bl	8007e94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	e01d      	b.n	8007bc2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7bfa      	ldrb	r2, [r7, #15]
 8007b8a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fd46 	bl	8008624 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa25 	bl	8007fe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bac:	e009      	b.n	8007bc2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	e004      	b.n	8007bc2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f96a 	bl	8007e94 <USBD_CtlError>
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	4b41      	ldr	r3, [pc, #260]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007bde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007be0:	4b40      	ldr	r3, [pc, #256]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d904      	bls.n	8007bf2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f952 	bl	8007e94 <USBD_CtlError>
 8007bf0:	e075      	b.n	8007cde <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d002      	beq.n	8007c02 <USBD_SetConfig+0x36>
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d023      	beq.n	8007c48 <USBD_SetConfig+0x7c>
 8007c00:	e062      	b.n	8007cc8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c02:	4b38      	ldr	r3, [pc, #224]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01a      	beq.n	8007c40 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2203      	movs	r2, #3
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c1c:	4b31      	ldr	r3, [pc, #196]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff f9e8 	bl	8006ff8 <USBD_SetClassConfig>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d104      	bne.n	8007c38 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f92f 	bl	8007e94 <USBD_CtlError>
            return;
 8007c36:	e052      	b.n	8007cde <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f9d5 	bl	8007fe8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c3e:	e04e      	b.n	8007cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9d1 	bl	8007fe8 <USBD_CtlSendStatus>
        break;
 8007c46:	e04a      	b.n	8007cde <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c48:	4b26      	ldr	r3, [pc, #152]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d112      	bne.n	8007c76 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c58:	4b22      	ldr	r3, [pc, #136]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c62:	4b20      	ldr	r3, [pc, #128]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff f9e4 	bl	8007036 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9ba 	bl	8007fe8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c74:	e033      	b.n	8007cde <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c76:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d01d      	beq.n	8007cc0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff f9d2 	bl	8007036 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c92:	4b14      	ldr	r3, [pc, #80]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff f9a8 	bl	8006ff8 <USBD_SetClassConfig>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d104      	bne.n	8007cb8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f8ef 	bl	8007e94 <USBD_CtlError>
            return;
 8007cb6:	e012      	b.n	8007cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f995 	bl	8007fe8 <USBD_CtlSendStatus>
        break;
 8007cbe:	e00e      	b.n	8007cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f991 	bl	8007fe8 <USBD_CtlSendStatus>
        break;
 8007cc6:	e00a      	b.n	8007cde <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f8e2 	bl	8007e94 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007cd0:	4b04      	ldr	r3, [pc, #16]	@ (8007ce4 <USBD_SetConfig+0x118>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff f9ad 	bl	8007036 <USBD_ClrClassConfig>
        break;
 8007cdc:	bf00      	nop
    }
  }
}
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000214 	.word	0x20000214

08007ce8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	88db      	ldrh	r3, [r3, #6]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d004      	beq.n	8007d04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f8c9 	bl	8007e94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d02:	e022      	b.n	8007d4a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	dc02      	bgt.n	8007d14 <USBD_GetConfig+0x2c>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	dc03      	bgt.n	8007d1a <USBD_GetConfig+0x32>
 8007d12:	e015      	b.n	8007d40 <USBD_GetConfig+0x58>
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d00b      	beq.n	8007d30 <USBD_GetConfig+0x48>
 8007d18:	e012      	b.n	8007d40 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3308      	adds	r3, #8
 8007d24:	2201      	movs	r2, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f91d 	bl	8007f68 <USBD_CtlSendData>
        break;
 8007d2e:	e00c      	b.n	8007d4a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	2201      	movs	r2, #1
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f915 	bl	8007f68 <USBD_CtlSendData>
        break;
 8007d3e:	e004      	b.n	8007d4a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f8a6 	bl	8007e94 <USBD_CtlError>
        break;
 8007d48:	bf00      	nop
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d62:	3b01      	subs	r3, #1
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d81e      	bhi.n	8007da6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	88db      	ldrh	r3, [r3, #6]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d004      	beq.n	8007d7a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f88e 	bl	8007e94 <USBD_CtlError>
        break;
 8007d78:	e01a      	b.n	8007db0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f043 0202 	orr.w	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f8e2 	bl	8007f68 <USBD_CtlSendData>
      break;
 8007da4:	e004      	b.n	8007db0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f873 	bl	8007e94 <USBD_CtlError>
      break;
 8007dae:	bf00      	nop
  }
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d106      	bne.n	8007dd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f908 	bl	8007fe8 <USBD_CtlSendStatus>
  }
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df0:	3b01      	subs	r3, #1
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d80b      	bhi.n	8007e0e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	885b      	ldrh	r3, [r3, #2]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d10c      	bne.n	8007e18 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8ee 	bl	8007fe8 <USBD_CtlSendStatus>
      }
      break;
 8007e0c:	e004      	b.n	8007e18 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f83f 	bl	8007e94 <USBD_CtlError>
      break;
 8007e16:	e000      	b.n	8007e1a <USBD_ClrFeature+0x3a>
      break;
 8007e18:	bf00      	nop
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781a      	ldrb	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	785a      	ldrb	r2, [r3, #1]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	3302      	adds	r3, #2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	3303      	adds	r3, #3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4413      	add	r3, r2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	3305      	adds	r3, #5
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	4413      	add	r3, r2
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	3306      	adds	r3, #6
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	3307      	adds	r3, #7
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	4413      	add	r3, r2
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	80da      	strh	r2, [r3, #6]

}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr

08007e94 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e9e:	2180      	movs	r1, #128	@ 0x80
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fb55 	bl	8008550 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb51 	bl	8008550 <USBD_LL_StallEP>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d032      	beq.n	8007f32 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f834 	bl	8007f3a <USBD_GetLen>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	75fa      	strb	r2, [r7, #23]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4413      	add	r3, r2
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	75fa      	strb	r2, [r7, #23]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4413      	add	r3, r2
 8007efe:	2203      	movs	r2, #3
 8007f00:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f02:	e012      	b.n	8007f2a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	60fa      	str	r2, [r7, #12]
 8007f0a:	7dfa      	ldrb	r2, [r7, #23]
 8007f0c:	1c51      	adds	r1, r2, #1
 8007f0e:	75f9      	strb	r1, [r7, #23]
 8007f10:	4611      	mov	r1, r2
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	440a      	add	r2, r1
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	75fa      	strb	r2, [r7, #23]
 8007f20:	461a      	mov	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4413      	add	r3, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e8      	bne.n	8007f04 <USBD_GetString+0x4e>
    }
  }
}
 8007f32:	bf00      	nop
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f46:	e005      	b.n	8007f54 <USBD_GetLen+0x1a>
  {
    len++;
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3301      	adds	r3, #1
 8007f52:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f5      	bne.n	8007f48 <USBD_GetLen+0xe>
  }

  return len;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007f7e:	88fa      	ldrh	r2, [r7, #6]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fb66 	bl	8008662 <USBD_LL_Transmit>

  return USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fb54 	bl	8008662 <USBD_LL_Transmit>

  return USBD_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fb65 	bl	80086a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fb2f 	bl	8008662 <USBD_LL_Transmit>

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2205      	movs	r2, #5
 800801a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800801e:	2300      	movs	r3, #0
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb3f 	bl	80086a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008038:	2200      	movs	r2, #0
 800803a:	490e      	ldr	r1, [pc, #56]	@ (8008074 <MX_USB_DEVICE_Init+0x40>)
 800803c:	480e      	ldr	r0, [pc, #56]	@ (8008078 <MX_USB_DEVICE_Init+0x44>)
 800803e:	f7fe ff81 	bl	8006f44 <USBD_Init>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008048:	f7f8 f9e0 	bl	800040c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800804c:	490b      	ldr	r1, [pc, #44]	@ (800807c <MX_USB_DEVICE_Init+0x48>)
 800804e:	480a      	ldr	r0, [pc, #40]	@ (8008078 <MX_USB_DEVICE_Init+0x44>)
 8008050:	f7fe ffa3 	bl	8006f9a <USBD_RegisterClass>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800805a:	f7f8 f9d7 	bl	800040c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800805e:	4806      	ldr	r0, [pc, #24]	@ (8008078 <MX_USB_DEVICE_Init+0x44>)
 8008060:	f7fe ffb4 	bl	8006fcc <USBD_Start>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800806a:	f7f8 f9cf 	bl	800040c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800806e:	bf00      	nop
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000108 	.word	0x20000108
 8008078:	20000218 	.word	0x20000218
 800807c:	2000000c 	.word	0x2000000c

08008080 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	4603      	mov	r3, r0
 8008088:	6039      	str	r1, [r7, #0]
 800808a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2212      	movs	r2, #18
 8008090:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008092:	4b03      	ldr	r3, [pc, #12]	@ (80080a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20000124 	.word	0x20000124

080080a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2204      	movs	r2, #4
 80080b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080b6:	4b03      	ldr	r3, [pc, #12]	@ (80080c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000138 	.word	0x20000138

080080c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	6039      	str	r1, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4907      	ldr	r1, [pc, #28]	@ (80080fc <USBD_FS_ProductStrDescriptor+0x34>)
 80080de:	4808      	ldr	r0, [pc, #32]	@ (8008100 <USBD_FS_ProductStrDescriptor+0x38>)
 80080e0:	f7ff fee9 	bl	8007eb6 <USBD_GetString>
 80080e4:	e004      	b.n	80080f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	4904      	ldr	r1, [pc, #16]	@ (80080fc <USBD_FS_ProductStrDescriptor+0x34>)
 80080ea:	4805      	ldr	r0, [pc, #20]	@ (8008100 <USBD_FS_ProductStrDescriptor+0x38>)
 80080ec:	f7ff fee3 	bl	8007eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f0:	4b02      	ldr	r3, [pc, #8]	@ (80080fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200004dc 	.word	0x200004dc
 8008100:	080087f8 	.word	0x080087f8

08008104 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	4904      	ldr	r1, [pc, #16]	@ (8008124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008114:	4804      	ldr	r0, [pc, #16]	@ (8008128 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008116:	f7ff fece 	bl	8007eb6 <USBD_GetString>
  return USBD_StrDesc;
 800811a:	4b02      	ldr	r3, [pc, #8]	@ (8008124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200004dc 	.word	0x200004dc
 8008128:	08008810 	.word	0x08008810

0800812c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	221a      	movs	r2, #26
 800813c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800813e:	f000 f843 	bl	80081c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008142:	4b02      	ldr	r3, [pc, #8]	@ (800814c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	2000013c 	.word	0x2000013c

08008150 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d105      	bne.n	800816e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	4907      	ldr	r1, [pc, #28]	@ (8008184 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008166:	4808      	ldr	r0, [pc, #32]	@ (8008188 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008168:	f7ff fea5 	bl	8007eb6 <USBD_GetString>
 800816c:	e004      	b.n	8008178 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	4904      	ldr	r1, [pc, #16]	@ (8008184 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008172:	4805      	ldr	r0, [pc, #20]	@ (8008188 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008174:	f7ff fe9f 	bl	8007eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008178:	4b02      	ldr	r3, [pc, #8]	@ (8008184 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200004dc 	.word	0x200004dc
 8008188:	08008824 	.word	0x08008824

0800818c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4907      	ldr	r1, [pc, #28]	@ (80081c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081a2:	4808      	ldr	r0, [pc, #32]	@ (80081c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081a4:	f7ff fe87 	bl	8007eb6 <USBD_GetString>
 80081a8:	e004      	b.n	80081b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4904      	ldr	r1, [pc, #16]	@ (80081c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081ae:	4805      	ldr	r0, [pc, #20]	@ (80081c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081b0:	f7ff fe81 	bl	8007eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081b4:	4b02      	ldr	r3, [pc, #8]	@ (80081c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200004dc 	.word	0x200004dc
 80081c4:	08008834 	.word	0x08008834

080081c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4413      	add	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081dc:	2208      	movs	r2, #8
 80081de:	4906      	ldr	r1, [pc, #24]	@ (80081f8 <Get_SerialNum+0x30>)
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f80d 	bl	8008200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081e6:	2204      	movs	r2, #4
 80081e8:	4904      	ldr	r1, [pc, #16]	@ (80081fc <Get_SerialNum+0x34>)
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f808 	bl	8008200 <IntToUnicode>
  }
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	2000013e 	.word	0x2000013e
 80081fc:	2000014e 	.word	0x2000014e

08008200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
 8008216:	e027      	b.n	8008268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	0f1b      	lsrs	r3, r3, #28
 800821c:	2b09      	cmp	r3, #9
 800821e:	d80b      	bhi.n	8008238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	0f1b      	lsrs	r3, r3, #28
 8008224:	b2da      	uxtb	r2, r3
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	4619      	mov	r1, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	440b      	add	r3, r1
 8008230:	3230      	adds	r2, #48	@ 0x30
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e00a      	b.n	800824e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	0f1b      	lsrs	r3, r3, #28
 800823c:	b2da      	uxtb	r2, r3
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	4619      	mov	r1, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	440b      	add	r3, r1
 8008248:	3237      	adds	r2, #55	@ 0x37
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	3301      	adds	r3, #1
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	3301      	adds	r3, #1
 8008266:	75fb      	strb	r3, [r7, #23]
 8008268:	7dfa      	ldrb	r2, [r7, #23]
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	429a      	cmp	r2, r3
 800826e:	d3d3      	bcc.n	8008218 <IntToUnicode+0x18>
  }
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a0d      	ldr	r2, [pc, #52]	@ (80082c0 <HAL_PCD_MspInit+0x44>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d113      	bne.n	80082b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800828e:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <HAL_PCD_MspInit+0x48>)
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	4a0c      	ldr	r2, [pc, #48]	@ (80082c4 <HAL_PCD_MspInit+0x48>)
 8008294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008298:	61d3      	str	r3, [r2, #28]
 800829a:	4b0a      	ldr	r3, [pc, #40]	@ (80082c4 <HAL_PCD_MspInit+0x48>)
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80082a6:	2200      	movs	r2, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	2014      	movs	r0, #20
 80082ac:	f7f8 fb0d 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80082b0:	2014      	movs	r0, #20
 80082b2:	f7f8 fb26 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	40005c00 	.word	0x40005c00
 80082c4:	40021000 	.word	0x40021000

080082c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f7fe febc 	bl	800705c <USBD_LL_SetupStage>
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	440b      	add	r3, r1
 800830c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	4619      	mov	r1, r3
 8008316:	f7fe feee 	bl	80070f6 <USBD_LL_DataOutStage>
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	440b      	add	r3, r1
 8008342:	333c      	adds	r3, #60	@ 0x3c
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	4619      	mov	r1, r3
 800834a:	f7fe ff45 	bl	80071d8 <USBD_LL_DataInStage>
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff f855 	bl	8007414 <USBD_LL_SOF>
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800837a:	2301      	movs	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d001      	beq.n	800838a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008386:	f7f8 f841 	bl	800040c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008390:	7bfa      	ldrb	r2, [r7, #15]
 8008392:	4611      	mov	r1, r2
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff f805 	bl	80073a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe ffbe 	bl	8007322 <USBD_LL_Reset>
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe ffff 	bl	80073c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <HAL_PCD_SuspendCallback+0x30>)
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	4a03      	ldr	r2, [pc, #12]	@ (80083e0 <HAL_PCD_SuspendCallback+0x30>)
 80083d2:	f043 0306 	orr.w	r3, r3, #6
 80083d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fff9 	bl	80073ea <USBD_LL_Resume>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008408:	4a1f      	ldr	r2, [pc, #124]	@ (8008488 <USBD_LL_Init+0x88>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <USBD_LL_Init+0x88>)
 8008414:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008418:	4b1b      	ldr	r3, [pc, #108]	@ (8008488 <USBD_LL_Init+0x88>)
 800841a:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <USBD_LL_Init+0x8c>)
 800841c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800841e:	4b1a      	ldr	r3, [pc, #104]	@ (8008488 <USBD_LL_Init+0x88>)
 8008420:	2208      	movs	r2, #8
 8008422:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008424:	4b18      	ldr	r3, [pc, #96]	@ (8008488 <USBD_LL_Init+0x88>)
 8008426:	2202      	movs	r2, #2
 8008428:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800842a:	4b17      	ldr	r3, [pc, #92]	@ (8008488 <USBD_LL_Init+0x88>)
 800842c:	2200      	movs	r2, #0
 800842e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008430:	4b15      	ldr	r3, [pc, #84]	@ (8008488 <USBD_LL_Init+0x88>)
 8008432:	2200      	movs	r2, #0
 8008434:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008436:	4b14      	ldr	r3, [pc, #80]	@ (8008488 <USBD_LL_Init+0x88>)
 8008438:	2200      	movs	r2, #0
 800843a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800843c:	4812      	ldr	r0, [pc, #72]	@ (8008488 <USBD_LL_Init+0x88>)
 800843e:	f7f8 fcc8 	bl	8000dd2 <HAL_PCD_Init>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008448:	f7f7 ffe0 	bl	800040c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008452:	2318      	movs	r3, #24
 8008454:	2200      	movs	r2, #0
 8008456:	2100      	movs	r1, #0
 8008458:	f7fa f9cf 	bl	80027fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008462:	2358      	movs	r3, #88	@ 0x58
 8008464:	2200      	movs	r2, #0
 8008466:	2180      	movs	r1, #128	@ 0x80
 8008468:	f7fa f9c7 	bl	80027fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008472:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008476:	2200      	movs	r2, #0
 8008478:	2181      	movs	r1, #129	@ 0x81
 800847a:	f7fa f9be 	bl	80027fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	200006dc 	.word	0x200006dc
 800848c:	40005c00 	.word	0x40005c00

08008490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7f8 fd92 	bl	8000fd0 <HAL_PCD_Start>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f93c 	bl	8008730 <USBD_Get_USB_Status>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	4608      	mov	r0, r1
 80084d0:	4611      	mov	r1, r2
 80084d2:	461a      	mov	r2, r3
 80084d4:	4603      	mov	r3, r0
 80084d6:	70fb      	strb	r3, [r7, #3]
 80084d8:	460b      	mov	r3, r1
 80084da:	70bb      	strb	r3, [r7, #2]
 80084dc:	4613      	mov	r3, r2
 80084de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084ee:	78bb      	ldrb	r3, [r7, #2]
 80084f0:	883a      	ldrh	r2, [r7, #0]
 80084f2:	78f9      	ldrb	r1, [r7, #3]
 80084f4:	f7f8 fee7 	bl	80012c6 <HAL_PCD_EP_Open>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f916 	bl	8008730 <USBD_Get_USB_Status>
 8008504:	4603      	mov	r3, r0
 8008506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008508:	7bbb      	ldrb	r3, [r7, #14]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f7f8 ff25 	bl	8001380 <HAL_PCD_EP_Close>
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f8f7 	bl	8008730 <USBD_Get_USB_Status>
 8008542:	4603      	mov	r3, r0
 8008544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008546:	7bbb      	ldrb	r3, [r7, #14]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800856a:	78fa      	ldrb	r2, [r7, #3]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7f8 ffb6 	bl	80014e0 <HAL_PCD_EP_SetStall>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f8d8 	bl	8008730 <USBD_Get_USB_Status>
 8008580:	4603      	mov	r3, r0
 8008582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008584:	7bbb      	ldrb	r3, [r7, #14]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f8 fff7 	bl	80015a0 <HAL_PCD_EP_ClrStall>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f8b9 	bl	8008730 <USBD_Get_USB_Status>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	da0c      	bge.n	8008602 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	440b      	add	r3, r1
 80085fc:	3302      	adds	r3, #2
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	e00b      	b.n	800861a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008608:	68f9      	ldr	r1, [r7, #12]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	440b      	add	r3, r1
 8008614:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008618:	781b      	ldrb	r3, [r3, #0]
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f7f8 fe1a 	bl	800127c <HAL_PCD_SetAddress>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f86e 	bl	8008730 <USBD_Get_USB_Status>
 8008654:	4603      	mov	r3, r0
 8008656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008658:	7bbb      	ldrb	r3, [r7, #14]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	461a      	mov	r2, r3
 800866e:	460b      	mov	r3, r1
 8008670:	72fb      	strb	r3, [r7, #11]
 8008672:	4613      	mov	r3, r2
 8008674:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008684:	893b      	ldrh	r3, [r7, #8]
 8008686:	7af9      	ldrb	r1, [r7, #11]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	f7f8 fef2 	bl	8001472 <HAL_PCD_EP_Transmit>
 800868e:	4603      	mov	r3, r0
 8008690:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f84b 	bl	8008730 <USBD_Get_USB_Status>
 800869a:	4603      	mov	r3, r0
 800869c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800869e:	7dbb      	ldrb	r3, [r7, #22]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	461a      	mov	r2, r3
 80086b4:	460b      	mov	r3, r1
 80086b6:	72fb      	strb	r3, [r7, #11]
 80086b8:	4613      	mov	r3, r2
 80086ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086ca:	893b      	ldrh	r3, [r7, #8]
 80086cc:	7af9      	ldrb	r1, [r7, #11]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	f7f8 fe9e 	bl	8001410 <HAL_PCD_EP_Receive>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f828 	bl	8008730 <USBD_Get_USB_Status>
 80086e0:	4603      	mov	r3, r0
 80086e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086f8:	4b02      	ldr	r3, [pc, #8]	@ (8008704 <USBD_static_malloc+0x14>)
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	bc80      	pop	{r7}
 8008702:	4770      	bx	lr
 8008704:	200009cc 	.word	0x200009cc

08008708 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]

}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b03      	cmp	r3, #3
 8008742:	d817      	bhi.n	8008774 <USBD_Get_USB_Status+0x44>
 8008744:	a201      	add	r2, pc, #4	@ (adr r2, 800874c <USBD_Get_USB_Status+0x1c>)
 8008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874a:	bf00      	nop
 800874c:	0800875d 	.word	0x0800875d
 8008750:	08008763 	.word	0x08008763
 8008754:	08008769 	.word	0x08008769
 8008758:	0800876f 	.word	0x0800876f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e00b      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008762:	2302      	movs	r3, #2
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e008      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008768:	2301      	movs	r3, #1
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	e005      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800876e:	2302      	movs	r3, #2
 8008770:	73fb      	strb	r3, [r7, #15]
    break;
 8008772:	e002      	b.n	800877a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008774:	2302      	movs	r3, #2
 8008776:	73fb      	strb	r3, [r7, #15]
    break;
 8008778:	bf00      	nop
  }
  return usb_status;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop

08008788 <memset>:
 8008788:	4603      	mov	r3, r0
 800878a:	4402      	add	r2, r0
 800878c:	4293      	cmp	r3, r2
 800878e:	d100      	bne.n	8008792 <memset+0xa>
 8008790:	4770      	bx	lr
 8008792:	f803 1b01 	strb.w	r1, [r3], #1
 8008796:	e7f9      	b.n	800878c <memset+0x4>

08008798 <__libc_init_array>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	2600      	movs	r6, #0
 800879c:	4d0c      	ldr	r5, [pc, #48]	@ (80087d0 <__libc_init_array+0x38>)
 800879e:	4c0d      	ldr	r4, [pc, #52]	@ (80087d4 <__libc_init_array+0x3c>)
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	d109      	bne.n	80087bc <__libc_init_array+0x24>
 80087a8:	f000 f81a 	bl	80087e0 <_init>
 80087ac:	2600      	movs	r6, #0
 80087ae:	4d0a      	ldr	r5, [pc, #40]	@ (80087d8 <__libc_init_array+0x40>)
 80087b0:	4c0a      	ldr	r4, [pc, #40]	@ (80087dc <__libc_init_array+0x44>)
 80087b2:	1b64      	subs	r4, r4, r5
 80087b4:	10a4      	asrs	r4, r4, #2
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d105      	bne.n	80087c6 <__libc_init_array+0x2e>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c0:	4798      	blx	r3
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7ee      	b.n	80087a4 <__libc_init_array+0xc>
 80087c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ca:	4798      	blx	r3
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7f2      	b.n	80087b6 <__libc_init_array+0x1e>
 80087d0:	08008870 	.word	0x08008870
 80087d4:	08008870 	.word	0x08008870
 80087d8:	08008870 	.word	0x08008870
 80087dc:	08008874 	.word	0x08008874

080087e0 <_init>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	bf00      	nop
 80087e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e6:	bc08      	pop	{r3}
 80087e8:	469e      	mov	lr, r3
 80087ea:	4770      	bx	lr

080087ec <_fini>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	bf00      	nop
 80087f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f2:	bc08      	pop	{r3}
 80087f4:	469e      	mov	lr, r3
 80087f6:	4770      	bx	lr
