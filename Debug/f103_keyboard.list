
f103_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080087d8  080087d8  000097d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008850  08008850  0000a158  2**0
                  CONTENTS
  4 .ARM          00000000  08008850  08008850  0000a158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008850  08008850  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08008858  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000158  080089b0  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  080089b0  0000a9dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001419d  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003329  00000000  00000000  0001e31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00021648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de9  00000000  00000000  00022860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b9  00000000  00000000  00023649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d6c  00000000  00000000  0003d802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee56  00000000  00000000  0005556e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e43c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  000e4408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e8f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	080087c0 	.word	0x080087c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	080087c0 	.word	0x080087c0

0800014c <GetPointerData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void GetPointerData(uint8_t *pbuf)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	// 		keyboard = 0x1D;
	// 		while(!HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin));
	// 	}
	// }
	// //合成键盘数据
	for(uint8_t i=0;i<8;i++)
 8000154:	2300      	movs	r3, #0
 8000156:	73fb      	strb	r3, [r7, #15]
 8000158:	e010      	b.n	800017c <GetPointerData+0x30>
	{
		//if(i == 2) pbuf[i] = keyboard;
    if(i == 2) pbuf[i] = 0x1D;
 800015a:	7bfb      	ldrb	r3, [r7, #15]
 800015c:	2b02      	cmp	r3, #2
 800015e:	d105      	bne.n	800016c <GetPointerData+0x20>
 8000160:	7bfb      	ldrb	r3, [r7, #15]
 8000162:	687a      	ldr	r2, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	221d      	movs	r2, #29
 8000168:	701a      	strb	r2, [r3, #0]
 800016a:	e004      	b.n	8000176 <GetPointerData+0x2a>
		else pbuf[i] = 0;
 800016c:	7bfb      	ldrb	r3, [r7, #15]
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<8;i++)
 8000176:	7bfb      	ldrb	r3, [r7, #15]
 8000178:	3301      	adds	r3, #1
 800017a:	73fb      	strb	r3, [r7, #15]
 800017c:	7bfb      	ldrb	r3, [r7, #15]
 800017e:	2b07      	cmp	r3, #7
 8000180:	d9eb      	bls.n	800015a <GetPointerData+0xe>
  // }else{
  //   for (int i = 0; i < 8; i++) {
  //     pbuf[i] = 0;
  //   }
  // }
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
	...

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 fa68 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f810 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f000 f8de 	bl	800035c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a0:	f000 f8b2 	bl	8000308 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001a4:	f007 ff36 	bl	8008014 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001a8:	f000 f862 	bl	8000270 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001ac:	4802      	ldr	r0, [pc, #8]	@ (80001b8 <main+0x28>)
 80001ae:	f003 f86d 	bl	800328c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b2:	bf00      	nop
 80001b4:	e7fd      	b.n	80001b2 <main+0x22>
 80001b6:	bf00      	nop
 80001b8:	20000174 	.word	0x20000174

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	@ 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f008 facc 	bl	8008768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000208:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800020c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fb24 	bl	8002860 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f8fd 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fd90 	bl	8002d64 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024a:	f000 f8e7 	bl	800041c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024e:	2310      	movs	r3, #16
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f002 ff11 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000264:	f000 f8da 	bl	800041c <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3750      	adds	r7, #80	@ 0x50
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000284:	463b      	mov	r3, r7
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800028c:	4b1d      	ldr	r3, [pc, #116]	@ (8000304 <MX_TIM2_Init+0x94>)
 800028e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000294:	4b1b      	ldr	r3, [pc, #108]	@ (8000304 <MX_TIM2_Init+0x94>)
 8000296:	2247      	movs	r2, #71	@ 0x47
 8000298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029a:	4b1a      	ldr	r3, [pc, #104]	@ (8000304 <MX_TIM2_Init+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002a0:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <MX_TIM2_Init+0x94>)
 80002a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002a8:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <MX_TIM2_Init+0x94>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ae:	4b15      	ldr	r3, [pc, #84]	@ (8000304 <MX_TIM2_Init+0x94>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002b4:	4813      	ldr	r0, [pc, #76]	@ (8000304 <MX_TIM2_Init+0x94>)
 80002b6:	f002 ff99 	bl	80031ec <HAL_TIM_Base_Init>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002c0:	f000 f8ac 	bl	800041c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	4619      	mov	r1, r3
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <MX_TIM2_Init+0x94>)
 80002d2:	f003 f935 	bl	8003540 <HAL_TIM_ConfigClockSource>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002dc:	f000 f89e 	bl	800041c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e0:	2300      	movs	r3, #0
 80002e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	@ (8000304 <MX_TIM2_Init+0x94>)
 80002ee:	f003 fb0b 	bl	8003908 <HAL_TIMEx_MasterConfigSynchronization>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002f8:	f000 f890 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3718      	adds	r7, #24
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000174 	.word	0x20000174

08000308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	@ (8000358 <MX_USART1_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000314:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	@ (8000354 <MX_USART1_UART_Init+0x4c>)
 8000340:	f003 fb52 	bl	80039e8 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 f867 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200001bc 	.word	0x200001bc
 8000358:	40013800 	.word	0x40013800

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <MX_GPIO_Init+0x64>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <MX_GPIO_Init+0x64>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <MX_GPIO_Init+0x64>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <MX_GPIO_Init+0x64>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a0c      	ldr	r2, [pc, #48]	@ (80003c0 <MX_GPIO_Init+0x64>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <MX_GPIO_Init+0x64>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80003a0:	2302      	movs	r3, #2
 80003a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	4619      	mov	r1, r3
 80003b2:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_GPIO_Init+0x68>)
 80003b4:	f000 fb7a 	bl	8000aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010800 	.word	0x40010800

080003c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c8:	b590      	push	{r4, r7, lr}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  static volatile uint32_t counter = 0;
    if (htim->Instance == TIM2)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003d8:	d115      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      /* check Joystick state every polling interval (10ms) */
      if(counter++ == USBD_HID_GetPollingInterval(&hUsbDeviceFS))
 80003da:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003dc:	681c      	ldr	r4, [r3, #0]
 80003de:	1c63      	adds	r3, r4, #1
 80003e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003e2:	6013      	str	r3, [r2, #0]
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80003e6:	f006 fd35 	bl	8006e54 <USBD_HID_GetPollingInterval>
 80003ea:	4603      	mov	r3, r0
 80003ec:	429c      	cmp	r4, r3
 80003ee:	d10a      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
      GetPointerData(HID_Buffer);
 80003f0:	4809      	ldr	r0, [pc, #36]	@ (8000418 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80003f2:	f7ff feab 	bl	800014c <GetPointerData>
        
      /* send data though IN endpoint*/
      USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80003f6:	2204      	movs	r2, #4
 80003f8:	4907      	ldr	r1, [pc, #28]	@ (8000418 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80003fa:	4806      	ldr	r0, [pc, #24]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80003fc:	f006 fd08 	bl	8006e10 <USBD_HID_SendReport>

      /* 重置counter */
      counter = 0;
 8000400:	4b03      	ldr	r3, [pc, #12]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
      }
    }
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bd90      	pop	{r4, r7, pc}
 800040e:	bf00      	nop
 8000410:	20000208 	.word	0x20000208
 8000414:	20000214 	.word	0x20000214
 8000418:	20000204 	.word	0x20000204

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <Error_Handler+0x8>

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a14      	ldr	r2, [pc, #80]	@ (8000484 <HAL_MspInit+0x5c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0e      	ldr	r2, [pc, #56]	@ (8000484 <HAL_MspInit+0x5c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045e:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <HAL_MspInit+0x60>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	@ (8000488 <HAL_MspInit+0x60>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800049c:	d113      	bne.n	80004c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_TIM_Base_MspInit+0x44>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0b      	ldr	r2, [pc, #44]	@ (80004d0 <HAL_TIM_Base_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <HAL_TIM_Base_MspInit+0x44>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	201c      	movs	r0, #28
 80004bc:	f000 fa0d 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004c0:	201c      	movs	r0, #28
 80004c2:	f000 fa26 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a20      	ldr	r2, [pc, #128]	@ (8000570 <HAL_UART_MspInit+0x9c>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d139      	bne.n	8000568 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 80004fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b1c      	ldr	r3, [pc, #112]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a18      	ldr	r2, [pc, #96]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052e:	2303      	movs	r3, #3
 8000530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <HAL_UART_MspInit+0xa4>)
 800053a:	f000 fab7 	bl	8000aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800053e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4809      	ldr	r0, [pc, #36]	@ (8000578 <HAL_UART_MspInit+0xa4>)
 8000554:	f000 faaa 	bl	8000aac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2025      	movs	r0, #37	@ 0x25
 800055e:	f000 f9bc 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000562:	2025      	movs	r0, #37	@ 0x25
 8000564:	f000 f9d5 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40013800 	.word	0x40013800
 8000574:	40021000 	.word	0x40021000
 8000578:	40010800 	.word	0x40010800

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f892 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005da:	f000 fd10 	bl	8000ffe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200006d8 	.word	0x200006d8

080005e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <TIM2_IRQHandler+0x10>)
 80005ee:	f002 fe9f 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000174 	.word	0x20000174

080005fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <USART1_IRQHandler+0x10>)
 8000602:	f003 fa41 	bl	8003a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200001bc 	.word	0x200001bc

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff fff8 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480b      	ldr	r0, [pc, #44]	@ (8000650 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000622:	490c      	ldr	r1, [pc, #48]	@ (8000654 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000624:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000638:	4c09      	ldr	r4, [pc, #36]	@ (8000660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f008 f897 	bl	8008778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fda1 	bl	8000190 <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000658:	08008858 	.word	0x08008858
  ldr r2, =_sbss
 800065c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000660:	200009dc 	.word	0x200009dc

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f923 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	200f      	movs	r0, #15
 8000680:	f000 f808 	bl	8000694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff fed0 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <HAL_InitTick+0x54>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <HAL_InitTick+0x58>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f93b 	bl	800092e <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80a      	bhi.n	80006de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f000 f903 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <HAL_InitTick+0x5c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e000      	b.n	80006e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000004 	.word	0x20000004

080006f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_IncTick+0x1c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <HAL_IncTick+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a03      	ldr	r2, [pc, #12]	@ (8000714 <HAL_IncTick+0x20>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000008 	.word	0x20000008
 8000714:	2000020c 	.word	0x2000020c

08000718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b02      	ldr	r3, [pc, #8]	@ (8000728 <HAL_GetTick+0x10>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	2000020c 	.word	0x2000020c

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4906      	ldr	r1, [pc, #24]	@ (80007c4 <__NVIC_EnableIRQ+0x34>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff2d 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff42 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff35 	bl	8000790 <__NVIC_EnableIRQ>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ffa2 	bl	8000880 <SysTick_Config>
 800093c:	4603      	mov	r3, r0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d008      	beq.n	8000970 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2204      	movs	r2, #4
 8000962:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e020      	b.n	80009b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 020e 	bic.w	r2, r2, #14
 800097e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f022 0201 	bic.w	r2, r2, #1
 800098e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d005      	beq.n	80009e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2204      	movs	r2, #4
 80009d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e051      	b.n	8000a84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 020e 	bic.w	r2, r2, #14
 80009ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f022 0201 	bic.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a22      	ldr	r2, [pc, #136]	@ (8000a90 <HAL_DMA_Abort_IT+0xd4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d029      	beq.n	8000a5e <HAL_DMA_Abort_IT+0xa2>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <HAL_DMA_Abort_IT+0xd8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d022      	beq.n	8000a5a <HAL_DMA_Abort_IT+0x9e>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1f      	ldr	r2, [pc, #124]	@ (8000a98 <HAL_DMA_Abort_IT+0xdc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d01a      	beq.n	8000a54 <HAL_DMA_Abort_IT+0x98>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1e      	ldr	r2, [pc, #120]	@ (8000a9c <HAL_DMA_Abort_IT+0xe0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d012      	beq.n	8000a4e <HAL_DMA_Abort_IT+0x92>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa0 <HAL_DMA_Abort_IT+0xe4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d00a      	beq.n	8000a48 <HAL_DMA_Abort_IT+0x8c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <HAL_DMA_Abort_IT+0xe8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d102      	bne.n	8000a42 <HAL_DMA_Abort_IT+0x86>
 8000a3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a40:	e00e      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a46:	e00b      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a4c:	e008      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a52:	e005      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a58:	e002      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	e000      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <HAL_DMA_Abort_IT+0xec>)
 8000a62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	4798      	blx	r3
    } 
  }
  return status;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020008 	.word	0x40020008
 8000a94:	4002001c 	.word	0x4002001c
 8000a98:	40020030 	.word	0x40020030
 8000a9c:	40020044 	.word	0x40020044
 8000aa0:	40020058 	.word	0x40020058
 8000aa4:	4002006c 	.word	0x4002006c
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b08b      	sub	sp, #44	@ 0x2c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e169      	b.n	8000d94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	f040 8158 	bne.w	8000d8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4a9a      	ldr	r2, [pc, #616]	@ (8000d4c <HAL_GPIO_Init+0x2a0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d05e      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a98      	ldr	r2, [pc, #608]	@ (8000d4c <HAL_GPIO_Init+0x2a0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d875      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000aee:	4a98      	ldr	r2, [pc, #608]	@ (8000d50 <HAL_GPIO_Init+0x2a4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d058      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000af4:	4a96      	ldr	r2, [pc, #600]	@ (8000d50 <HAL_GPIO_Init+0x2a4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d86f      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000afa:	4a96      	ldr	r2, [pc, #600]	@ (8000d54 <HAL_GPIO_Init+0x2a8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d052      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b00:	4a94      	ldr	r2, [pc, #592]	@ (8000d54 <HAL_GPIO_Init+0x2a8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d869      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b06:	4a94      	ldr	r2, [pc, #592]	@ (8000d58 <HAL_GPIO_Init+0x2ac>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d04c      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b0c:	4a92      	ldr	r2, [pc, #584]	@ (8000d58 <HAL_GPIO_Init+0x2ac>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d863      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b12:	4a92      	ldr	r2, [pc, #584]	@ (8000d5c <HAL_GPIO_Init+0x2b0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d046      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b18:	4a90      	ldr	r2, [pc, #576]	@ (8000d5c <HAL_GPIO_Init+0x2b0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d85d      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d82a      	bhi.n	8000b78 <HAL_GPIO_Init+0xcc>
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d859      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b26:	a201      	add	r2, pc, #4	@ (adr r2, 8000b2c <HAL_GPIO_Init+0x80>)
 8000b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2c:	08000ba7 	.word	0x08000ba7
 8000b30:	08000b81 	.word	0x08000b81
 8000b34:	08000b93 	.word	0x08000b93
 8000b38:	08000bd5 	.word	0x08000bd5
 8000b3c:	08000bdb 	.word	0x08000bdb
 8000b40:	08000bdb 	.word	0x08000bdb
 8000b44:	08000bdb 	.word	0x08000bdb
 8000b48:	08000bdb 	.word	0x08000bdb
 8000b4c:	08000bdb 	.word	0x08000bdb
 8000b50:	08000bdb 	.word	0x08000bdb
 8000b54:	08000bdb 	.word	0x08000bdb
 8000b58:	08000bdb 	.word	0x08000bdb
 8000b5c:	08000bdb 	.word	0x08000bdb
 8000b60:	08000bdb 	.word	0x08000bdb
 8000b64:	08000bdb 	.word	0x08000bdb
 8000b68:	08000bdb 	.word	0x08000bdb
 8000b6c:	08000bdb 	.word	0x08000bdb
 8000b70:	08000b89 	.word	0x08000b89
 8000b74:	08000b9d 	.word	0x08000b9d
 8000b78:	4a79      	ldr	r2, [pc, #484]	@ (8000d60 <HAL_GPIO_Init+0x2b4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b7e:	e02c      	b.n	8000bda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e029      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e024      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	3308      	adds	r3, #8
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e01f      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	330c      	adds	r3, #12
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e01a      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e013      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	611a      	str	r2, [r3, #16]
          break;
 8000bc6:	e009      	b.n	8000bdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	615a      	str	r2, [r3, #20]
          break;
 8000bd2:	e003      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e000      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          break;
 8000bda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2bff      	cmp	r3, #255	@ 0xff
 8000be0:	d801      	bhi.n	8000be6 <HAL_GPIO_Init+0x13a>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	e001      	b.n	8000bea <HAL_GPIO_Init+0x13e>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	2bff      	cmp	r3, #255	@ 0xff
 8000bf0:	d802      	bhi.n	8000bf8 <HAL_GPIO_Init+0x14c>
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x152>
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfa:	3b08      	subs	r3, #8
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	210f      	movs	r1, #15
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	6a39      	ldr	r1, [r7, #32]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 80b1 	beq.w	8000d8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d64 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a4c      	ldr	r2, [pc, #304]	@ (8000d64 <HAL_GPIO_Init+0x2b8>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <HAL_GPIO_Init+0x2b8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c44:	4a48      	ldr	r2, [pc, #288]	@ (8000d68 <HAL_GPIO_Init+0x2bc>)
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a40      	ldr	r2, [pc, #256]	@ (8000d6c <HAL_GPIO_Init+0x2c0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d013      	beq.n	8000c98 <HAL_GPIO_Init+0x1ec>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3f      	ldr	r2, [pc, #252]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00d      	beq.n	8000c94 <HAL_GPIO_Init+0x1e8>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0x1e4>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a3d      	ldr	r2, [pc, #244]	@ (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d101      	bne.n	8000c8c <HAL_GPIO_Init+0x1e0>
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e006      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	e004      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c90:	2302      	movs	r3, #2
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c94:	2301      	movs	r3, #1
 8000c96:	e000      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c9c:	f002 0203 	and.w	r2, r2, #3
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000caa:	492f      	ldr	r1, [pc, #188]	@ (8000d68 <HAL_GPIO_Init+0x2bc>)
 8000cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	492c      	ldr	r1, [pc, #176]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4928      	ldr	r1, [pc, #160]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	4922      	ldr	r1, [pc, #136]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60cb      	str	r3, [r1, #12]
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cfa:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	491e      	ldr	r1, [pc, #120]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4918      	ldr	r1, [pc, #96]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	604b      	str	r3, [r1, #4]
 8000d20:	e006      	b.n	8000d30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	4914      	ldr	r1, [pc, #80]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d021      	beq.n	8000d80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	490e      	ldr	r1, [pc, #56]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e021      	b.n	8000d8e <HAL_GPIO_Init+0x2e2>
 8000d4a:	bf00      	nop
 8000d4c:	10320000 	.word	0x10320000
 8000d50:	10310000 	.word	0x10310000
 8000d54:	10220000 	.word	0x10220000
 8000d58:	10210000 	.word	0x10210000
 8000d5c:	10120000 	.word	0x10120000
 8000d60:	10110000 	.word	0x10110000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	40011000 	.word	0x40011000
 8000d78:	40011400 	.word	0x40011400
 8000d7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_GPIO_Init+0x304>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	4909      	ldr	r1, [pc, #36]	@ (8000db0 <HAL_GPIO_Init+0x304>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	3301      	adds	r3, #1
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f47f ae8e 	bne.w	8000ac0 <HAL_GPIO_Init+0x14>
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	372c      	adds	r7, #44	@ 0x2c
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b08b      	sub	sp, #44	@ 0x2c
 8000db8:	af06      	add	r7, sp, #24
 8000dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e0f1      	b.n	8000faa <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f007 fa3e 	bl	800825c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fb53 	bl	8004498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	687e      	ldr	r6, [r7, #4]
 8000dfa:	466d      	mov	r5, sp
 8000dfc:	f106 0410 	add.w	r4, r6, #16
 8000e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	602b      	str	r3, [r5, #0]
 8000e08:	1d33      	adds	r3, r6, #4
 8000e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f003 fb1d 	bl	800444c <USB_CoreInit>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e0c2      	b.n	8000faa <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fb4e 	bl	80044cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e040      	b.n	8000eb8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	3301      	adds	r3, #1
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3303      	adds	r3, #3
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	3338      	adds	r3, #56	@ 0x38
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	333c      	adds	r3, #60	@ 0x3c
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	3340      	adds	r3, #64	@ 0x40
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3b9      	bcc.n	8000e36 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e044      	b.n	8000f52 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3b5      	bcc.n	8000ec8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	687e      	ldr	r6, [r7, #4]
 8000f64:	466d      	mov	r5, sp
 8000f66:	f106 0410 	add.w	r4, r6, #16
 8000f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	602b      	str	r3, [r5, #0]
 8000f72:	1d33      	adds	r3, r6, #4
 8000f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f003 fab4 	bl	80044e4 <USB_DevInit>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2202      	movs	r2, #2
 8000f86:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00d      	b.n	8000faa <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 fd35 	bl	8006a12 <USB_DevDisconnect>

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <HAL_PCD_Start+0x16>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e016      	b.n	8000ff6 <HAL_PCD_Start+0x44>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fa49 	bl	800446c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f007 fb8c 	bl	80086fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 fd09 	bl	80069fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b088      	sub	sp, #32
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f005 fd0b 	bl	8006a26 <USB_ReadInterrupts>
 8001010:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fb04 	bl	800162a <PCD_EP_ISR_Handler>

    return;
 8001022:	e119      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800102a:	2b00      	cmp	r3, #0
 800102c:	d013      	beq.n	8001056 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001036:	b29a      	uxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001040:	b292      	uxth	r2, r2
 8001042:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f007 f983 	bl	8008352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800104c:	2100      	movs	r1, #0
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f905 	bl	800125e <HAL_PCD_SetAddress>

    return;
 8001054:	e100      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001078:	e0ee      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00c      	beq.n	800109e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001096:	b292      	uxth	r2, r2
 8001098:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800109c:	e0dc      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d027      	beq.n	80010f8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0204 	bic.w	r2, r2, #4
 80010ba:	b292      	uxth	r2, r2
 80010bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0208 	bic.w	r2, r2, #8
 80010d2:	b292      	uxth	r2, r2
 80010d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f007 f973 	bl	80083c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010f6:	e0af      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8083 	beq.w	800120a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	77fb      	strb	r3, [r7, #31]
 8001108:	e010      	b.n	800112c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	441a      	add	r2, r3
 8001116:	7ffb      	ldrb	r3, [r7, #31]
 8001118:	8812      	ldrh	r2, [r2, #0]
 800111a:	b292      	uxth	r2, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3320      	adds	r3, #32
 8001120:	443b      	add	r3, r7
 8001122:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	3301      	adds	r3, #1
 800112a:	77fb      	strb	r3, [r7, #31]
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	2b07      	cmp	r3, #7
 8001130:	d9eb      	bls.n	800110a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	b292      	uxth	r2, r2
 8001146:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	b292      	uxth	r2, r2
 800115e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001162:	bf00      	nop
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800116c:	b29b      	uxth	r3, r3
 800116e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f6      	beq.n	8001164 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001188:	b292      	uxth	r2, r2
 800118a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	77fb      	strb	r3, [r7, #31]
 8001192:	e00f      	b.n	80011b4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001194:	7ffb      	ldrb	r3, [r7, #31]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	4611      	mov	r1, r2
 800119c:	7ffa      	ldrb	r2, [r7, #31]
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	440a      	add	r2, r1
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	3320      	adds	r3, #32
 80011a6:	443b      	add	r3, r7
 80011a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011ac:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	3301      	adds	r3, #1
 80011b2:	77fb      	strb	r3, [r7, #31]
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d9ec      	bls.n	8001194 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0208 	orr.w	r2, r2, #8
 80011cc:	b292      	uxth	r2, r2
 80011ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011e4:	b292      	uxth	r2, r2
 80011e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0204 	orr.w	r2, r2, #4
 80011fc:	b292      	uxth	r2, r2
 80011fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f007 f8c4 	bl	8008390 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001208:	e026      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00f      	beq.n	8001234 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001226:	b292      	uxth	r2, r2
 8001228:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f007 f882 	bl	8008336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001232:	e011      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00c      	beq.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001250:	b292      	uxth	r2, r2
 8001252:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001256:	bf00      	nop
  }
}
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_PCD_SetAddress+0x1a>
 8001274:	2302      	movs	r3, #2
 8001276:	e013      	b.n	80012a0 <HAL_PCD_SetAddress+0x42>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	78fa      	ldrb	r2, [r7, #3]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f005 fba1 	bl	80069d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	70fb      	strb	r3, [r7, #3]
 80012ba:	460b      	mov	r3, r1
 80012bc:	803b      	strh	r3, [r7, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da0e      	bge.n	80012ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	705a      	strb	r2, [r3, #1]
 80012ea:	e00e      	b.n	800130a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	f003 0207 	and.w	r2, r3, #7
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001316:	883a      	ldrh	r2, [r7, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	78ba      	ldrb	r2, [r7, #2]
 8001320:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001322:	78bb      	ldrb	r3, [r7, #2]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d102      	bne.n	800132e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_PCD_EP_Open+0x94>
 8001338:	2302      	movs	r3, #2
 800133a:	e00e      	b.n	800135a <HAL_PCD_EP_Open+0xb2>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68f9      	ldr	r1, [r7, #12]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f8ea 	bl	8004524 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001358:	7afb      	ldrb	r3, [r7, #11]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800136e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001372:	2b00      	cmp	r3, #0
 8001374:	da0e      	bge.n	8001394 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	705a      	strb	r2, [r3, #1]
 8001392:	e00e      	b.n	80013b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_PCD_EP_Close+0x6a>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e00e      	b.n	80013ea <HAL_PCD_EP_Close+0x88>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68f9      	ldr	r1, [r7, #12]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc62 	bl	8004ca4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	460b      	mov	r3, r1
 8001400:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	f003 0207 	and.w	r2, r3, #7
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2200      	movs	r2, #0
 8001430:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	b2da      	uxtb	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6979      	ldr	r1, [r7, #20]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fe19 	bl	800507c <USB_EPStartXfer>

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	460b      	mov	r3, r1
 8001462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001464:	7afb      	ldrb	r3, [r7, #11]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2201      	movs	r2, #1
 800149e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6979      	ldr	r1, [r7, #20]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fde2 	bl	800507c <USB_EPStartXfer>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 0207 	and.w	r2, r3, #7
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d901      	bls.n	80014e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e04c      	b.n	800157a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da0e      	bge.n	8001506 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	705a      	strb	r2, [r3, #1]
 8001504:	e00c      	b.n	8001520 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_PCD_EP_SetStall+0x7e>
 800153c:	2302      	movs	r3, #2
 800153e:	e01c      	b.n	800157a <HAL_PCD_EP_SetStall+0xb8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	4618      	mov	r0, r3
 8001550:	f005 f945 	bl	80067de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	2b00      	cmp	r3, #0
 800155c:	d108      	bne.n	8001570 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f005 fa6a 	bl	8006a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d901      	bls.n	80015a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e040      	b.n	8001622 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da0e      	bge.n	80015c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2201      	movs	r2, #1
 80015c2:	705a      	strb	r2, [r3, #1]
 80015c4:	e00e      	b.n	80015e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	f003 0207 	and.w	r2, r3, #7
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_PCD_EP_ClrStall+0x82>
 8001600:	2302      	movs	r3, #2
 8001602:	e00e      	b.n	8001622 <HAL_PCD_EP_ClrStall+0xa0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	4618      	mov	r0, r3
 8001614:	f005 f933 	bl	800687e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b096      	sub	sp, #88	@ 0x58
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001632:	e3be      	b.n	8001db2 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800163c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001640:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800164e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001652:	2b00      	cmp	r3, #0
 8001654:	f040 8178 	bne.w	8001948 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001658:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	2b00      	cmp	r3, #0
 8001662:	d151      	bne.n	8001708 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001684:	b29b      	uxth	r3, r3
 8001686:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3328      	adds	r3, #40	@ 0x28
 800168c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	3302      	adds	r3, #2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	441a      	add	r2, r3
 80016c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016c8:	2100      	movs	r1, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f006 fe19 	bl	8008302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 836a 	beq.w	8001db2 <PCD_EP_ISR_Handler+0x788>
 80016de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 8365 	bne.w	8001db2 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001706:	e354      	b.n	8001db2 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800170e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800171a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800171e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001722:	2b00      	cmp	r3, #0
 8001724:	d034      	beq.n	8001790 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	3306      	adds	r3, #6
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800174e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001750:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 800175c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001762:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001764:	b29b      	uxth	r3, r3
 8001766:	f005 f9bd 	bl	8006ae4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29a      	uxth	r2, r3
 8001772:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001776:	4013      	ands	r3, r2
 8001778:	823b      	strh	r3, [r7, #16]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	8a3a      	ldrh	r2, [r7, #16]
 8001780:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001784:	b292      	uxth	r2, r2
 8001786:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f006 fd8d 	bl	80082a8 <HAL_PCD_SetupStageCallback>
 800178e:	e310      	b.n	8001db2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001790:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001794:	2b00      	cmp	r3, #0
 8001796:	f280 830c 	bge.w	8001db2 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017a6:	4013      	ands	r3, r2
 80017a8:	83fb      	strh	r3, [r7, #30]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	8bfa      	ldrh	r2, [r7, #30]
 80017b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017b4:	b292      	uxth	r2, r2
 80017b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	3306      	adds	r3, #6
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d019      	beq.n	8001820 <PCD_EP_ISR_Handler+0x1f6>
 80017ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d015      	beq.n	8001820 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fa:	6959      	ldr	r1, [r3, #20]
 80017fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001802:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001804:	b29b      	uxth	r3, r3
 8001806:	f005 f96d 	bl	8006ae4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800180a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	441a      	add	r2, r3
 8001814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001816:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001818:	2100      	movs	r1, #0
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f006 fd56 	bl	80082cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800182a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800182e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 82bd 	bne.w	8001db2 <PCD_EP_ISR_Handler+0x788>
 8001838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800183c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001840:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001844:	f000 82b5 	beq.w	8001db2 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4413      	add	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001872:	b29a      	uxth	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	801a      	strh	r2, [r3, #0]
 8001878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b3e      	cmp	r3, #62	@ 0x3e
 800187e:	d91d      	bls.n	80018bc <PCD_EP_ISR_Handler+0x292>
 8001880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	095b      	lsrs	r3, r3, #5
 8001886:	647b      	str	r3, [r7, #68]	@ 0x44
 8001888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <PCD_EP_ISR_Handler+0x270>
 8001894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001896:	3b01      	subs	r3, #1
 8001898:	647b      	str	r3, [r7, #68]	@ 0x44
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	029b      	lsls	r3, r3, #10
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	e026      	b.n	800190a <PCD_EP_ISR_Handler+0x2e0>
 80018bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10a      	bne.n	80018da <PCD_EP_ISR_Handler+0x2b0>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	801a      	strh	r2, [r3, #0]
 80018d8:	e017      	b.n	800190a <PCD_EP_ISR_Handler+0x2e0>
 80018da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <PCD_EP_ISR_Handler+0x2ca>
 80018ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f0:	3301      	adds	r3, #1
 80018f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	b29b      	uxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800191a:	827b      	strh	r3, [r7, #18]
 800191c:	8a7b      	ldrh	r3, [r7, #18]
 800191e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001922:	827b      	strh	r3, [r7, #18]
 8001924:	8a7b      	ldrh	r3, [r7, #18]
 8001926:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800192a:	827b      	strh	r3, [r7, #18]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	8a7b      	ldrh	r3, [r7, #18]
 8001932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800193a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800193e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001942:	b29b      	uxth	r3, r3
 8001944:	8013      	strh	r3, [r2, #0]
 8001946:	e234      	b.n	8001db2 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800195c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001960:	2b00      	cmp	r3, #0
 8001962:	f280 80fc 	bge.w	8001b5e <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29a      	uxth	r2, r3
 8001978:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800197c:	4013      	ands	r3, r2
 800197e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001994:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001998:	b292      	uxth	r2, r2
 800199a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800199c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b4:	7b1b      	ldrb	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d125      	bne.n	8001a06 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	3306      	adds	r3, #6
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80019e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8092 	beq.w	8001b14 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f6:	6959      	ldr	r1, [r3, #20]
 80019f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fa:	88da      	ldrh	r2, [r3, #6]
 80019fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a00:	f005 f870 	bl	8006ae4 <USB_ReadPMA>
 8001a04:	e086      	b.n	8001b14 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a08:	78db      	ldrb	r3, [r3, #3]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d10a      	bne.n	8001a24 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a12:	461a      	mov	r2, r3
 8001a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f9d9 	bl	8001dce <HAL_PCD_EP_DB_Receive>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001a22:	e077      	b.n	8001b14 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a3e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	441a      	add	r2, r3
 8001a50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	3302      	adds	r3, #2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aaa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001aae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d02e      	beq.n	8001b14 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abc:	6959      	ldr	r1, [r3, #20]
 8001abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac0:	891a      	ldrh	r2, [r3, #8]
 8001ac2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ac6:	f005 f80d 	bl	8006ae4 <USB_ReadPMA>
 8001aca:	e023      	b.n	8001b14 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	3306      	adds	r3, #6
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001af8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b06:	6959      	ldr	r1, [r3, #20]
 8001b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0a:	895a      	ldrh	r2, [r3, #10]
 8001b0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b10:	f004 ffe8 	bl	8006ae4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b1c:	441a      	add	r2, r3
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b2a:	441a      	add	r2, r3
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <PCD_EP_ISR_Handler+0x51a>
 8001b38:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d206      	bcs.n	8001b52 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f006 fbbe 	bl	80082cc <HAL_PCD_DataOutStageCallback>
 8001b50:	e005      	b.n	8001b5e <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fa8f 	bl	800507c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8123 	beq.w	8001db2 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	441a      	add	r2, r3
 8001bac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbe:	78db      	ldrb	r3, [r3, #3]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f040 80a2 	bne.w	8001d0a <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bce:	7b1b      	ldrb	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8093 	beq.w	8001cfc <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d046      	beq.n	8001c70 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be4:	785b      	ldrb	r3, [r3, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d126      	bne.n	8001c38 <PCD_EP_ISR_Handler+0x60e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	4413      	add	r3, r2
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	011a      	lsls	r2, r3, #4
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	e061      	b.n	8001cfc <PCD_EP_ISR_Handler+0x6d2>
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d15d      	bne.n	8001cfc <PCD_EP_ISR_Handler+0x6d2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c54:	4413      	add	r3, r2
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	011a      	lsls	r2, r3, #4
 8001c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c60:	4413      	add	r3, r2
 8001c62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	e045      	b.n	8001cfc <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c78:	785b      	ldrb	r3, [r3, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d126      	bne.n	8001ccc <PCD_EP_ISR_Handler+0x6a2>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c92:	4413      	add	r3, r2
 8001c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	011a      	lsls	r2, r3, #4
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	e017      	b.n	8001cfc <PCD_EP_ISR_Handler+0x6d2>
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d113      	bne.n	8001cfc <PCD_EP_ISR_Handler+0x6d2>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ce2:	4413      	add	r3, r2
 8001ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	011a      	lsls	r2, r3, #4
 8001cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cee:	4413      	add	r3, r2
 8001cf0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f006 fafd 	bl	8008302 <HAL_PCD_DataInStageCallback>
 8001d08:	e053      	b.n	8001db2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d146      	bne.n	8001da4 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d907      	bls.n	8001d5e <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d56:	1ad2      	subs	r2, r2, r3
 8001d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	e002      	b.n	8001d64 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d106      	bne.n	8001d7a <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f006 fac5 	bl	8008302 <HAL_PCD_DataInStageCallback>
 8001d78:	e01b      	b.n	8001db2 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d82:	441a      	add	r2, r3
 8001d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d86:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d90:	441a      	add	r2, r3
 8001d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d94:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 f96d 	bl	800507c <USB_EPStartXfer>
 8001da2:	e006      	b.n	8001db2 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001da4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001da8:	461a      	mov	r2, r3
 8001daa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f91b 	bl	8001fe8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f6ff ac38 	blt.w	8001634 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3758      	adds	r7, #88	@ 0x58
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b088      	sub	sp, #32
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d07e      	beq.n	8001ee4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	8b7b      	ldrh	r3, [r7, #26]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d306      	bcc.n	8001e28 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	8b7b      	ldrh	r3, [r7, #26]
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	619a      	str	r2, [r3, #24]
 8001e26:	e002      	b.n	8001e2e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d123      	bne.n	8001e7e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e50:	833b      	strh	r3, [r7, #24]
 8001e52:	8b3b      	ldrh	r3, [r7, #24]
 8001e54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e58:	833b      	strh	r3, [r7, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	441a      	add	r2, r3
 8001e68:	8b3b      	ldrh	r3, [r7, #24]
 8001e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01f      	beq.n	8001ec8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea2:	82fb      	strh	r3, [r7, #22]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	8afb      	ldrh	r3, [r7, #22]
 8001eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ec0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ec8:	8b7b      	ldrh	r3, [r7, #26]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6959      	ldr	r1, [r3, #20]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	891a      	ldrh	r2, [r3, #8]
 8001edc:	8b7b      	ldrh	r3, [r7, #26]
 8001ede:	f004 fe01 	bl	8006ae4 <USB_ReadPMA>
 8001ee2:	e07c      	b.n	8001fde <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3306      	adds	r3, #6
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	8b7b      	ldrh	r3, [r7, #26]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d306      	bcc.n	8001f26 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	8b7b      	ldrh	r3, [r7, #26]
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	619a      	str	r2, [r3, #24]
 8001f24:	e002      	b.n	8001f2c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d123      	bne.n	8001f7c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f4e:	83fb      	strh	r3, [r7, #30]
 8001f50:	8bfb      	ldrh	r3, [r7, #30]
 8001f52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f56:	83fb      	strh	r3, [r7, #30]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	8bfb      	ldrh	r3, [r7, #30]
 8001f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11f      	bne.n	8001fc6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa0:	83bb      	strh	r3, [r7, #28]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	441a      	add	r2, r3
 8001fb0:	8bbb      	ldrh	r3, [r7, #28]
 8001fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fc6:	8b7b      	ldrh	r3, [r7, #26]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6959      	ldr	r1, [r3, #20]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	895a      	ldrh	r2, [r3, #10]
 8001fd8:	8b7b      	ldrh	r3, [r7, #26]
 8001fda:	f004 fd83 	bl	8006ae4 <USB_ReadPMA>
    }
  }

  return count;
 8001fde:	8b7b      	ldrh	r3, [r7, #26]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0a4      	sub	sp, #144	@ 0x90
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 81dd 	beq.w	80023bc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	3302      	adds	r3, #2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002036:	429a      	cmp	r2, r3
 8002038:	d907      	bls.n	800204a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	619a      	str	r2, [r3, #24]
 8002048:	e002      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 80b9 	bne.w	80021cc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d126      	bne.n	80020b0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002076:	4413      	add	r3, r2
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	011a      	lsls	r2, r3, #4
 8002080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002082:	4413      	add	r3, r2
 8002084:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002094:	b29a      	uxth	r2, r3
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	e01a      	b.n	80020e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d116      	bne.n	80020e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020cc:	4413      	add	r3, r2
 80020ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	011a      	lsls	r2, r3, #4
 80020d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d8:	4413      	add	r3, r2
 80020da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020de:	633b      	str	r3, [r7, #48]	@ 0x30
 80020e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d126      	bne.n	8002142 <HAL_PCD_EP_DB_Transmit+0x15a>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	011a      	lsls	r2, r3, #4
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002126:	b29a      	uxth	r2, r3
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213a:	b29a      	uxth	r2, r3
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	e017      	b.n	8002172 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d113      	bne.n	8002172 <HAL_PCD_EP_DB_Transmit+0x18a>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	4413      	add	r3, r2
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	011a      	lsls	r2, r3, #4
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	4413      	add	r3, r2
 8002166:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2200      	movs	r2, #0
 8002170:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f006 f8c2 	bl	8008302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 82fc 	beq.w	8002782 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a4:	82fb      	strh	r3, [r7, #22]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	441a      	add	r2, r3
 80021b4:	8afb      	ldrh	r3, [r7, #22]
 80021b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	8013      	strh	r3, [r2, #0]
 80021ca:	e2da      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d021      	beq.n	800221a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800220a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800220e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002216:	b29b      	uxth	r3, r3
 8002218:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002220:	2b01      	cmp	r3, #1
 8002222:	f040 82ae 	bne.w	8002782 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800222e:	441a      	add	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800223c:	441a      	add	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	429a      	cmp	r2, r3
 800224c:	d30b      	bcc.n	8002266 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800225e:	1ad2      	subs	r2, r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	621a      	str	r2, [r3, #32]
 8002264:	e017      	b.n	8002296 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800226e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800227e:	e00a      	b.n	8002296 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d165      	bne.n	800236a <HAL_PCD_EP_DB_Transmit+0x382>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	4413      	add	r3, r2
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	011a      	lsls	r2, r3, #4
 80022bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022be:	4413      	add	r3, r2
 80022c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022da:	2b3e      	cmp	r3, #62	@ 0x3e
 80022dc:	d91d      	bls.n	800231a <HAL_PCD_EP_DB_Transmit+0x332>
 80022de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x310>
 80022f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022f4:	3b01      	subs	r3, #1
 80022f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002300:	b29b      	uxth	r3, r3
 8002302:	029b      	lsls	r3, r3, #10
 8002304:	b29b      	uxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800230e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002312:	b29a      	uxth	r2, r3
 8002314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002316:	801a      	strh	r2, [r3, #0]
 8002318:	e044      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800231a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10a      	bne.n	8002338 <HAL_PCD_EP_DB_Transmit+0x350>
 8002322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002330:	b29a      	uxth	r2, r3
 8002332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	e035      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_PCD_EP_DB_Transmit+0x36a>
 800234c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800234e:	3301      	adds	r3, #1
 8002350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29a      	uxth	r2, r3
 8002358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235a:	b29b      	uxth	r3, r3
 800235c:	029b      	lsls	r3, r3, #10
 800235e:	b29b      	uxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	e01c      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	785b      	ldrb	r3, [r3, #1]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d118      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	647b      	str	r3, [r7, #68]	@ 0x44
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002386:	4413      	add	r3, r2
 8002388:	647b      	str	r3, [r7, #68]	@ 0x44
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	011a      	lsls	r2, r3, #4
 8002390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002392:	4413      	add	r3, r2
 8002394:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002398:	643b      	str	r3, [r7, #64]	@ 0x40
 800239a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239e:	b29a      	uxth	r2, r3
 80023a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6959      	ldr	r1, [r3, #20]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	891a      	ldrh	r2, [r3, #8]
 80023b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f004 fb50 	bl	8006a5a <USB_WritePMA>
 80023ba:	e1e2      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	3306      	adds	r3, #6
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d307      	bcc.n	8002404 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023fc:	1ad2      	subs	r2, r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	619a      	str	r2, [r3, #24]
 8002402:	e002      	b.n	800240a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 80c0 	bne.w	8002594 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d126      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x482>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002430:	4413      	add	r3, r2
 8002432:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	011a      	lsls	r2, r3, #4
 800243a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800243c:	4413      	add	r3, r2
 800243e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002442:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244e:	b29a      	uxth	r2, r3
 8002450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002462:	b29a      	uxth	r2, r3
 8002464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002466:	801a      	strh	r2, [r3, #0]
 8002468:	e01a      	b.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d116      	bne.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	667b      	str	r3, [r7, #100]	@ 0x64
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002486:	4413      	add	r3, r2
 8002488:	667b      	str	r3, [r7, #100]	@ 0x64
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	011a      	lsls	r2, r3, #4
 8002490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002492:	4413      	add	r3, r2
 8002494:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002498:	663b      	str	r3, [r7, #96]	@ 0x60
 800249a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800249c:	2200      	movs	r2, #0
 800249e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d12b      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x51e>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c2:	4413      	add	r3, r2
 80024c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	011a      	lsls	r2, r3, #4
 80024cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	e017      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d113      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x54e>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800251c:	4413      	add	r3, r2
 800251e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	011a      	lsls	r2, r3, #4
 8002526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002528:	4413      	add	r3, r2
 800252a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800252e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002532:	2200      	movs	r2, #0
 8002534:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f005 fee0 	bl	8008302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 811a 	bne.w	8002782 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002568:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800257e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800258a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800258e:	b29b      	uxth	r3, r3
 8002590:	8013      	strh	r3, [r2, #0]
 8002592:	e0f6      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d121      	bne.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025de:	b29b      	uxth	r3, r3
 80025e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 80ca 	bne.w	8002782 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025f6:	441a      	add	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002604:	441a      	add	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	6a1a      	ldr	r2, [r3, #32]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	429a      	cmp	r2, r3
 8002614:	d30b      	bcc.n	800262e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6a1a      	ldr	r2, [r3, #32]
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	621a      	str	r2, [r3, #32]
 800262c:	e017      	b.n	800265e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002636:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800263a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002646:	e00a      	b.n	800265e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	657b      	str	r3, [r7, #84]	@ 0x54
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d165      	bne.n	8002738 <HAL_PCD_EP_DB_Transmit+0x750>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002680:	4413      	add	r3, r2
 8002682:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	011a      	lsls	r2, r3, #4
 800268a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800268c:	4413      	add	r3, r2
 800268e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002692:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002694:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269e:	b29a      	uxth	r2, r3
 80026a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80026aa:	d91d      	bls.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x700>
 80026ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80026c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026c2:	3b01      	subs	r3, #1
 80026c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	e041      	b.n	800276c <HAL_PCD_EP_DB_Transmit+0x784>
 80026e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x71e>
 80026f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e032      	b.n	800276c <HAL_PCD_EP_DB_Transmit+0x784>
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800270e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_PCD_EP_DB_Transmit+0x738>
 800271a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800271c:	3301      	adds	r3, #1
 800271e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29a      	uxth	r2, r3
 8002726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002728:	b29b      	uxth	r3, r3
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	b29b      	uxth	r3, r3
 800272e:	4313      	orrs	r3, r2
 8002730:	b29a      	uxth	r2, r3
 8002732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	e019      	b.n	800276c <HAL_PCD_EP_DB_Transmit+0x784>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d115      	bne.n	800276c <HAL_PCD_EP_DB_Transmit+0x784>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274e:	4413      	add	r3, r2
 8002750:	657b      	str	r3, [r7, #84]	@ 0x54
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	011a      	lsls	r2, r3, #4
 8002758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275a:	4413      	add	r3, r2
 800275c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002760:	653b      	str	r3, [r7, #80]	@ 0x50
 8002762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002766:	b29a      	uxth	r2, r3
 8002768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800276a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6959      	ldr	r1, [r3, #20]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	895a      	ldrh	r2, [r3, #10]
 8002778:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800277c:	b29b      	uxth	r3, r3
 800277e:	f004 f96c 	bl	8006a5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800279c:	82bb      	strh	r3, [r7, #20]
 800279e:	8abb      	ldrh	r3, [r7, #20]
 80027a0:	f083 0310 	eor.w	r3, r3, #16
 80027a4:	82bb      	strh	r3, [r7, #20]
 80027a6:	8abb      	ldrh	r3, [r7, #20]
 80027a8:	f083 0320 	eor.w	r3, r3, #32
 80027ac:	82bb      	strh	r3, [r7, #20]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	8abb      	ldrh	r3, [r7, #20]
 80027be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3790      	adds	r7, #144	@ 0x90
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	4613      	mov	r3, r2
 80027ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027ee:	897b      	ldrh	r3, [r7, #10]
 80027f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e009      	b.n	8002826 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002812:	897a      	ldrh	r2, [r7, #10]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2200      	movs	r2, #0
 8002830:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	b29a      	uxth	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	80da      	strh	r2, [r3, #6]
 800283a:	e00b      	b.n	8002854 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2201      	movs	r2, #1
 8002840:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	b29a      	uxth	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b29a      	uxth	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e272      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8087 	beq.w	800298e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002880:	4b92      	ldr	r3, [pc, #584]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b04      	cmp	r3, #4
 800288a:	d00c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800288c:	4b8f      	ldr	r3, [pc, #572]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d112      	bne.n	80028be <HAL_RCC_OscConfig+0x5e>
 8002898:	4b8c      	ldr	r3, [pc, #560]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d10b      	bne.n	80028be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a6:	4b89      	ldr	r3, [pc, #548]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d06c      	beq.n	800298c <HAL_RCC_OscConfig+0x12c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d168      	bne.n	800298c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e24c      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x76>
 80028c8:	4b80      	ldr	r3, [pc, #512]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a7f      	ldr	r2, [pc, #508]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	e02e      	b.n	8002934 <HAL_RCC_OscConfig+0xd4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x98>
 80028de:	4b7b      	ldr	r3, [pc, #492]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a7a      	ldr	r2, [pc, #488]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b78      	ldr	r3, [pc, #480]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a77      	ldr	r2, [pc, #476]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80028f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e01d      	b.n	8002934 <HAL_RCC_OscConfig+0xd4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0xbc>
 8002902:	4b72      	ldr	r3, [pc, #456]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a71      	ldr	r2, [pc, #452]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6e      	ldr	r2, [pc, #440]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0xd4>
 800291c:	4b6b      	ldr	r3, [pc, #428]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a6a      	ldr	r2, [pc, #424]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b68      	ldr	r3, [pc, #416]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a67      	ldr	r2, [pc, #412]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 800292e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fd feec 	bl	8000718 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fd fee8 	bl	8000718 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	@ 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e200      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0xe4>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fd fed8 	bl	8000718 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7fd fed4 	bl	8000718 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	@ 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1ec      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x10c>
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d063      	beq.n	8002a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800299a:	4b4c      	ldr	r3, [pc, #304]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029a6:	4b49      	ldr	r3, [pc, #292]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d11c      	bne.n	80029ec <HAL_RCC_OscConfig+0x18c>
 80029b2:	4b46      	ldr	r3, [pc, #280]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d116      	bne.n	80029ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	4b43      	ldr	r3, [pc, #268]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_RCC_OscConfig+0x176>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e1c0      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d6:	4b3d      	ldr	r3, [pc, #244]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4939      	ldr	r1, [pc, #228]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	e03a      	b.n	8002a62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f4:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <HAL_RCC_OscConfig+0x270>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fd fe8d 	bl	8000718 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fd fe89 	bl	8000718 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1a1      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b2a      	ldr	r3, [pc, #168]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4927      	ldr	r1, [pc, #156]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b26      	ldr	r3, [pc, #152]	@ (8002ad0 <HAL_RCC_OscConfig+0x270>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fd fe6c 	bl	8000718 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a44:	f7fd fe68 	bl	8000718 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e180      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03a      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d019      	beq.n	8002aaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a76:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7fd fe4c 	bl	8000718 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a84:	f7fd fe48 	bl	8000718 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e160      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f000 face 	bl	8003044 <RCC_Delay>
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <HAL_RCC_OscConfig+0x274>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7fd fe32 	bl	8000718 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab6:	e00f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fd fe2e 	bl	8000718 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d908      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e146      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	42420000 	.word	0x42420000
 8002ad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b92      	ldr	r3, [pc, #584]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e9      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80a6 	beq.w	8002c3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b8b      	ldr	r3, [pc, #556]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	4b88      	ldr	r3, [pc, #544]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4a87      	ldr	r2, [pc, #540]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	61d3      	str	r3, [r2, #28]
 8002b0e:	4b85      	ldr	r3, [pc, #532]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b82      	ldr	r3, [pc, #520]	@ (8002d28 <HAL_RCC_OscConfig+0x4c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d28 <HAL_RCC_OscConfig+0x4c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d28 <HAL_RCC_OscConfig+0x4c8>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7fd fdef 	bl	8000718 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7fd fdeb 	bl	8000718 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	@ 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e103      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b75      	ldr	r3, [pc, #468]	@ (8002d28 <HAL_RCC_OscConfig+0x4c8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x312>
 8002b64:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a6e      	ldr	r2, [pc, #440]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	e02d      	b.n	8002bce <HAL_RCC_OscConfig+0x36e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x334>
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a69      	ldr	r2, [pc, #420]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	4b67      	ldr	r3, [pc, #412]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4a66      	ldr	r2, [pc, #408]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	6213      	str	r3, [r2, #32]
 8002b92:	e01c      	b.n	8002bce <HAL_RCC_OscConfig+0x36e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x356>
 8002b9c:	4b61      	ldr	r3, [pc, #388]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4a60      	ldr	r2, [pc, #384]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4a5d      	ldr	r2, [pc, #372]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6213      	str	r3, [r2, #32]
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x36e>
 8002bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a5a      	ldr	r2, [pc, #360]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	4b58      	ldr	r3, [pc, #352]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4a57      	ldr	r2, [pc, #348]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d015      	beq.n	8002c02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fd fd9f 	bl	8000718 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fd fd9b 	bl	8000718 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0b1      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <HAL_RCC_OscConfig+0x37e>
 8002c00:	e014      	b.n	8002c2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fd fd89 	bl	8000718 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fd fd85 	bl	8000718 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e09b      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	4b40      	ldr	r3, [pc, #256]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4b3c      	ldr	r3, [pc, #240]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4a3b      	ldr	r2, [pc, #236]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8087 	beq.w	8002d56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c48:	4b36      	ldr	r3, [pc, #216]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d061      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d146      	bne.n	8002cea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b33      	ldr	r3, [pc, #204]	@ (8002d2c <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fd fd59 	bl	8000718 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fd fd55 	bl	8000718 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e06d      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7c:	4b29      	ldr	r3, [pc, #164]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c90:	d108      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c92:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	4921      	ldr	r1, [pc, #132]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a19      	ldr	r1, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	491b      	ldr	r1, [pc, #108]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fd fd29 	bl	8000718 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fd fd25 	bl	8000718 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e03d      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x46a>
 8002ce8:	e035      	b.n	8002d56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fd fd12 	bl	8000718 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fd fd0e 	bl	8000718 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e026      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x498>
 8002d16:	e01e      	b.n	8002d56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e019      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_OscConfig+0x500>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0d0      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d910      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b67      	ldr	r3, [pc, #412]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 0207 	bic.w	r2, r3, #7
 8002d8e:	4965      	ldr	r1, [pc, #404]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b63      	ldr	r3, [pc, #396]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b8      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a58      	ldr	r2, [pc, #352]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd8:	4b53      	ldr	r3, [pc, #332]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002de2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b50      	ldr	r3, [pc, #320]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	494d      	ldr	r1, [pc, #308]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d040      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b47      	ldr	r3, [pc, #284]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d115      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b41      	ldr	r3, [pc, #260]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e073      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3d      	ldr	r3, [pc, #244]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e06b      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b39      	ldr	r3, [pc, #228]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4936      	ldr	r1, [pc, #216]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7fd fc60 	bl	8000718 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7fd fc5c 	bl	8000718 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e053      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b27      	ldr	r3, [pc, #156]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d210      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 0207 	bic.w	r2, r3, #7
 8002e9a:	4922      	ldr	r1, [pc, #136]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e032      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4916      	ldr	r1, [pc, #88]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ede:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	490e      	ldr	r1, [pc, #56]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef2:	f000 f821 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490a      	ldr	r1, [pc, #40]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	4a09      	ldr	r2, [pc, #36]	@ (8002f30 <HAL_RCC_ClockConfig+0x1cc>)
 8002f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x1d0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fbbe 	bl	8000694 <HAL_InitTick>

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	08008824 	.word	0x08008824
 8002f30:	20000000 	.word	0x20000000
 8002f34:	20000004 	.word	0x20000004

08002f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f52:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x30>
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x36>
 8002f66:	e027      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f68:	4b19      	ldr	r3, [pc, #100]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f6a:	613b      	str	r3, [r7, #16]
      break;
 8002f6c:	e027      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	0c9b      	lsrs	r3, r3, #18
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	4a17      	ldr	r2, [pc, #92]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f86:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	0c5b      	lsrs	r3, r3, #17
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	4a11      	ldr	r2, [pc, #68]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f92:	5cd3      	ldrb	r3, [r2, r3]
 8002f94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9a:	fb03 f202 	mul.w	r2, r3, r2
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e004      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0c      	ldr	r2, [pc, #48]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fba:	613b      	str	r3, [r7, #16]
      break;
 8002fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fbe:	693b      	ldr	r3, [r7, #16]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	007a1200 	.word	0x007a1200
 8002fd4:	0800883c 	.word	0x0800883c
 8002fd8:	0800884c 	.word	0x0800884c
 8002fdc:	003d0900 	.word	0x003d0900

08002fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b02      	ldr	r3, [pc, #8]	@ (8002ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff8:	f7ff fff2 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	@ (8003018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	08008834 	.word	0x08008834

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003020:	f7ff ffde 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0adb      	lsrs	r3, r3, #11
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4903      	ldr	r1, [pc, #12]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08008834 	.word	0x08008834

08003044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800304c:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <RCC_Delay+0x34>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <RCC_Delay+0x38>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0a5b      	lsrs	r3, r3, #9
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003060:	bf00      	nop
  }
  while (Delay --);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1e5a      	subs	r2, r3, #1
 8003066:	60fa      	str	r2, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f9      	bne.n	8003060 <RCC_Delay+0x1c>
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	20000000 	.word	0x20000000
 800307c:	10624dd3 	.word	0x10624dd3

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d07d      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a0:	4b4f      	ldr	r3, [pc, #316]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	4b4c      	ldr	r3, [pc, #304]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4a4b      	ldr	r2, [pc, #300]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b6:	61d3      	str	r3, [r2, #28]
 80030b8:	4b49      	ldr	r3, [pc, #292]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d118      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d4:	4b43      	ldr	r3, [pc, #268]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e0:	f7fd fb1a 	bl	8000718 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	e008      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e8:	f7fd fb16 	bl	8000718 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e06d      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b3a      	ldr	r3, [pc, #232]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003106:	4b36      	ldr	r3, [pc, #216]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02e      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d027      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003124:	4b2e      	ldr	r3, [pc, #184]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800312e:	4b2e      	ldr	r3, [pc, #184]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003134:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800313a:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d014      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314a:	f7fd fae5 	bl	8000718 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fd fae1 	bl	8000718 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e036      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ee      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003174:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4917      	ldr	r1, [pc, #92]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	4313      	orrs	r3, r2
 8003184:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b14      	ldr	r3, [pc, #80]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a13      	ldr	r2, [pc, #76]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003196:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031a4:	4b0e      	ldr	r3, [pc, #56]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	490b      	ldr	r1, [pc, #44]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c2:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4904      	ldr	r1, [pc, #16]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42420440 	.word	0x42420440

080031ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e041      	b.n	8003282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd f93a 	bl	800048c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 fa74 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e03a      	b.n	800331a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a18      	ldr	r2, [pc, #96]	@ (8003324 <HAL_TIM_Base_Start_IT+0x98>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ce:	d009      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a14      	ldr	r2, [pc, #80]	@ (8003328 <HAL_TIM_Base_Start_IT+0x9c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a13      	ldr	r2, [pc, #76]	@ (800332c <HAL_TIM_Base_Start_IT+0xa0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d111      	bne.n	8003308 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d010      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	e007      	b.n	8003318 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800

08003330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9b4 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9a7 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9b6 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0204 	mvn.w	r2, #4
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f98a 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f97d 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f98c 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f960 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f953 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f962 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b10      	cmp	r3, #16
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f936 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f929 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f938 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fc ff8a 	bl	80003c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034be:	2b80      	cmp	r3, #128	@ 0x80
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034cc:	2b80      	cmp	r3, #128	@ 0x80
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa7b 	bl	80039d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ea:	2b40      	cmp	r3, #64	@ 0x40
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b40      	cmp	r3, #64	@ 0x40
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8fc 	bl	8003704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b20      	cmp	r3, #32
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d107      	bne.n	8003538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0220 	mvn.w	r2, #32
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa46 	bl	80039c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e0b4      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x186>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800357a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003594:	d03e      	beq.n	8003614 <HAL_TIM_ConfigClockSource+0xd4>
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800359a:	f200 8087 	bhi.w	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a2:	f000 8086 	beq.w	80036b2 <HAL_TIM_ConfigClockSource+0x172>
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035aa:	d87f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b70      	cmp	r3, #112	@ 0x70
 80035ae:	d01a      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0xa6>
 80035b0:	2b70      	cmp	r3, #112	@ 0x70
 80035b2:	d87b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b60      	cmp	r3, #96	@ 0x60
 80035b6:	d050      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x11a>
 80035b8:	2b60      	cmp	r3, #96	@ 0x60
 80035ba:	d877      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b50      	cmp	r3, #80	@ 0x50
 80035be:	d03c      	beq.n	800363a <HAL_TIM_ConfigClockSource+0xfa>
 80035c0:	2b50      	cmp	r3, #80	@ 0x50
 80035c2:	d873      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b40      	cmp	r3, #64	@ 0x40
 80035c6:	d058      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x13a>
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d86f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b30      	cmp	r3, #48	@ 0x30
 80035ce:	d064      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035d0:	2b30      	cmp	r3, #48	@ 0x30
 80035d2:	d86b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d060      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d867      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d05a      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x15a>
 80035e4:	e062      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035f6:	f000 f968 	bl	80038ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	609a      	str	r2, [r3, #8]
      break;
 8003612:	e04f      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003624:	f000 f951 	bl	80038ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003636:	609a      	str	r2, [r3, #8]
      break;
 8003638:	e03c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	461a      	mov	r2, r3
 8003648:	f000 f8c8 	bl	80037dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2150      	movs	r1, #80	@ 0x50
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f91f 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 8003658:	e02c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003666:	461a      	mov	r2, r3
 8003668:	f000 f8e6 	bl	8003838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2160      	movs	r1, #96	@ 0x60
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f90f 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 8003678:	e01c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003686:	461a      	mov	r2, r3
 8003688:	f000 f8a8 	bl	80037dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2140      	movs	r1, #64	@ 0x40
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f8ff 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 8003698:	e00c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f000 f8f6 	bl	8003896 <TIM_ITRx_SetConfig>
      break;
 80036aa:	e003      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e000      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
	...

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a29      	ldr	r2, [pc, #164]	@ (80037d0 <TIM_Base_SetConfig+0xb8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0x30>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0x30>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a26      	ldr	r2, [pc, #152]	@ (80037d4 <TIM_Base_SetConfig+0xbc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0x30>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <TIM_Base_SetConfig+0xc0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d108      	bne.n	800375a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <TIM_Base_SetConfig+0xb8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00b      	beq.n	800377a <TIM_Base_SetConfig+0x62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003768:	d007      	beq.n	800377a <TIM_Base_SetConfig+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a19      	ldr	r2, [pc, #100]	@ (80037d4 <TIM_Base_SetConfig+0xbc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a18      	ldr	r2, [pc, #96]	@ (80037d8 <TIM_Base_SetConfig+0xc0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d108      	bne.n	800378c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a07      	ldr	r2, [pc, #28]	@ (80037d0 <TIM_Base_SetConfig+0xb8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d103      	bne.n	80037c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	615a      	str	r2, [r3, #20]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800

080037dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0201 	bic.w	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f023 030a 	bic.w	r3, r3, #10
 8003818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0210 	bic.w	r2, r3, #16
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	031b      	lsls	r3, r3, #12
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003874:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	621a      	str	r2, [r3, #32]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f043 0307 	orr.w	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b087      	sub	sp, #28
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	021a      	lsls	r2, r3, #8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800391c:	2302      	movs	r3, #2
 800391e:	e046      	b.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a16      	ldr	r2, [pc, #88]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396c:	d009      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a12      	ldr	r2, [pc, #72]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a10      	ldr	r2, [pc, #64]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10c      	bne.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4313      	orrs	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800

080039c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fc fd60 	bl	80004d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	@ 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fc7f 	bl	8004330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_UART_IRQHandler+0x66>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fb63 	bl	80041b2 <UART_Receive_IT>
      return;
 8003aec:	e25b      	b.n	8003fa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80de 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x22c>
 8003af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80d1 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_UART_IRQHandler+0xae>
 8003b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_UART_IRQHandler+0xd2>
 8003b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	f043 0202 	orr.w	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_UART_IRQHandler+0xf6>
 8003b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f043 0204 	orr.w	r2, r3, #4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d011      	beq.n	8003bae <HAL_UART_IRQHandler+0x126>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	f043 0208 	orr.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 81f2 	beq.w	8003f9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x14e>
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 faee 	bl	80041b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <HAL_UART_IRQHandler+0x17a>
 8003bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d04f      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9f8 	bl	8003ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d041      	beq.n	8003c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1d9      	bne.n	8003c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d013      	beq.n	8003c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e68 <HAL_UART_IRQHandler+0x3e0>)
 8003c70:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fea0 	bl	80009bc <HAL_DMA_Abort_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	e00e      	b.n	8003cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f99c 	bl	8003fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	e00a      	b.n	8003cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f998 	bl	8003fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e006      	b.n	8003cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f994 	bl	8003fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cae:	e175      	b.n	8003f9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	bf00      	nop
    return;
 8003cb2:	e173      	b.n	8003f9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f040 814f 	bne.w	8003f5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8148 	beq.w	8003f5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8141 	beq.w	8003f5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80b6 	beq.w	8003e6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8145 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	f080 813e 	bcs.w	8003fa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	f000 8088 	beq.w	8003e48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1d9      	bne.n	8003d38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003da8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e1      	bne.n	8003d84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003de4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003de6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e3      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e18:	f023 0310 	bic.w	r3, r3, #16
 8003e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e3      	bne.n	8003e06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fd7f 	bl	8000946 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8bf 	bl	8003fe2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e64:	e09c      	b.n	8003fa0 <HAL_UART_IRQHandler+0x518>
 8003e66:	bf00      	nop
 8003e68:	080040bd 	.word	0x080040bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 808e 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8089 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e3      	bne.n	8003e92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3314      	adds	r3, #20
 8003eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e3      	bne.n	8003eca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0310 	bic.w	r3, r3, #16
 8003f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f34:	61fa      	str	r2, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	617b      	str	r3, [r7, #20]
   return(result);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e3      	bne.n	8003f10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f844 	bl	8003fe2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f5a:	e023      	b.n	8003fa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_UART_IRQHandler+0x4f4>
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8b5 	bl	80040e4 <UART_Transmit_IT>
    return;
 8003f7a:	e014      	b.n	8003fa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x51e>
 8003f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8f4 	bl	8004182 <UART_EndTransmit_IT>
    return;
 8003f9a:	e004      	b.n	8003fa6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f9c:	bf00      	nop
 8003f9e:	e002      	b.n	8003fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fa4:	bf00      	nop
  }
}
 8003fa6:	37e8      	adds	r7, #232	@ 0xe8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b095      	sub	sp, #84	@ 0x54
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004020:	643a      	str	r2, [r7, #64]	@ 0x40
 8004022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004026:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	61fb      	str	r3, [r7, #28]
   return(result);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800405a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	d119      	bne.n	80040a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	647b      	str	r3, [r7, #68]	@ 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004090:	61ba      	str	r2, [r7, #24]
 8004092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6979      	ldr	r1, [r7, #20]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	613b      	str	r3, [r7, #16]
   return(result);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040b2:	bf00      	nop
 80040b4:	3754      	adds	r7, #84	@ 0x54
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7ff ff7a 	bl	8003fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b21      	cmp	r3, #33	@ 0x21
 80040f6:	d13e      	bne.n	8004176 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004100:	d114      	bne.n	800412c <UART_Transmit_IT+0x48>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d110      	bne.n	800412c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]
 800412a:	e008      	b.n	800413e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	1c59      	adds	r1, r3, #1
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6211      	str	r1, [r2, #32]
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4619      	mov	r1, r3
 800414c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004160:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004170:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004198:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ff02 	bl	8003fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b08c      	sub	sp, #48	@ 0x30
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b22      	cmp	r3, #34	@ 0x22
 80041c4:	f040 80ae 	bne.w	8004324 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d0:	d117      	bne.n	8004202 <UART_Receive_IT+0x50>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d113      	bne.n	8004202 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004200:	e026      	b.n	8004250 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004214:	d007      	beq.n	8004226 <UART_Receive_IT+0x74>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <UART_Receive_IT+0x82>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e008      	b.n	8004246 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004240:	b2da      	uxtb	r2, r3
 8004242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004244:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4619      	mov	r1, r3
 800425e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004260:	2b00      	cmp	r3, #0
 8004262:	d15d      	bne.n	8004320 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0220 	bic.w	r2, r2, #32
 8004272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d135      	bne.n	8004316 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	613b      	str	r3, [r7, #16]
   return(result);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d0:	623a      	str	r2, [r7, #32]
 80042d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	69f9      	ldr	r1, [r7, #28]
 80042d6:	6a3a      	ldr	r2, [r7, #32]
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d10a      	bne.n	8004308 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fe67 	bl	8003fe2 <HAL_UARTEx_RxEventCallback>
 8004314:	e002      	b.n	800431c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fe51 	bl	8003fbe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e002      	b.n	8004326 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3730      	adds	r7, #48	@ 0x30
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800436a:	f023 030c 	bic.w	r3, r3, #12
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	430b      	orrs	r3, r1
 8004376:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2c      	ldr	r2, [pc, #176]	@ (8004444 <UART_SetConfig+0x114>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d103      	bne.n	80043a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004398:	f7fe fe40 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	e002      	b.n	80043a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7fe fe28 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 80043a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	4a22      	ldr	r2, [pc, #136]	@ (8004448 <UART_SetConfig+0x118>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	0119      	lsls	r1, r3, #4
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009a      	lsls	r2, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <UART_SetConfig+0x118>)
 80043de:	fba3 0302 	umull	r0, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2064      	movs	r0, #100	@ 0x64
 80043e6:	fb00 f303 	mul.w	r3, r0, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	3332      	adds	r3, #50	@ 0x32
 80043f0:	4a15      	ldr	r2, [pc, #84]	@ (8004448 <UART_SetConfig+0x118>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043fc:	4419      	add	r1, r3
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009a      	lsls	r2, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fbb2 f2f3 	udiv	r2, r2, r3
 8004414:	4b0c      	ldr	r3, [pc, #48]	@ (8004448 <UART_SetConfig+0x118>)
 8004416:	fba3 0302 	umull	r0, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2064      	movs	r0, #100	@ 0x64
 800441e:	fb00 f303 	mul.w	r3, r0, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	@ 0x32
 8004428:	4a07      	ldr	r2, [pc, #28]	@ (8004448 <UART_SetConfig+0x118>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	440a      	add	r2, r1
 800443a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40013800 	.word	0x40013800
 8004448:	51eb851f 	.word	0x51eb851f

0800444c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800444c:	b084      	sub	sp, #16
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	f107 0014 	add.w	r0, r7, #20
 800445a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	b004      	add	sp, #16
 800446a:	4770      	bx	lr

0800446c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800447c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004480:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044a0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	4013      	ands	r3, r2
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044e4:	b084      	sub	sp, #16
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	f107 0014 	add.w	r0, r7, #20
 80044f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	b004      	add	sp, #16
 8004522:	4770      	bx	lr

08004524 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004524:	b480      	push	{r7}
 8004526:	b09d      	sub	sp, #116	@ 0x74
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	78db      	ldrb	r3, [r3, #3]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d81f      	bhi.n	8004596 <USB_ActivateEndpoint+0x72>
 8004556:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <USB_ActivateEndpoint+0x38>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004589 	.word	0x08004589
 8004564:	0800459f 	.word	0x0800459f
 8004568:	0800457b 	.word	0x0800457b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800456c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004570:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004574:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004578:	e012      	b.n	80045a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800457a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800457e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004582:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004586:	e00b      	b.n	80045a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004588:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800458c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004590:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004594:	e004      	b.n	80045a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800459c:	e000      	b.n	80045a0 <USB_ActivateEndpoint+0x7c>
      break;
 800459e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d8:	b29b      	uxth	r3, r3
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	7b1b      	ldrb	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 8178 	bne.w	8004900 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	785b      	ldrb	r3, [r3, #1]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8084 	beq.w	8004722 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	011a      	lsls	r2, r3, #4
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	88db      	ldrh	r3, [r3, #6]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	b29b      	uxth	r3, r3
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	827b      	strh	r3, [r7, #18]
 800465c:	8a7b      	ldrh	r3, [r7, #18]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <USB_ActivateEndpoint+0x17a>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467c:	823b      	strh	r3, [r7, #16]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8a3b      	ldrh	r3, [r7, #16]
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004696:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	78db      	ldrb	r3, [r3, #3]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d020      	beq.n	80046e8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	81bb      	strh	r3, [r7, #12]
 80046be:	89bb      	ldrh	r3, [r7, #12]
 80046c0:	f083 0320 	eor.w	r3, r3, #32
 80046c4:	81bb      	strh	r3, [r7, #12]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	89bb      	ldrh	r3, [r7, #12]
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
 80046e6:	e2d5      	b.n	8004c94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fe:	81fb      	strh	r3, [r7, #14]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	89fb      	ldrh	r3, [r7, #14]
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]
 8004720:	e2b8      	b.n	8004c94 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	633b      	str	r3, [r7, #48]	@ 0x30
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800472c:	b29b      	uxth	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	4413      	add	r3, r2
 8004734:	633b      	str	r3, [r7, #48]	@ 0x30
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	011a      	lsls	r2, r3, #4
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	4413      	add	r3, r2
 8004740:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	88db      	ldrh	r3, [r3, #6]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	b29b      	uxth	r3, r3
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004754:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004760:	b29b      	uxth	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	4413      	add	r3, r2
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	011a      	lsls	r2, r3, #4
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	4413      	add	r3, r2
 8004774:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004784:	b29a      	uxth	r2, r3
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004790:	d91d      	bls.n	80047ce <USB_ActivateEndpoint+0x2aa>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <USB_ActivateEndpoint+0x288>
 80047a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047a8:	3b01      	subs	r3, #1
 80047aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	029b      	lsls	r3, r3, #10
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e026      	b.n	800481c <USB_ActivateEndpoint+0x2f8>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <USB_ActivateEndpoint+0x2c8>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	e017      	b.n	800481c <USB_ActivateEndpoint+0x2f8>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <USB_ActivateEndpoint+0x2e2>
 8004800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004802:	3301      	adds	r3, #1
 8004804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29a      	uxth	r2, r3
 800480c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800480e:	b29b      	uxth	r3, r3
 8004810:	029b      	lsls	r3, r3, #10
 8004812:	b29b      	uxth	r3, r3
 8004814:	4313      	orrs	r3, r2
 8004816:	b29a      	uxth	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	847b      	strh	r3, [r7, #34]	@ 0x22
 800482a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800482c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01b      	beq.n	800486c <USB_ActivateEndpoint+0x348>
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	843b      	strh	r3, [r7, #32]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	8c3b      	ldrh	r3, [r7, #32]
 8004858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004860:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004868:	b29b      	uxth	r3, r3
 800486a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d124      	bne.n	80048be <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488a:	83bb      	strh	r3, [r7, #28]
 800488c:	8bbb      	ldrh	r3, [r7, #28]
 800488e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004892:	83bb      	strh	r3, [r7, #28]
 8004894:	8bbb      	ldrh	r3, [r7, #28]
 8004896:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800489a:	83bb      	strh	r3, [r7, #28]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	8bbb      	ldrh	r3, [r7, #28]
 80048a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8013      	strh	r3, [r2, #0]
 80048bc:	e1ea      	b.n	8004c94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d4:	83fb      	strh	r3, [r7, #30]
 80048d6:	8bfb      	ldrh	r3, [r7, #30]
 80048d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048dc:	83fb      	strh	r3, [r7, #30]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	8bfb      	ldrh	r3, [r7, #30]
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]
 80048fe:	e1c9      	b.n	8004c94 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	78db      	ldrb	r3, [r3, #3]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d11e      	bne.n	8004946 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004938:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800493c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004940:	b29b      	uxth	r3, r3
 8004942:	8013      	strh	r3, [r2, #0]
 8004944:	e01d      	b.n	8004982 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800498c:	b29b      	uxth	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004992:	4413      	add	r3, r2
 8004994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	011a      	lsls	r2, r3, #4
 800499c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	891b      	ldrh	r3, [r3, #8]
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c6:	4413      	add	r3, r2
 80049c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80049d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	895b      	ldrh	r3, [r3, #10]
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 8093 	bne.w	8004b1a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004a04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <USB_ActivateEndpoint+0x524>
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004a56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <USB_ActivateEndpoint+0x574>
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aae:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ab0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ab2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ab6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ab8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004aba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004abe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004af6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	8013      	strh	r3, [r2, #0]
 8004b18:	e0bc      	b.n	8004c94 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01d      	beq.n	8004b72 <USB_ActivateEndpoint+0x64e>
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004b82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01d      	beq.n	8004bca <USB_ActivateEndpoint+0x6a6>
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d024      	beq.n	8004c1c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004be8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004bec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004bf0:	f083 0320 	eor.w	r3, r3, #32
 8004bf4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]
 8004c1a:	e01d      	b.n	8004c58 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c94:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3774      	adds	r7, #116	@ 0x74
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop

08004ca4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b08d      	sub	sp, #52	@ 0x34
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	7b1b      	ldrb	r3, [r3, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 808e 	bne.w	8004dd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d044      	beq.n	8004d4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	81bb      	strh	r3, [r7, #12]
 8004cce:	89bb      	ldrh	r3, [r7, #12]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01b      	beq.n	8004d10 <USB_DeactivateEndpoint+0x6c>
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d26:	813b      	strh	r3, [r7, #8]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	893b      	ldrh	r3, [r7, #8]
 8004d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	8013      	strh	r3, [r2, #0]
 8004d48:	e192      	b.n	8005070 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	827b      	strh	r3, [r7, #18]
 8004d58:	8a7b      	ldrh	r3, [r7, #18]
 8004d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01b      	beq.n	8004d9a <USB_DeactivateEndpoint+0xf6>
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d78:	823b      	strh	r3, [r7, #16]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	8a3b      	ldrh	r3, [r7, #16]
 8004d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db0:	81fb      	strh	r3, [r7, #14]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	441a      	add	r2, r3
 8004dbc:	89fb      	ldrh	r3, [r7, #14]
 8004dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	8013      	strh	r3, [r2, #0]
 8004dd2:	e14d      	b.n	8005070 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 80a5 	bne.w	8004f28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	843b      	strh	r3, [r7, #32]
 8004dec:	8c3b      	ldrh	r3, [r7, #32]
 8004dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01b      	beq.n	8004e2e <USB_DeactivateEndpoint+0x18a>
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0c:	83fb      	strh	r3, [r7, #30]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	8bfb      	ldrh	r3, [r7, #30]
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	83bb      	strh	r3, [r7, #28]
 8004e3c:	8bbb      	ldrh	r3, [r7, #28]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01b      	beq.n	8004e7e <USB_DeactivateEndpoint+0x1da>
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5c:	837b      	strh	r3, [r7, #26]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8b7b      	ldrh	r3, [r7, #26]
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e94:	833b      	strh	r3, [r7, #24]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	8b3b      	ldrh	r3, [r7, #24]
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ecc:	82fb      	strh	r3, [r7, #22]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	441a      	add	r2, r3
 8004ed8:	8afb      	ldrh	r3, [r7, #22]
 8004eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f04:	82bb      	strh	r3, [r7, #20]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	8abb      	ldrh	r3, [r7, #20]
 8004f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]
 8004f26:	e0a3      	b.n	8005070 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01b      	beq.n	8004f78 <USB_DeactivateEndpoint+0x2d4>
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004f86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <USB_DeactivateEndpoint+0x324>
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fde:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005016:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800502c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005034:	b29b      	uxth	r3, r3
 8005036:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800504a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800505c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800506c:	b29b      	uxth	r3, r3
 800506e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3734      	adds	r7, #52	@ 0x34
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b0c2      	sub	sp, #264	@ 0x108
 8005080:	af00      	add	r7, sp, #0
 8005082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005086:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800508a:	6018      	str	r0, [r3, #0]
 800508c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005094:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	f040 86b7 	bne.w	8005e16 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d908      	bls.n	80050d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80050d4:	e007      	b.n	80050e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	7b1b      	ldrb	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d13a      	bne.n	800516c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6959      	ldr	r1, [r3, #20]
 8005102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	88da      	ldrh	r2, [r3, #6]
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005112:	b29b      	uxth	r3, r3
 8005114:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005118:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800511c:	6800      	ldr	r0, [r0, #0]
 800511e:	f001 fc9c 	bl	8006a5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800513c:	b29b      	uxth	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	011a      	lsls	r2, r3, #4
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	f000 be1f 	b.w	8005daa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	78db      	ldrb	r3, [r3, #3]
 8005178:	2b02      	cmp	r3, #2
 800517a:	f040 8462 	bne.w	8005a42 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800517e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6a1a      	ldr	r2, [r3, #32]
 800518a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	429a      	cmp	r2, r3
 8005198:	f240 83df 	bls.w	800595a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800519c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80051c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80051f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005208:	1ad2      	subs	r2, r2, r3
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 81c7 	beq.w	80055cc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800523e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	633b      	str	r3, [r7, #48]	@ 0x30
 800524a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	785b      	ldrb	r3, [r3, #1]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d177      	bne.n	800534a <USB_EPStartXfer+0x2ce>
 800525a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005274:	b29b      	uxth	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	4413      	add	r3, r2
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	011a      	lsls	r2, r3, #4
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	4413      	add	r3, r2
 8005290:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ac:	d921      	bls.n	80052f2 <USB_EPStartXfer+0x276>
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <USB_EPStartXfer+0x252>
 80052c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052c8:	3b01      	subs	r3, #1
 80052ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052d8:	b29b      	uxth	r3, r3
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	b29b      	uxth	r3, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	e050      	b.n	8005394 <USB_EPStartXfer+0x318>
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <USB_EPStartXfer+0x294>
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005308:	b29a      	uxth	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e041      	b.n	8005394 <USB_EPStartXfer+0x318>
 8005310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <USB_EPStartXfer+0x2b4>
 8005326:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800532a:	3301      	adds	r3, #1
 800532c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29a      	uxth	r2, r3
 8005336:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800533a:	b29b      	uxth	r3, r3
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	b29b      	uxth	r3, r3
 8005340:	4313      	orrs	r3, r2
 8005342:	b29a      	uxth	r2, r3
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e024      	b.n	8005394 <USB_EPStartXfer+0x318>
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d11c      	bne.n	8005394 <USB_EPStartXfer+0x318>
 800535a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	4413      	add	r3, r2
 8005370:	633b      	str	r3, [r7, #48]	@ 0x30
 8005372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	011a      	lsls	r2, r3, #4
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	4413      	add	r3, r2
 8005384:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538e:	b29a      	uxth	r2, r3
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	895b      	ldrh	r3, [r3, #10]
 80053a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6959      	ldr	r1, [r3, #20]
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053c2:	6800      	ldr	r0, [r0, #0]
 80053c4:	f001 fb49 	bl	8006a5a <USB_WritePMA>
            ep->xfer_buff += len;
 80053c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d8:	441a      	add	r2, r3
 80053da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6a1a      	ldr	r2, [r3, #32]
 80053f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d90f      	bls.n	8005422 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005412:	1ad2      	subs	r2, r2, r3
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	621a      	str	r2, [r3, #32]
 8005420:	e00e      	b.n	8005440 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2200      	movs	r2, #0
 800543e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d177      	bne.n	8005540 <USB_EPStartXfer+0x4c4>
 8005450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	4413      	add	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	011a      	lsls	r2, r3, #4
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	4413      	add	r3, r2
 8005486:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005496:	b29a      	uxth	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80054a2:	d921      	bls.n	80054e8 <USB_EPStartXfer+0x46c>
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <USB_EPStartXfer+0x448>
 80054ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054be:	3b01      	subs	r3, #1
 80054c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e056      	b.n	8005596 <USB_EPStartXfer+0x51a>
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <USB_EPStartXfer+0x48a>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fe:	b29a      	uxth	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e047      	b.n	8005596 <USB_EPStartXfer+0x51a>
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <USB_EPStartXfer+0x4aa>
 800551c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005520:	3301      	adds	r3, #1
 8005522:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29a      	uxth	r2, r3
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005530:	b29b      	uxth	r3, r3
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	b29b      	uxth	r3, r3
 8005536:	4313      	orrs	r3, r2
 8005538:	b29a      	uxth	r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e02a      	b.n	8005596 <USB_EPStartXfer+0x51a>
 8005540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d122      	bne.n	8005596 <USB_EPStartXfer+0x51a>
 8005550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	4413      	add	r3, r2
 8005572:	623b      	str	r3, [r7, #32]
 8005574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	011a      	lsls	r2, r3, #4
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	4413      	add	r3, r2
 8005586:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005590:	b29a      	uxth	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	891b      	ldrh	r3, [r3, #8]
 80055a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6959      	ldr	r1, [r3, #20]
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055c4:	6800      	ldr	r0, [r0, #0]
 80055c6:	f001 fa48 	bl	8006a5a <USB_WritePMA>
 80055ca:	e3ee      	b.n	8005daa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d177      	bne.n	80056cc <USB_EPStartXfer+0x650>
 80055dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055fc:	4413      	add	r3, r2
 80055fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	011a      	lsls	r2, r3, #4
 800560e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005610:	4413      	add	r3, r2
 8005612:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005616:	647b      	str	r3, [r7, #68]	@ 0x44
 8005618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005622:	b29a      	uxth	r2, r3
 8005624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562c:	2b3e      	cmp	r3, #62	@ 0x3e
 800562e:	d921      	bls.n	8005674 <USB_EPStartXfer+0x5f8>
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800563a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <USB_EPStartXfer+0x5d4>
 8005646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800564a:	3b01      	subs	r3, #1
 800564c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29a      	uxth	r2, r3
 8005656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800565a:	b29b      	uxth	r3, r3
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	b29b      	uxth	r3, r3
 8005660:	4313      	orrs	r3, r2
 8005662:	b29b      	uxth	r3, r3
 8005664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566c:	b29a      	uxth	r2, r3
 800566e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	e056      	b.n	8005722 <USB_EPStartXfer+0x6a6>
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <USB_EPStartXfer+0x616>
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29a      	uxth	r2, r3
 800568c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e047      	b.n	8005722 <USB_EPStartXfer+0x6a6>
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <USB_EPStartXfer+0x636>
 80056a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056ac:	3301      	adds	r3, #1
 80056ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056bc:	b29b      	uxth	r3, r3
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	4313      	orrs	r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	e02a      	b.n	8005722 <USB_EPStartXfer+0x6a6>
 80056cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d122      	bne.n	8005722 <USB_EPStartXfer+0x6a6>
 80056dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056fc:	4413      	add	r3, r2
 80056fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	011a      	lsls	r2, r3, #4
 800570e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005710:	4413      	add	r3, r2
 8005712:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	b29a      	uxth	r2, r3
 800571e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	891b      	ldrh	r3, [r3, #8]
 800572e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005742:	b29b      	uxth	r3, r3
 8005744:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005748:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800574c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005750:	6800      	ldr	r0, [r0, #0]
 8005752:	f001 f982 	bl	8006a5a <USB_WritePMA>
            ep->xfer_buff += len;
 8005756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005766:	441a      	add	r2, r3
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a1a      	ldr	r2, [r3, #32]
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d90f      	bls.n	80057b0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a1a      	ldr	r2, [r3, #32]
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a0:	1ad2      	subs	r2, r2, r3
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	621a      	str	r2, [r3, #32]
 80057ae:	e00e      	b.n	80057ce <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d177      	bne.n	80058da <USB_EPStartXfer+0x85e>
 80057ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	4413      	add	r3, r2
 800580c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800580e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	011a      	lsls	r2, r3, #4
 800581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581e:	4413      	add	r3, r2
 8005820:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005824:	637b      	str	r3, [r7, #52]	@ 0x34
 8005826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005830:	b29a      	uxth	r2, r3
 8005832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583a:	2b3e      	cmp	r3, #62	@ 0x3e
 800583c:	d921      	bls.n	8005882 <USB_EPStartXfer+0x806>
 800583e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <USB_EPStartXfer+0x7e2>
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005858:	3b01      	subs	r3, #1
 800585a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29a      	uxth	r2, r3
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	b29b      	uxth	r3, r3
 800586a:	029b      	lsls	r3, r3, #10
 800586c:	b29b      	uxth	r3, r3
 800586e:	4313      	orrs	r3, r2
 8005870:	b29b      	uxth	r3, r3
 8005872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587a:	b29a      	uxth	r2, r3
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	e050      	b.n	8005924 <USB_EPStartXfer+0x8a8>
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <USB_EPStartXfer+0x824>
 800588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005898:	b29a      	uxth	r2, r3
 800589a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	e041      	b.n	8005924 <USB_EPStartXfer+0x8a8>
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <USB_EPStartXfer+0x844>
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	3301      	adds	r3, #1
 80058bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	029b      	lsls	r3, r3, #10
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4313      	orrs	r3, r2
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e024      	b.n	8005924 <USB_EPStartXfer+0x8a8>
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d11c      	bne.n	8005924 <USB_EPStartXfer+0x8a8>
 80058ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058fe:	4413      	add	r3, r2
 8005900:	643b      	str	r3, [r7, #64]	@ 0x40
 8005902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	011a      	lsls	r2, r3, #4
 8005910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005912:	4413      	add	r3, r2
 8005914:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591e:	b29a      	uxth	r2, r3
 8005920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005922:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	895b      	ldrh	r3, [r3, #10]
 8005930:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6959      	ldr	r1, [r3, #20]
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005944:	b29b      	uxth	r3, r3
 8005946:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800594a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800594e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005952:	6800      	ldr	r0, [r0, #0]
 8005954:	f001 f881 	bl	8006a5a <USB_WritePMA>
 8005958:	e227      	b.n	8005daa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800595a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800596a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800598c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005990:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80059b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059e6:	4413      	add	r3, r2
 80059e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	011a      	lsls	r2, r3, #4
 80059f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059fa:	4413      	add	r3, r2
 80059fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	891b      	ldrh	r3, [r3, #8]
 8005a18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6959      	ldr	r1, [r3, #20]
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	f001 f80d 	bl	8006a5a <USB_WritePMA>
 8005a40:	e1b3      	b.n	8005daa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80c6 	beq.w	8005c14 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d177      	bne.n	8005b94 <USB_EPStartXfer+0xb18>
 8005aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ac4:	4413      	add	r3, r2
 8005ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ad8:	4413      	add	r3, r2
 8005ada:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ade:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005af6:	d921      	bls.n	8005b3c <USB_EPStartXfer+0xac0>
 8005af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <USB_EPStartXfer+0xa9c>
 8005b0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b12:	3b01      	subs	r3, #1
 8005b14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	029b      	lsls	r3, r3, #10
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	e050      	b.n	8005bde <USB_EPStartXfer+0xb62>
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <USB_EPStartXfer+0xade>
 8005b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e041      	b.n	8005bde <USB_EPStartXfer+0xb62>
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <USB_EPStartXfer+0xafe>
 8005b70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b74:	3301      	adds	r3, #1
 8005b76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	029b      	lsls	r3, r3, #10
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	e024      	b.n	8005bde <USB_EPStartXfer+0xb62>
 8005b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d11c      	bne.n	8005bde <USB_EPStartXfer+0xb62>
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bb8:	4413      	add	r3, r2
 8005bba:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bcc:	4413      	add	r3, r2
 8005bce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bdc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	895b      	ldrh	r3, [r3, #10]
 8005bea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6959      	ldr	r1, [r3, #20]
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f000 ff24 	bl	8006a5a <USB_WritePMA>
 8005c12:	e0ca      	b.n	8005daa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d177      	bne.n	8005d14 <USB_EPStartXfer+0xc98>
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c44:	4413      	add	r3, r2
 8005c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	011a      	lsls	r2, r3, #4
 8005c56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c58:	4413      	add	r3, r2
 8005c5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c74:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c76:	d921      	bls.n	8005cbc <USB_EPStartXfer+0xc40>
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d104      	bne.n	8005c98 <USB_EPStartXfer+0xc1c>
 8005c8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c92:	3b01      	subs	r3, #1
 8005c94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	029b      	lsls	r3, r3, #10
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	e05c      	b.n	8005d76 <USB_EPStartXfer+0xcfa>
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <USB_EPStartXfer+0xc5e>
 8005cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e04d      	b.n	8005d76 <USB_EPStartXfer+0xcfa>
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <USB_EPStartXfer+0xc7e>
 8005cf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	e030      	b.n	8005d76 <USB_EPStartXfer+0xcfa>
 8005d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d128      	bne.n	8005d76 <USB_EPStartXfer+0xcfa>
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d48:	4413      	add	r3, r2
 8005d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	011a      	lsls	r2, r3, #4
 8005d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	891b      	ldrh	r3, [r3, #8]
 8005d82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6959      	ldr	r1, [r3, #20]
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005da0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005da4:	6800      	ldr	r0, [r0, #0]
 8005da6:	f000 fe58 	bl	8006a5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd0:	817b      	strh	r3, [r7, #10]
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	f083 0310 	eor.w	r3, r3, #16
 8005dd8:	817b      	strh	r3, [r7, #10]
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	f083 0320 	eor.w	r3, r3, #32
 8005de0:	817b      	strh	r3, [r7, #10]
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	897b      	ldrh	r3, [r7, #10]
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
 8005e12:	f000 bcde 	b.w	80067d2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	7b1b      	ldrb	r3, [r3, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 80bb 	bne.w	8005f9e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d917      	bls.n	8005e74 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e64:	1ad2      	subs	r2, r2, r3
 8005e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	619a      	str	r2, [r3, #24]
 8005e72:	e00e      	b.n	8005e92 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	011a      	lsls	r2, r3, #4
 8005eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ece:	4413      	add	r3, r2
 8005ed0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ed4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ef2:	d924      	bls.n	8005f3e <USB_EPStartXfer+0xec2>
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <USB_EPStartXfer+0xe98>
 8005f0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	029b      	lsls	r3, r3, #10
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	f000 bc10 	b.w	800675e <USB_EPStartXfer+0x16e2>
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <USB_EPStartXfer+0xee4>
 8005f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	e3fe      	b.n	800675e <USB_EPStartXfer+0x16e2>
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <USB_EPStartXfer+0xf04>
 8005f76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	e3df      	b.n	800675e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	78db      	ldrb	r3, [r3, #3]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	f040 8218 	bne.w	80063e0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 809d 	bne.w	80060fc <USB_EPStartXfer+0x1080>
 8005fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	011a      	lsls	r2, r3, #4
 8005ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b3e      	cmp	r3, #62	@ 0x3e
 800602a:	d92b      	bls.n	8006084 <USB_EPStartXfer+0x1008>
 800602c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800603e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	2b00      	cmp	r3, #0
 8006050:	d104      	bne.n	800605c <USB_EPStartXfer+0xfe0>
 8006052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006056:	3b01      	subs	r3, #1
 8006058:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800605c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006068:	b29b      	uxth	r3, r3
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	b29b      	uxth	r3, r3
 800606e:	4313      	orrs	r3, r2
 8006070:	b29b      	uxth	r3, r3
 8006072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607a:	b29a      	uxth	r2, r3
 800607c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	e070      	b.n	8006166 <USB_EPStartXfer+0x10ea>
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10c      	bne.n	80060ae <USB_EPStartXfer+0x1032>
 8006094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e05b      	b.n	8006166 <USB_EPStartXfer+0x10ea>
 80060ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <USB_EPStartXfer+0x1062>
 80060d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d8:	3301      	adds	r3, #1
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	029b      	lsls	r3, r3, #10
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	4313      	orrs	r3, r2
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	e034      	b.n	8006166 <USB_EPStartXfer+0x10ea>
 80060fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d12c      	bne.n	8006166 <USB_EPStartXfer+0x10ea>
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800611a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006130:	4413      	add	r3, r2
 8006132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	011a      	lsls	r2, r3, #4
 8006144:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006148:	4413      	add	r3, r2
 800614a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800614e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	b29a      	uxth	r2, r3
 8006160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006164:	801a      	strh	r2, [r3, #0]
 8006166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 809d 	bne.w	80062c0 <USB_EPStartXfer+0x1244>
 8006186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061aa:	4413      	add	r3, r2
 80061ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	011a      	lsls	r2, r3, #4
 80061be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061c2:	4413      	add	r3, r2
 80061c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ee:	d92b      	bls.n	8006248 <USB_EPStartXfer+0x11cc>
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <USB_EPStartXfer+0x11a4>
 8006216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621a:	3b01      	subs	r3, #1
 800621c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006220:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800622c:	b29b      	uxth	r3, r3
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	b29b      	uxth	r3, r3
 8006232:	4313      	orrs	r3, r2
 8006234:	b29b      	uxth	r3, r3
 8006236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623e:	b29a      	uxth	r2, r3
 8006240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e069      	b.n	800631c <USB_EPStartXfer+0x12a0>
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <USB_EPStartXfer+0x11f6>
 8006258:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e054      	b.n	800631c <USB_EPStartXfer+0x12a0>
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <USB_EPStartXfer+0x1226>
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629c:	3301      	adds	r3, #1
 800629e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	029b      	lsls	r3, r3, #10
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4313      	orrs	r3, r2
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e02d      	b.n	800631c <USB_EPStartXfer+0x12a0>
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d125      	bne.n	800631c <USB_EPStartXfer+0x12a0>
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062de:	b29b      	uxth	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062e6:	4413      	add	r3, r2
 80062e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062fe:	4413      	add	r3, r2
 8006300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006304:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800631a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800631c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8218 	beq.w	800675e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800632e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800634e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <USB_EPStartXfer+0x12ea>
 800635a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800635e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10d      	bne.n	8006382 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006366:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800636a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 81f5 	bne.w	800675e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006374:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 81ee 	bne.w	800675e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80063ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063da:	b29b      	uxth	r3, r3
 80063dc:	8013      	strh	r3, [r2, #0]
 80063de:	e1be      	b.n	800675e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	78db      	ldrb	r3, [r3, #3]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	f040 81b4 	bne.w	800675a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	d917      	bls.n	800643e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	619a      	str	r2, [r3, #24]
 800643c:	e00e      	b.n	800645c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2200      	movs	r2, #0
 800645a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f040 8085 	bne.w	8006578 <USB_EPStartXfer+0x14fc>
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648a:	b29b      	uxth	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006492:	4413      	add	r3, r2
 8006494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	011a      	lsls	r2, r3, #4
 80064a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064aa:	4413      	add	r3, r2
 80064ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ce:	d923      	bls.n	8006518 <USB_EPStartXfer+0x149c>
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <USB_EPStartXfer+0x1474>
 80064e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	029b      	lsls	r3, r3, #10
 8006500:	b29b      	uxth	r3, r3
 8006502:	4313      	orrs	r3, r2
 8006504:	b29b      	uxth	r3, r3
 8006506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650e:	b29a      	uxth	r2, r3
 8006510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006514:	801a      	strh	r2, [r3, #0]
 8006516:	e060      	b.n	80065da <USB_EPStartXfer+0x155e>
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10c      	bne.n	800653a <USB_EPStartXfer+0x14be>
 8006520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006530:	b29a      	uxth	r2, r3
 8006532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	e04f      	b.n	80065da <USB_EPStartXfer+0x155e>
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <USB_EPStartXfer+0x14de>
 8006550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006554:	3301      	adds	r3, #1
 8006556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800655a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006566:	b29b      	uxth	r3, r3
 8006568:	029b      	lsls	r3, r3, #10
 800656a:	b29b      	uxth	r3, r3
 800656c:	4313      	orrs	r3, r2
 800656e:	b29a      	uxth	r2, r3
 8006570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	e030      	b.n	80065da <USB_EPStartXfer+0x155e>
 8006578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d128      	bne.n	80065da <USB_EPStartXfer+0x155e>
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065ac:	4413      	add	r3, r2
 80065ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	011a      	lsls	r2, r3, #4
 80065c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 8085 	bne.w	8006704 <USB_EPStartXfer+0x1688>
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800661e:	4413      	add	r3, r2
 8006620:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006636:	4413      	add	r3, r2
 8006638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800663c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800664c:	b29a      	uxth	r2, r3
 800664e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006658:	2b3e      	cmp	r3, #62	@ 0x3e
 800665a:	d923      	bls.n	80066a4 <USB_EPStartXfer+0x1628>
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <USB_EPStartXfer+0x1600>
 8006672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006676:	3b01      	subs	r3, #1
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800667c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006688:	b29b      	uxth	r3, r3
 800668a:	029b      	lsls	r3, r3, #10
 800668c:	b29b      	uxth	r3, r3
 800668e:	4313      	orrs	r3, r2
 8006690:	b29b      	uxth	r3, r3
 8006692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	e05c      	b.n	800675e <USB_EPStartXfer+0x16e2>
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10c      	bne.n	80066c6 <USB_EPStartXfer+0x164a>
 80066ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	e04b      	b.n	800675e <USB_EPStartXfer+0x16e2>
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <USB_EPStartXfer+0x166a>
 80066dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066e0:	3301      	adds	r3, #1
 80066e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	029b      	lsls	r3, r3, #10
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	4313      	orrs	r3, r2
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e02c      	b.n	800675e <USB_EPStartXfer+0x16e2>
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d124      	bne.n	800675e <USB_EPStartXfer+0x16e2>
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006722:	b29b      	uxth	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800672a:	4413      	add	r3, r2
 800672c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	011a      	lsls	r2, r3, #4
 800673e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006742:	4413      	add	r3, r2
 8006744:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e001      	b.n	800675e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e03a      	b.n	80067d4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800675e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006784:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006788:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800678c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006790:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006798:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800679c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006806:	81bb      	strh	r3, [r7, #12]
 8006808:	89bb      	ldrh	r3, [r7, #12]
 800680a:	f083 0310 	eor.w	r3, r3, #16
 800680e:	81bb      	strh	r3, [r7, #12]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	89bb      	ldrh	r3, [r7, #12]
 800681c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800682c:	b29b      	uxth	r3, r3
 800682e:	8013      	strh	r3, [r2, #0]
 8006830:	e01f      	b.n	8006872 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006848:	81fb      	strh	r3, [r7, #14]
 800684a:	89fb      	ldrh	r3, [r7, #14]
 800684c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006850:	81fb      	strh	r3, [r7, #14]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	89fb      	ldrh	r3, [r7, #14]
 800685e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800686e:	b29b      	uxth	r3, r3
 8006870:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	7b1b      	ldrb	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 809d 	bne.w	80069cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d04c      	beq.n	8006934 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	823b      	strh	r3, [r7, #16]
 80068a8:	8a3b      	ldrh	r3, [r7, #16]
 80068aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01b      	beq.n	80068ea <USB_EPClearStall+0x6c>
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c8:	81fb      	strh	r3, [r7, #14]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d06c      	beq.n	80069cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006908:	81bb      	strh	r3, [r7, #12]
 800690a:	89bb      	ldrh	r3, [r7, #12]
 800690c:	f083 0320 	eor.w	r3, r3, #32
 8006910:	81bb      	strh	r3, [r7, #12]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	89bb      	ldrh	r3, [r7, #12]
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800692a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]
 8006932:	e04b      	b.n	80069cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	82fb      	strh	r3, [r7, #22]
 8006942:	8afb      	ldrh	r3, [r7, #22]
 8006944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <USB_EPClearStall+0x106>
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800695e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006962:	82bb      	strh	r3, [r7, #20]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	8abb      	ldrh	r3, [r7, #20]
 8006970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800697c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006980:	b29b      	uxth	r3, r3
 8006982:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699a:	827b      	strh	r3, [r7, #18]
 800699c:	8a7b      	ldrh	r3, [r7, #18]
 800699e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069a2:	827b      	strh	r3, [r7, #18]
 80069a4:	8a7b      	ldrh	r3, [r7, #18]
 80069a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069aa:	827b      	strh	r3, [r7, #18]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	8a7b      	ldrh	r3, [r7, #18]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2280      	movs	r2, #128	@ 0x80
 80069ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr

08006a44 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b08b      	sub	sp, #44	@ 0x2c
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	4611      	mov	r1, r2
 8006a66:	461a      	mov	r2, r3
 8006a68:	460b      	mov	r3, r1
 8006a6a:	80fb      	strh	r3, [r7, #6]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a70:	88bb      	ldrh	r3, [r7, #4]
 8006a72:	3301      	adds	r3, #1
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a80:	88fb      	ldrh	r3, [r7, #6]
 8006a82:	005a      	lsls	r2, r3, #1
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a92:	e01e      	b.n	8006ad2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	b21a      	sxth	r2, r3
 8006aa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	b21b      	sxth	r3, r3
 8006aac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	8a7a      	ldrh	r2, [r7, #18]
 8006ab2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	3302      	adds	r3, #2
 8006abe:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1dd      	bne.n	8006a94 <USB_WritePMA+0x3a>
  }
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	372c      	adds	r7, #44	@ 0x2c
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b08b      	sub	sp, #44	@ 0x2c
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4611      	mov	r1, r2
 8006af0:	461a      	mov	r2, r3
 8006af2:	460b      	mov	r3, r1
 8006af4:	80fb      	strh	r3, [r7, #6]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006afa:	88bb      	ldrh	r3, [r7, #4]
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	005a      	lsls	r2, r3, #1
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b16:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b1c:	e01b      	b.n	8006b56 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	3302      	adds	r3, #2
 8006b2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	3b01      	subs	r3, #1
 8006b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e0      	bne.n	8006b1e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b5c:	88bb      	ldrh	r3, [r7, #4]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	701a      	strb	r2, [r3, #0]
  }
}
 8006b78:	bf00      	nop
 8006b7a:	372c      	adds	r7, #44	@ 0x2c
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006b8e:	2304      	movs	r3, #4
 8006b90:	2203      	movs	r2, #3
 8006b92:	2181      	movs	r1, #129	@ 0x81
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fc86 	bl	80084a6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006ba0:	2010      	movs	r0, #16
 8006ba2:	f001 fd95 	bl	80086d0 <USBD_static_malloc>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e005      	b.n	8006bc8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006bdc:	2181      	movs	r1, #129	@ 0x81
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fc87 	bl	80084f2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 fd74 	bl	80086e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c24:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d045      	beq.n	8006cce <USBD_HID_Setup+0xba>
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	f040 80d3 	bne.w	8006dee <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	3b02      	subs	r3, #2
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	d835      	bhi.n	8006cbe <USBD_HID_Setup+0xaa>
 8006c52:	a201      	add	r2, pc, #4	@ (adr r2, 8006c58 <USBD_HID_Setup+0x44>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006caf 	.word	0x08006caf
 8006c5c:	08006c8f 	.word	0x08006c8f
 8006c60:	08006cbf 	.word	0x08006cbf
 8006c64:	08006cbf 	.word	0x08006cbf
 8006c68:	08006cbf 	.word	0x08006cbf
 8006c6c:	08006cbf 	.word	0x08006cbf
 8006c70:	08006cbf 	.word	0x08006cbf
 8006c74:	08006cbf 	.word	0x08006cbf
 8006c78:	08006c9d 	.word	0x08006c9d
 8006c7c:	08006c81 	.word	0x08006c81
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	885b      	ldrh	r3, [r3, #2]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	601a      	str	r2, [r3, #0]
          break;
 8006c8c:	e01e      	b.n	8006ccc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2201      	movs	r2, #1
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 f957 	bl	8007f48 <USBD_CtlSendData>
          break;
 8006c9a:	e017      	b.n	8006ccc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	885b      	ldrh	r3, [r3, #2]
 8006ca0:	0a1b      	lsrs	r3, r3, #8
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	605a      	str	r2, [r3, #4]
          break;
 8006cac:	e00e      	b.n	8006ccc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f946 	bl	8007f48 <USBD_CtlSendData>
          break;
 8006cbc:	e006      	b.n	8006ccc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 f8d7 	bl	8007e74 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cca:	bf00      	nop
      }
      break;
 8006ccc:	e096      	b.n	8006dfc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b0b      	cmp	r3, #11
 8006cd4:	f200 8083 	bhi.w	8006dde <USBD_HID_Setup+0x1ca>
 8006cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce0 <USBD_HID_Setup+0xcc>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006d11 	.word	0x08006d11
 8006ce4:	08006ddf 	.word	0x08006ddf
 8006ce8:	08006ddf 	.word	0x08006ddf
 8006cec:	08006ddf 	.word	0x08006ddf
 8006cf0:	08006ddf 	.word	0x08006ddf
 8006cf4:	08006ddf 	.word	0x08006ddf
 8006cf8:	08006d39 	.word	0x08006d39
 8006cfc:	08006ddf 	.word	0x08006ddf
 8006d00:	08006ddf 	.word	0x08006ddf
 8006d04:	08006ddf 	.word	0x08006ddf
 8006d08:	08006d91 	.word	0x08006d91
 8006d0c:	08006db9 	.word	0x08006db9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d107      	bne.n	8006d2a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d1a:	f107 030e 	add.w	r3, r7, #14
 8006d1e:	2202      	movs	r2, #2
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 f910 	bl	8007f48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d28:	e060      	b.n	8006dec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f8a1 	bl	8007e74 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d32:	2302      	movs	r3, #2
 8006d34:	75fb      	strb	r3, [r7, #23]
          break;
 8006d36:	e059      	b.n	8006dec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	885b      	ldrh	r3, [r3, #2]
 8006d3c:	0a1b      	lsrs	r3, r3, #8
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2b22      	cmp	r3, #34	@ 0x22
 8006d42:	d108      	bne.n	8006d56 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	88db      	ldrh	r3, [r3, #6]
 8006d48:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d4a:	bf28      	it	cs
 8006d4c:	233f      	movcs	r3, #63	@ 0x3f
 8006d4e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006d50:	4b2d      	ldr	r3, [pc, #180]	@ (8006e08 <USBD_HID_Setup+0x1f4>)
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	e015      	b.n	8006d82 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b21      	cmp	r3, #33	@ 0x21
 8006d60:	d108      	bne.n	8006d74 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006d62:	4b2a      	ldr	r3, [pc, #168]	@ (8006e0c <USBD_HID_Setup+0x1f8>)
 8006d64:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	88db      	ldrh	r3, [r3, #6]
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	bf28      	it	cs
 8006d6e:	2309      	movcs	r3, #9
 8006d70:	83fb      	strh	r3, [r7, #30]
 8006d72:	e006      	b.n	8006d82 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f87c 	bl	8007e74 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8006d80:	e034      	b.n	8006dec <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006d82:	8bfb      	ldrh	r3, [r7, #30]
 8006d84:	461a      	mov	r2, r3
 8006d86:	69b9      	ldr	r1, [r7, #24]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f8dd 	bl	8007f48 <USBD_CtlSendData>
          break;
 8006d8e:	e02d      	b.n	8006dec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d107      	bne.n	8006daa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 f8d0 	bl	8007f48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006da8:	e020      	b.n	8006dec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f861 	bl	8007e74 <USBD_CtlError>
            ret = USBD_FAIL;
 8006db2:	2302      	movs	r3, #2
 8006db4:	75fb      	strb	r3, [r7, #23]
          break;
 8006db6:	e019      	b.n	8006dec <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d106      	bne.n	8006dd0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	885b      	ldrh	r3, [r3, #2]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dce:	e00d      	b.n	8006dec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 f84e 	bl	8007e74 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	75fb      	strb	r3, [r7, #23]
          break;
 8006ddc:	e006      	b.n	8006dec <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 f847 	bl	8007e74 <USBD_CtlError>
          ret = USBD_FAIL;
 8006de6:	2302      	movs	r3, #2
 8006de8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dea:	bf00      	nop
      }
      break;
 8006dec:	e006      	b.n	8006dfc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 f83f 	bl	8007e74 <USBD_CtlError>
      ret = USBD_FAIL;
 8006df6:	2302      	movs	r3, #2
 8006df8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfa:	bf00      	nop
  }

  return ret;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200000c8 	.word	0x200000c8
 8006e0c:	200000b0 	.word	0x200000b0

08006e10 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e24:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d10c      	bne.n	8006e4a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	7b1b      	ldrb	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	2181      	movs	r1, #129	@ 0x81
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f001 fbfc 	bl	8008642 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7c1b      	ldrb	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d102      	bne.n	8006e6e <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8006e68:	2308      	movs	r3, #8
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e001      	b.n	8006e72 <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8006e6e:	230a      	movs	r3, #10
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8006e72:	68fb      	ldr	r3, [r7, #12]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
	...

08006e80 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2222      	movs	r2, #34	@ 0x22
 8006e8c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006e8e:	4b03      	ldr	r3, [pc, #12]	@ (8006e9c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000044 	.word	0x20000044

08006ea0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2222      	movs	r2, #34	@ 0x22
 8006eac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006eae:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000068 	.word	0x20000068

08006ec0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2222      	movs	r2, #34	@ 0x22
 8006ecc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006ece:	4b03      	ldr	r3, [pc, #12]	@ (8006edc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	2000008c 	.word	0x2000008c

08006ee0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
	...

08006f04 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	220a      	movs	r2, #10
 8006f10:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006f12:	4b03      	ldr	r3, [pc, #12]	@ (8006f20 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	200000bc 	.word	0x200000bc

08006f24 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e01a      	b.n	8006f72 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	79fa      	ldrb	r2, [r7, #7]
 8006f68:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 fa38 	bl	80083e0 <USBD_LL_Init>

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d006      	beq.n	8006f9c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
 8006f9a:	e001      	b.n	8006fa0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bc80      	pop	{r7}
 8006faa:	4770      	bx	lr

08006fac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 fa5b 	bl	8008470 <USBD_LL_Start>

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	4611      	mov	r1, r2
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fed7 	bl	8007e02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007070:	f003 031f 	and.w	r3, r3, #31
 8007074:	2b02      	cmp	r3, #2
 8007076:	d016      	beq.n	80070a6 <USBD_LL_SetupStage+0x6a>
 8007078:	2b02      	cmp	r3, #2
 800707a:	d81c      	bhi.n	80070b6 <USBD_LL_SetupStage+0x7a>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <USBD_LL_SetupStage+0x4a>
 8007080:	2b01      	cmp	r3, #1
 8007082:	d008      	beq.n	8007096 <USBD_LL_SetupStage+0x5a>
 8007084:	e017      	b.n	80070b6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f9ca 	bl	8007428 <USBD_StdDevReq>
      break;
 8007094:	e01a      	b.n	80070cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa2c 	bl	80074fc <USBD_StdItfReq>
      break;
 80070a4:	e012      	b.n	80070cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa6c 	bl	800758c <USBD_StdEPReq>
      break;
 80070b4:	e00a      	b.n	80070cc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fa33 	bl	8008530 <USBD_LL_StallEP>
      break;
 80070ca:	bf00      	nop
  }

  return USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	460b      	mov	r3, r1
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d14b      	bne.n	8007182 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80070f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d134      	bne.n	8007166 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	429a      	cmp	r2, r3
 8007106:	d919      	bls.n	800713c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800711e:	429a      	cmp	r2, r3
 8007120:	d203      	bcs.n	800712a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007126:	b29b      	uxth	r3, r3
 8007128:	e002      	b.n	8007130 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 ff35 	bl	8007fa4 <USBD_CtlContinueRx>
 800713a:	e038      	b.n	80071ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800714e:	2b03      	cmp	r3, #3
 8007150:	d105      	bne.n	800715e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 ff32 	bl	8007fc8 <USBD_CtlSendStatus>
 8007164:	e023      	b.n	80071ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800716c:	2b05      	cmp	r3, #5
 800716e:	d11e      	bne.n	80071ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007178:	2100      	movs	r1, #0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f001 f9d8 	bl	8008530 <USBD_LL_StallEP>
 8007180:	e015      	b.n	80071ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007194:	2b03      	cmp	r3, #3
 8007196:	d108      	bne.n	80071aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	7afa      	ldrb	r2, [r7, #11]
 80071a2:	4611      	mov	r1, r2
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	4798      	blx	r3
 80071a8:	e001      	b.n	80071ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071aa:	2302      	movs	r3, #2
 80071ac:	e000      	b.n	80071b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	460b      	mov	r3, r1
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d17f      	bne.n	80072cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3314      	adds	r3, #20
 80071d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d15c      	bne.n	8007296 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d915      	bls.n	8007214 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	1ad2      	subs	r2, r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 febd 	bl	8007f80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007206:	2300      	movs	r3, #0
 8007208:	2200      	movs	r2, #0
 800720a:	2100      	movs	r1, #0
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f001 fa3b 	bl	8008688 <USBD_LL_PrepareReceive>
 8007212:	e04e      	b.n	80072b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	6912      	ldr	r2, [r2, #16]
 800721c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007220:	fb01 f202 	mul.w	r2, r1, r2
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d11c      	bne.n	8007264 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007232:	429a      	cmp	r2, r3
 8007234:	d316      	bcc.n	8007264 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007240:	429a      	cmp	r2, r3
 8007242:	d20f      	bcs.n	8007264 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007244:	2200      	movs	r2, #0
 8007246:	2100      	movs	r1, #0
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fe99 	bl	8007f80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007256:	2300      	movs	r3, #0
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f001 fa13 	bl	8008688 <USBD_LL_PrepareReceive>
 8007262:	e026      	b.n	80072b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007276:	2b03      	cmp	r3, #3
 8007278:	d105      	bne.n	8007286 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007286:	2180      	movs	r1, #128	@ 0x80
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f001 f951 	bl	8008530 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fead 	bl	8007fee <USBD_CtlReceiveStatus>
 8007294:	e00d      	b.n	80072b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800729c:	2b04      	cmp	r3, #4
 800729e:	d004      	beq.n	80072aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80072aa:	2180      	movs	r1, #128	@ 0x80
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f001 f93f 	bl	8008530 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d11d      	bne.n	80072f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff fe81 	bl	8006fc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072ca:	e015      	b.n	80072f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d108      	bne.n	80072f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	7afa      	ldrb	r2, [r7, #11]
 80072ec:	4611      	mov	r1, r2
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	4798      	blx	r3
 80072f2:	e001      	b.n	80072f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072f4:	2302      	movs	r3, #2
 80072f6:	e000      	b.n	80072fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800730a:	2340      	movs	r3, #64	@ 0x40
 800730c:	2200      	movs	r2, #0
 800730e:	2100      	movs	r1, #0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 f8c8 	bl	80084a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2240      	movs	r2, #64	@ 0x40
 8007322:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007326:	2340      	movs	r3, #64	@ 0x40
 8007328:	2200      	movs	r2, #0
 800732a:	2180      	movs	r1, #128	@ 0x80
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f8ba 	bl	80084a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2240      	movs	r2, #64	@ 0x40
 800733c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6852      	ldr	r2, [r2, #4]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	4611      	mov	r1, r2
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
  }

  return USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr

080073a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2204      	movs	r2, #4
 80073ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d105      	bne.n	80073e8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr

080073f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007402:	2b03      	cmp	r3, #3
 8007404:	d10b      	bne.n	800741e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800743e:	2b40      	cmp	r3, #64	@ 0x40
 8007440:	d005      	beq.n	800744e <USBD_StdDevReq+0x26>
 8007442:	2b40      	cmp	r3, #64	@ 0x40
 8007444:	d84f      	bhi.n	80074e6 <USBD_StdDevReq+0xbe>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d009      	beq.n	800745e <USBD_StdDevReq+0x36>
 800744a:	2b20      	cmp	r3, #32
 800744c:	d14b      	bne.n	80074e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
      break;
 800745c:	e048      	b.n	80074f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b09      	cmp	r3, #9
 8007464:	d839      	bhi.n	80074da <USBD_StdDevReq+0xb2>
 8007466:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <USBD_StdDevReq+0x44>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	080074bd 	.word	0x080074bd
 8007470:	080074d1 	.word	0x080074d1
 8007474:	080074db 	.word	0x080074db
 8007478:	080074c7 	.word	0x080074c7
 800747c:	080074db 	.word	0x080074db
 8007480:	0800749f 	.word	0x0800749f
 8007484:	08007495 	.word	0x08007495
 8007488:	080074db 	.word	0x080074db
 800748c:	080074b3 	.word	0x080074b3
 8007490:	080074a9 	.word	0x080074a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f9dc 	bl	8007854 <USBD_GetDescriptor>
          break;
 800749c:	e022      	b.n	80074e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fb3f 	bl	8007b24 <USBD_SetAddress>
          break;
 80074a6:	e01d      	b.n	80074e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fb7e 	bl	8007bac <USBD_SetConfig>
          break;
 80074b0:	e018      	b.n	80074e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc07 	bl	8007cc8 <USBD_GetConfig>
          break;
 80074ba:	e013      	b.n	80074e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fc37 	bl	8007d32 <USBD_GetStatus>
          break;
 80074c4:	e00e      	b.n	80074e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fc65 	bl	8007d98 <USBD_SetFeature>
          break;
 80074ce:	e009      	b.n	80074e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fc74 	bl	8007dc0 <USBD_ClrFeature>
          break;
 80074d8:	e004      	b.n	80074e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fcc9 	bl	8007e74 <USBD_CtlError>
          break;
 80074e2:	bf00      	nop
      }
      break;
 80074e4:	e004      	b.n	80074f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fcc3 	bl	8007e74 <USBD_CtlError>
      break;
 80074ee:	bf00      	nop
  }

  return ret;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007512:	2b40      	cmp	r3, #64	@ 0x40
 8007514:	d005      	beq.n	8007522 <USBD_StdItfReq+0x26>
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d82e      	bhi.n	8007578 <USBD_StdItfReq+0x7c>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <USBD_StdItfReq+0x26>
 800751e:	2b20      	cmp	r3, #32
 8007520:	d12a      	bne.n	8007578 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007528:	3b01      	subs	r3, #1
 800752a:	2b02      	cmp	r3, #2
 800752c:	d81d      	bhi.n	800756a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	889b      	ldrh	r3, [r3, #4]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d813      	bhi.n	8007560 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
 8007546:	4603      	mov	r3, r0
 8007548:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	88db      	ldrh	r3, [r3, #6]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d110      	bne.n	8007574 <USBD_StdItfReq+0x78>
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10d      	bne.n	8007574 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fd35 	bl	8007fc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800755e:	e009      	b.n	8007574 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fc86 	bl	8007e74 <USBD_CtlError>
          break;
 8007568:	e004      	b.n	8007574 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fc81 	bl	8007e74 <USBD_CtlError>
          break;
 8007572:	e000      	b.n	8007576 <USBD_StdItfReq+0x7a>
          break;
 8007574:	bf00      	nop
      }
      break;
 8007576:	e004      	b.n	8007582 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fc7a 	bl	8007e74 <USBD_CtlError>
      break;
 8007580:	bf00      	nop
  }

  return USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	889b      	ldrh	r3, [r3, #4]
 800759e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075a8:	2b40      	cmp	r3, #64	@ 0x40
 80075aa:	d007      	beq.n	80075bc <USBD_StdEPReq+0x30>
 80075ac:	2b40      	cmp	r3, #64	@ 0x40
 80075ae:	f200 8146 	bhi.w	800783e <USBD_StdEPReq+0x2b2>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <USBD_StdEPReq+0x40>
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	f040 8141 	bne.w	800783e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
      break;
 80075ca:	e13d      	b.n	8007848 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d10a      	bne.n	80075ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	e12d      	b.n	800784a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d007      	beq.n	8007606 <USBD_StdEPReq+0x7a>
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	f300 811b 	bgt.w	8007832 <USBD_StdEPReq+0x2a6>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d072      	beq.n	80076e6 <USBD_StdEPReq+0x15a>
 8007600:	2b01      	cmp	r3, #1
 8007602:	d03a      	beq.n	800767a <USBD_StdEPReq+0xee>
 8007604:	e115      	b.n	8007832 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800760c:	2b02      	cmp	r3, #2
 800760e:	d002      	beq.n	8007616 <USBD_StdEPReq+0x8a>
 8007610:	2b03      	cmp	r3, #3
 8007612:	d015      	beq.n	8007640 <USBD_StdEPReq+0xb4>
 8007614:	e02b      	b.n	800766e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00c      	beq.n	8007636 <USBD_StdEPReq+0xaa>
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b80      	cmp	r3, #128	@ 0x80
 8007620:	d009      	beq.n	8007636 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 ff82 	bl	8008530 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800762c:	2180      	movs	r1, #128	@ 0x80
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 ff7e 	bl	8008530 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007634:	e020      	b.n	8007678 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc1b 	bl	8007e74 <USBD_CtlError>
              break;
 800763e:	e01b      	b.n	8007678 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10e      	bne.n	8007666 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <USBD_StdEPReq+0xda>
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b80      	cmp	r3, #128	@ 0x80
 8007652:	d008      	beq.n	8007666 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	88db      	ldrh	r3, [r3, #6]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 ff65 	bl	8008530 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fcae 	bl	8007fc8 <USBD_CtlSendStatus>

              break;
 800766c:	e004      	b.n	8007678 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fbff 	bl	8007e74 <USBD_CtlError>
              break;
 8007676:	bf00      	nop
          }
          break;
 8007678:	e0e0      	b.n	800783c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007680:	2b02      	cmp	r3, #2
 8007682:	d002      	beq.n	800768a <USBD_StdEPReq+0xfe>
 8007684:	2b03      	cmp	r3, #3
 8007686:	d015      	beq.n	80076b4 <USBD_StdEPReq+0x128>
 8007688:	e026      	b.n	80076d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00c      	beq.n	80076aa <USBD_StdEPReq+0x11e>
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	2b80      	cmp	r3, #128	@ 0x80
 8007694:	d009      	beq.n	80076aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 ff48 	bl	8008530 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076a0:	2180      	movs	r1, #128	@ 0x80
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 ff44 	bl	8008530 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076a8:	e01c      	b.n	80076e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fbe1 	bl	8007e74 <USBD_CtlError>
              break;
 80076b2:	e017      	b.n	80076e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	885b      	ldrh	r3, [r3, #2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d112      	bne.n	80076e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 ff4f 	bl	800856e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc79 	bl	8007fc8 <USBD_CtlSendStatus>
              }
              break;
 80076d6:	e004      	b.n	80076e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fbca 	bl	8007e74 <USBD_CtlError>
              break;
 80076e0:	e000      	b.n	80076e4 <USBD_StdEPReq+0x158>
              break;
 80076e2:	bf00      	nop
          }
          break;
 80076e4:	e0aa      	b.n	800783c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d002      	beq.n	80076f6 <USBD_StdEPReq+0x16a>
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d032      	beq.n	800775a <USBD_StdEPReq+0x1ce>
 80076f4:	e097      	b.n	8007826 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <USBD_StdEPReq+0x180>
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b80      	cmp	r3, #128	@ 0x80
 8007700:	d004      	beq.n	800770c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fbb5 	bl	8007e74 <USBD_CtlError>
                break;
 800770a:	e091      	b.n	8007830 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800770c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007710:	2b00      	cmp	r3, #0
 8007712:	da0b      	bge.n	800772c <USBD_StdEPReq+0x1a0>
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	3310      	adds	r3, #16
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	3304      	adds	r3, #4
 800772a:	e00b      	b.n	8007744 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	3304      	adds	r3, #4
 8007744:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2202      	movs	r2, #2
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fbf8 	bl	8007f48 <USBD_CtlSendData>
              break;
 8007758:	e06a      	b.n	8007830 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800775a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800775e:	2b00      	cmp	r3, #0
 8007760:	da11      	bge.n	8007786 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	f003 020f 	and.w	r2, r3, #15
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	3318      	adds	r3, #24
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d117      	bne.n	80077ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fb78 	bl	8007e74 <USBD_CtlError>
                  break;
 8007784:	e054      	b.n	8007830 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	f003 020f 	and.w	r2, r3, #15
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fb65 	bl	8007e74 <USBD_CtlError>
                  break;
 80077aa:	e041      	b.n	8007830 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da0b      	bge.n	80077cc <USBD_StdEPReq+0x240>
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	3310      	adds	r3, #16
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	3304      	adds	r3, #4
 80077ca:	e00b      	b.n	80077e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	4413      	add	r3, r2
 80077e2:	3304      	adds	r3, #4
 80077e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <USBD_StdEPReq+0x266>
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	d103      	bne.n	80077fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e00e      	b.n	8007818 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fed4 	bl	80085ac <USBD_LL_IsStallEP>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	e002      	b.n	8007818 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2202      	movs	r2, #2
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fb92 	bl	8007f48 <USBD_CtlSendData>
              break;
 8007824:	e004      	b.n	8007830 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb23 	bl	8007e74 <USBD_CtlError>
              break;
 800782e:	bf00      	nop
          }
          break;
 8007830:	e004      	b.n	800783c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb1d 	bl	8007e74 <USBD_CtlError>
          break;
 800783a:	bf00      	nop
      }
      break;
 800783c:	e004      	b.n	8007848 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fb17 	bl	8007e74 <USBD_CtlError>
      break;
 8007846:	bf00      	nop
  }

  return ret;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	885b      	ldrh	r3, [r3, #2]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	2b06      	cmp	r3, #6
 8007876:	f200 8128 	bhi.w	8007aca <USBD_GetDescriptor+0x276>
 800787a:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <USBD_GetDescriptor+0x2c>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	0800789d 	.word	0x0800789d
 8007884:	080078b5 	.word	0x080078b5
 8007888:	080078f5 	.word	0x080078f5
 800788c:	08007acb 	.word	0x08007acb
 8007890:	08007acb 	.word	0x08007acb
 8007894:	08007a6b 	.word	0x08007a6b
 8007898:	08007a97 	.word	0x08007a97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
      break;
 80078b2:	e112      	b.n	8007ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7c1b      	ldrb	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10d      	bne.n	80078d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c4:	f107 0208 	add.w	r2, r7, #8
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078d6:	e100      	b.n	8007ada <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	f107 0208 	add.w	r2, r7, #8
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
 80078e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	2202      	movs	r2, #2
 80078f0:	701a      	strb	r2, [r3, #0]
      break;
 80078f2:	e0f2      	b.n	8007ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	885b      	ldrh	r3, [r3, #2]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	f200 80ac 	bhi.w	8007a58 <USBD_GetDescriptor+0x204>
 8007900:	a201      	add	r2, pc, #4	@ (adr r2, 8007908 <USBD_GetDescriptor+0xb4>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	08007921 	.word	0x08007921
 800790c:	08007955 	.word	0x08007955
 8007910:	08007989 	.word	0x08007989
 8007914:	080079bd 	.word	0x080079bd
 8007918:	080079f1 	.word	0x080079f1
 800791c:	08007a25 	.word	0x08007a25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007942:	e091      	b.n	8007a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fa94 	bl	8007e74 <USBD_CtlError>
            err++;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	3301      	adds	r3, #1
 8007950:	72fb      	strb	r3, [r7, #11]
          break;
 8007952:	e089      	b.n	8007a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	7c12      	ldrb	r2, [r2, #16]
 800796c:	f107 0108 	add.w	r1, r7, #8
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
 8007974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007976:	e077      	b.n	8007a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa7a 	bl	8007e74 <USBD_CtlError>
            err++;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	3301      	adds	r3, #1
 8007984:	72fb      	strb	r3, [r7, #11]
          break;
 8007986:	e06f      	b.n	8007a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7c12      	ldrb	r2, [r2, #16]
 80079a0:	f107 0108 	add.w	r1, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079aa:	e05d      	b.n	8007a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa60 	bl	8007e74 <USBD_CtlError>
            err++;
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	3301      	adds	r3, #1
 80079b8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ba:	e055      	b.n	8007a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	7c12      	ldrb	r2, [r2, #16]
 80079d4:	f107 0108 	add.w	r1, r7, #8
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079de:	e043      	b.n	8007a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa46 	bl	8007e74 <USBD_CtlError>
            err++;
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	3301      	adds	r3, #1
 80079ec:	72fb      	strb	r3, [r7, #11]
          break;
 80079ee:	e03b      	b.n	8007a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e029      	b.n	8007a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa2c 	bl	8007e74 <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e021      	b.n	8007a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a46:	e00f      	b.n	8007a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa12 	bl	8007e74 <USBD_CtlError>
            err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
          break;
 8007a56:	e007      	b.n	8007a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa0a 	bl	8007e74 <USBD_CtlError>
          err++;
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	3301      	adds	r3, #1
 8007a64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a66:	e038      	b.n	8007ada <USBD_GetDescriptor+0x286>
 8007a68:	e037      	b.n	8007ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	7c1b      	ldrb	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4798      	blx	r3
 8007a82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a84:	e029      	b.n	8007ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f9f3 	bl	8007e74 <USBD_CtlError>
        err++;
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	3301      	adds	r3, #1
 8007a92:	72fb      	strb	r3, [r7, #11]
      break;
 8007a94:	e021      	b.n	8007ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7c1b      	ldrb	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10d      	bne.n	8007aba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa6:	f107 0208 	add.w	r2, r7, #8
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4798      	blx	r3
 8007aae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ab8:	e00f      	b.n	8007ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9d9 	bl	8007e74 <USBD_CtlError>
        err++;
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac8:	e007      	b.n	8007ada <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f9d1 	bl	8007e74 <USBD_CtlError>
      err++;
 8007ad2:	7afb      	ldrb	r3, [r7, #11]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ad8:	bf00      	nop
  }

  if (err != 0U)
 8007ada:	7afb      	ldrb	r3, [r7, #11]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d11c      	bne.n	8007b1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ae0:	893b      	ldrh	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d011      	beq.n	8007b0a <USBD_GetDescriptor+0x2b6>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	88db      	ldrh	r3, [r3, #6]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88da      	ldrh	r2, [r3, #6]
 8007af2:	893b      	ldrh	r3, [r7, #8]
 8007af4:	4293      	cmp	r3, r2
 8007af6:	bf28      	it	cs
 8007af8:	4613      	movcs	r3, r2
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	461a      	mov	r2, r3
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fa1f 	bl	8007f48 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	88db      	ldrh	r3, [r3, #6]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d104      	bne.n	8007b1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa58 	bl	8007fc8 <USBD_CtlSendStatus>
 8007b18:	e000      	b.n	8007b1c <USBD_GetDescriptor+0x2c8>
    return;
 8007b1a:	bf00      	nop
    }
  }
}
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop

08007b24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	889b      	ldrh	r3, [r3, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d130      	bne.n	8007b98 <USBD_SetAddress+0x74>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	88db      	ldrh	r3, [r3, #6]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d12c      	bne.n	8007b98 <USBD_SetAddress+0x74>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b44:	d828      	bhi.n	8007b98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d104      	bne.n	8007b66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f988 	bl	8007e74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b64:	e01d      	b.n	8007ba2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7bfa      	ldrb	r2, [r7, #15]
 8007b6a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fd46 	bl	8008604 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fa25 	bl	8007fc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8c:	e009      	b.n	8007ba2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b96:	e004      	b.n	8007ba2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f96a 	bl	8007e74 <USBD_CtlError>
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	4b41      	ldr	r3, [pc, #260]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007bbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bc0:	4b40      	ldr	r3, [pc, #256]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d904      	bls.n	8007bd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f952 	bl	8007e74 <USBD_CtlError>
 8007bd0:	e075      	b.n	8007cbe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d002      	beq.n	8007be2 <USBD_SetConfig+0x36>
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d023      	beq.n	8007c28 <USBD_SetConfig+0x7c>
 8007be0:	e062      	b.n	8007ca8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007be2:	4b38      	ldr	r3, [pc, #224]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d01a      	beq.n	8007c20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007bea:	4b36      	ldr	r3, [pc, #216]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bfc:	4b31      	ldr	r3, [pc, #196]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff f9e8 	bl	8006fd8 <USBD_SetClassConfig>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d104      	bne.n	8007c18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f92f 	bl	8007e74 <USBD_CtlError>
            return;
 8007c16:	e052      	b.n	8007cbe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9d5 	bl	8007fc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c1e:	e04e      	b.n	8007cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f9d1 	bl	8007fc8 <USBD_CtlSendStatus>
        break;
 8007c26:	e04a      	b.n	8007cbe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c28:	4b26      	ldr	r3, [pc, #152]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d112      	bne.n	8007c56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c38:	4b22      	ldr	r3, [pc, #136]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c42:	4b20      	ldr	r3, [pc, #128]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff f9e4 	bl	8007016 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9ba 	bl	8007fc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c54:	e033      	b.n	8007cbe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c56:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d01d      	beq.n	8007ca0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff f9d2 	bl	8007016 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c72:	4b14      	ldr	r3, [pc, #80]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c7c:	4b11      	ldr	r3, [pc, #68]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff f9a8 	bl	8006fd8 <USBD_SetClassConfig>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d104      	bne.n	8007c98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f8ef 	bl	8007e74 <USBD_CtlError>
            return;
 8007c96:	e012      	b.n	8007cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f995 	bl	8007fc8 <USBD_CtlSendStatus>
        break;
 8007c9e:	e00e      	b.n	8007cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f991 	bl	8007fc8 <USBD_CtlSendStatus>
        break;
 8007ca6:	e00a      	b.n	8007cbe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f8e2 	bl	8007e74 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007cb0:	4b04      	ldr	r3, [pc, #16]	@ (8007cc4 <USBD_SetConfig+0x118>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff f9ad 	bl	8007016 <USBD_ClrClassConfig>
        break;
 8007cbc:	bf00      	nop
    }
  }
}
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000210 	.word	0x20000210

08007cc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	88db      	ldrh	r3, [r3, #6]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d004      	beq.n	8007ce4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8c9 	bl	8007e74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ce2:	e022      	b.n	8007d2a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	dc02      	bgt.n	8007cf4 <USBD_GetConfig+0x2c>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dc03      	bgt.n	8007cfa <USBD_GetConfig+0x32>
 8007cf2:	e015      	b.n	8007d20 <USBD_GetConfig+0x58>
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d00b      	beq.n	8007d10 <USBD_GetConfig+0x48>
 8007cf8:	e012      	b.n	8007d20 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3308      	adds	r3, #8
 8007d04:	2201      	movs	r2, #1
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f91d 	bl	8007f48 <USBD_CtlSendData>
        break;
 8007d0e:	e00c      	b.n	8007d2a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3304      	adds	r3, #4
 8007d14:	2201      	movs	r2, #1
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f915 	bl	8007f48 <USBD_CtlSendData>
        break;
 8007d1e:	e004      	b.n	8007d2a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f8a6 	bl	8007e74 <USBD_CtlError>
        break;
 8007d28:	bf00      	nop
}
 8007d2a:	bf00      	nop
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d42:	3b01      	subs	r3, #1
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d81e      	bhi.n	8007d86 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88db      	ldrh	r3, [r3, #6]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d004      	beq.n	8007d5a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f88e 	bl	8007e74 <USBD_CtlError>
        break;
 8007d58:	e01a      	b.n	8007d90 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f043 0202 	orr.w	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8e2 	bl	8007f48 <USBD_CtlSendData>
      break;
 8007d84:	e004      	b.n	8007d90 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f873 	bl	8007e74 <USBD_CtlError>
      break;
 8007d8e:	bf00      	nop
  }
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d106      	bne.n	8007db8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f908 	bl	8007fc8 <USBD_CtlSendStatus>
  }
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d80b      	bhi.n	8007dee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	885b      	ldrh	r3, [r3, #2]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d10c      	bne.n	8007df8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f8ee 	bl	8007fc8 <USBD_CtlSendStatus>
      }
      break;
 8007dec:	e004      	b.n	8007df8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f83f 	bl	8007e74 <USBD_CtlError>
      break;
 8007df6:	e000      	b.n	8007dfa <USBD_ClrFeature+0x3a>
      break;
 8007df8:	bf00      	nop
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785a      	ldrb	r2, [r3, #1]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3302      	adds	r3, #2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	3303      	adds	r3, #3
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	3305      	adds	r3, #5
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	021b      	lsls	r3, r3, #8
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4413      	add	r3, r2
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	3306      	adds	r3, #6
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	3307      	adds	r3, #7
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	4413      	add	r3, r2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	80da      	strh	r2, [r3, #6]

}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e7e:	2180      	movs	r1, #128	@ 0x80
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb55 	bl	8008530 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e86:	2100      	movs	r1, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fb51 	bl	8008530 <USBD_LL_StallEP>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b086      	sub	sp, #24
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d032      	beq.n	8007f12 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f834 	bl	8007f1a <USBD_GetLen>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	75fa      	strb	r2, [r7, #23]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4413      	add	r3, r2
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7812      	ldrb	r2, [r2, #0]
 8007ed0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	75fa      	strb	r2, [r7, #23]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	2203      	movs	r2, #3
 8007ee0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ee2:	e012      	b.n	8007f0a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	60fa      	str	r2, [r7, #12]
 8007eea:	7dfa      	ldrb	r2, [r7, #23]
 8007eec:	1c51      	adds	r1, r2, #1
 8007eee:	75f9      	strb	r1, [r7, #23]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	75fa      	strb	r2, [r7, #23]
 8007f00:	461a      	mov	r2, r3
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4413      	add	r3, r2
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e8      	bne.n	8007ee4 <USBD_GetString+0x4e>
    }
  }
}
 8007f12:	bf00      	nop
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f26:	e005      	b.n	8007f34 <USBD_GetLen+0x1a>
  {
    len++;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3301      	adds	r3, #1
 8007f32:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f5      	bne.n	8007f28 <USBD_GetLen+0xe>
  }

  return len;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr

08007f48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007f5e:	88fa      	ldrh	r2, [r7, #6]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fb66 	bl	8008642 <USBD_LL_Transmit>

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	2100      	movs	r1, #0
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fb54 	bl	8008642 <USBD_LL_Transmit>

  return USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 fb65 	bl	8008688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb2f 	bl	8008642 <USBD_LL_Transmit>

  return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ffe:	2300      	movs	r3, #0
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fb3f 	bl	8008688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008018:	2200      	movs	r2, #0
 800801a:	490e      	ldr	r1, [pc, #56]	@ (8008054 <MX_USB_DEVICE_Init+0x40>)
 800801c:	480e      	ldr	r0, [pc, #56]	@ (8008058 <MX_USB_DEVICE_Init+0x44>)
 800801e:	f7fe ff81 	bl	8006f24 <USBD_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008028:	f7f8 f9f8 	bl	800041c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800802c:	490b      	ldr	r1, [pc, #44]	@ (800805c <MX_USB_DEVICE_Init+0x48>)
 800802e:	480a      	ldr	r0, [pc, #40]	@ (8008058 <MX_USB_DEVICE_Init+0x44>)
 8008030:	f7fe ffa3 	bl	8006f7a <USBD_RegisterClass>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800803a:	f7f8 f9ef 	bl	800041c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800803e:	4806      	ldr	r0, [pc, #24]	@ (8008058 <MX_USB_DEVICE_Init+0x44>)
 8008040:	f7fe ffb4 	bl	8006fac <USBD_Start>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800804a:	f7f8 f9e7 	bl	800041c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800804e:	bf00      	nop
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000108 	.word	0x20000108
 8008058:	20000214 	.word	0x20000214
 800805c:	2000000c 	.word	0x2000000c

08008060 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	6039      	str	r1, [r7, #0]
 800806a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2212      	movs	r2, #18
 8008070:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008072:	4b03      	ldr	r3, [pc, #12]	@ (8008080 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000124 	.word	0x20000124

08008084 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2204      	movs	r2, #4
 8008094:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008096:	4b03      	ldr	r3, [pc, #12]	@ (80080a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000138 	.word	0x20000138

080080a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4907      	ldr	r1, [pc, #28]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x34>)
 80080be:	4808      	ldr	r0, [pc, #32]	@ (80080e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80080c0:	f7ff fee9 	bl	8007e96 <USBD_GetString>
 80080c4:	e004      	b.n	80080d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4904      	ldr	r1, [pc, #16]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x34>)
 80080ca:	4805      	ldr	r0, [pc, #20]	@ (80080e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80080cc:	f7ff fee3 	bl	8007e96 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080d0:	4b02      	ldr	r3, [pc, #8]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200004d8 	.word	0x200004d8
 80080e0:	080087d8 	.word	0x080087d8

080080e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4904      	ldr	r1, [pc, #16]	@ (8008104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080f4:	4804      	ldr	r0, [pc, #16]	@ (8008108 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080f6:	f7ff fece 	bl	8007e96 <USBD_GetString>
  return USBD_StrDesc;
 80080fa:	4b02      	ldr	r3, [pc, #8]	@ (8008104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	200004d8 	.word	0x200004d8
 8008108:	080087f0 	.word	0x080087f0

0800810c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	221a      	movs	r2, #26
 800811c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800811e:	f000 f843 	bl	80081a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008122:	4b02      	ldr	r3, [pc, #8]	@ (800812c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	2000013c 	.word	0x2000013c

08008130 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	4907      	ldr	r1, [pc, #28]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008146:	4808      	ldr	r0, [pc, #32]	@ (8008168 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008148:	f7ff fea5 	bl	8007e96 <USBD_GetString>
 800814c:	e004      	b.n	8008158 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	4904      	ldr	r1, [pc, #16]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008152:	4805      	ldr	r0, [pc, #20]	@ (8008168 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008154:	f7ff fe9f 	bl	8007e96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008158:	4b02      	ldr	r3, [pc, #8]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200004d8 	.word	0x200004d8
 8008168:	08008804 	.word	0x08008804

0800816c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d105      	bne.n	800818a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4907      	ldr	r1, [pc, #28]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008182:	4808      	ldr	r0, [pc, #32]	@ (80081a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008184:	f7ff fe87 	bl	8007e96 <USBD_GetString>
 8008188:	e004      	b.n	8008194 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4904      	ldr	r1, [pc, #16]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800818e:	4805      	ldr	r0, [pc, #20]	@ (80081a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008190:	f7ff fe81 	bl	8007e96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008194:	4b02      	ldr	r3, [pc, #8]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	200004d8 	.word	0x200004d8
 80081a4:	08008814 	.word	0x08008814

080081a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4413      	add	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081bc:	2208      	movs	r2, #8
 80081be:	4906      	ldr	r1, [pc, #24]	@ (80081d8 <Get_SerialNum+0x30>)
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f80d 	bl	80081e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081c6:	2204      	movs	r2, #4
 80081c8:	4904      	ldr	r1, [pc, #16]	@ (80081dc <Get_SerialNum+0x34>)
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f808 	bl	80081e0 <IntToUnicode>
  }
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	2000013e 	.word	0x2000013e
 80081dc:	2000014e 	.word	0x2000014e

080081e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4613      	mov	r3, r2
 80081ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]
 80081f6:	e027      	b.n	8008248 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	0f1b      	lsrs	r3, r3, #28
 80081fc:	2b09      	cmp	r3, #9
 80081fe:	d80b      	bhi.n	8008218 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	0f1b      	lsrs	r3, r3, #28
 8008204:	b2da      	uxtb	r2, r3
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	4619      	mov	r1, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	440b      	add	r3, r1
 8008210:	3230      	adds	r2, #48	@ 0x30
 8008212:	b2d2      	uxtb	r2, r2
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e00a      	b.n	800822e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	0f1b      	lsrs	r3, r3, #28
 800821c:	b2da      	uxtb	r2, r3
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	4619      	mov	r1, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	440b      	add	r3, r1
 8008228:	3237      	adds	r2, #55	@ 0x37
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	3301      	adds	r3, #1
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4413      	add	r3, r2
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	3301      	adds	r3, #1
 8008246:	75fb      	strb	r3, [r7, #23]
 8008248:	7dfa      	ldrb	r2, [r7, #23]
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	429a      	cmp	r2, r3
 800824e:	d3d3      	bcc.n	80081f8 <IntToUnicode+0x18>
  }
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a0d      	ldr	r2, [pc, #52]	@ (80082a0 <HAL_PCD_MspInit+0x44>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d113      	bne.n	8008296 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800826e:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <HAL_PCD_MspInit+0x48>)
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4a0c      	ldr	r2, [pc, #48]	@ (80082a4 <HAL_PCD_MspInit+0x48>)
 8008274:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008278:	61d3      	str	r3, [r2, #28]
 800827a:	4b0a      	ldr	r3, [pc, #40]	@ (80082a4 <HAL_PCD_MspInit+0x48>)
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008286:	2200      	movs	r2, #0
 8008288:	2100      	movs	r1, #0
 800828a:	2014      	movs	r0, #20
 800828c:	f7f8 fb25 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008290:	2014      	movs	r0, #20
 8008292:	f7f8 fb3e 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008296:	bf00      	nop
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	40005c00 	.word	0x40005c00
 80082a4:	40021000 	.word	0x40021000

080082a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f7fe febc 	bl	800703c <USBD_LL_SetupStage>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	440b      	add	r3, r1
 80082ec:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	4619      	mov	r1, r3
 80082f6:	f7fe feee 	bl	80070d6 <USBD_LL_DataOutStage>
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008314:	78fa      	ldrb	r2, [r7, #3]
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	440b      	add	r3, r1
 8008322:	333c      	adds	r3, #60	@ 0x3c
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	4619      	mov	r1, r3
 800832a:	f7fe ff45 	bl	80071b8 <USBD_LL_DataInStage>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff f855 	bl	80073f4 <USBD_LL_SOF>
}
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800835a:	2301      	movs	r3, #1
 800835c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d001      	beq.n	800836a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008366:	f7f8 f859 	bl	800041c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008370:	7bfa      	ldrb	r2, [r7, #15]
 8008372:	4611      	mov	r1, r2
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff f805 	bl	8007384 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe ffbe 	bl	8007302 <USBD_LL_Reset>
}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe ffff 	bl	80073a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083ac:	4b04      	ldr	r3, [pc, #16]	@ (80083c0 <HAL_PCD_SuspendCallback+0x30>)
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	4a03      	ldr	r2, [pc, #12]	@ (80083c0 <HAL_PCD_SuspendCallback+0x30>)
 80083b2:	f043 0306 	orr.w	r3, r3, #6
 80083b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	e000ed00 	.word	0xe000ed00

080083c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fff9 	bl	80073ca <USBD_LL_Resume>
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80083e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008468 <USBD_LL_Init+0x88>)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008468 <USBD_LL_Init+0x88>)
 80083f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80083f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008468 <USBD_LL_Init+0x88>)
 80083fa:	4a1c      	ldr	r2, [pc, #112]	@ (800846c <USBD_LL_Init+0x8c>)
 80083fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <USBD_LL_Init+0x88>)
 8008400:	2208      	movs	r2, #8
 8008402:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008404:	4b18      	ldr	r3, [pc, #96]	@ (8008468 <USBD_LL_Init+0x88>)
 8008406:	2202      	movs	r2, #2
 8008408:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800840a:	4b17      	ldr	r3, [pc, #92]	@ (8008468 <USBD_LL_Init+0x88>)
 800840c:	2200      	movs	r2, #0
 800840e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008410:	4b15      	ldr	r3, [pc, #84]	@ (8008468 <USBD_LL_Init+0x88>)
 8008412:	2200      	movs	r2, #0
 8008414:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008416:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <USBD_LL_Init+0x88>)
 8008418:	2200      	movs	r2, #0
 800841a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800841c:	4812      	ldr	r0, [pc, #72]	@ (8008468 <USBD_LL_Init+0x88>)
 800841e:	f7f8 fcc9 	bl	8000db4 <HAL_PCD_Init>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008428:	f7f7 fff8 	bl	800041c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008432:	2318      	movs	r3, #24
 8008434:	2200      	movs	r2, #0
 8008436:	2100      	movs	r1, #0
 8008438:	f7fa f9d0 	bl	80027dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008442:	2358      	movs	r3, #88	@ 0x58
 8008444:	2200      	movs	r2, #0
 8008446:	2180      	movs	r1, #128	@ 0x80
 8008448:	f7fa f9c8 	bl	80027dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008456:	2200      	movs	r2, #0
 8008458:	2181      	movs	r1, #129	@ 0x81
 800845a:	f7fa f9bf 	bl	80027dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200006d8 	.word	0x200006d8
 800846c:	40005c00 	.word	0x40005c00

08008470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 fd93 	bl	8000fb2 <HAL_PCD_Start>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f93c 	bl	8008710 <USBD_Get_USB_Status>
 8008498:	4603      	mov	r3, r0
 800849a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849c:	7bbb      	ldrb	r3, [r7, #14]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	4608      	mov	r0, r1
 80084b0:	4611      	mov	r1, r2
 80084b2:	461a      	mov	r2, r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	70fb      	strb	r3, [r7, #3]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70bb      	strb	r3, [r7, #2]
 80084bc:	4613      	mov	r3, r2
 80084be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084ce:	78bb      	ldrb	r3, [r7, #2]
 80084d0:	883a      	ldrh	r2, [r7, #0]
 80084d2:	78f9      	ldrb	r1, [r7, #3]
 80084d4:	f7f8 fee8 	bl	80012a8 <HAL_PCD_EP_Open>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f916 	bl	8008710 <USBD_Get_USB_Status>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800850c:	78fa      	ldrb	r2, [r7, #3]
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f7f8 ff26 	bl	8001362 <HAL_PCD_EP_Close>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f8f7 	bl	8008710 <USBD_Get_USB_Status>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008526:	7bbb      	ldrb	r3, [r7, #14]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f7f8 ffb7 	bl	80014c2 <HAL_PCD_EP_SetStall>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f8d8 	bl	8008710 <USBD_Get_USB_Status>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	4611      	mov	r1, r2
 800858c:	4618      	mov	r0, r3
 800858e:	f7f8 fff8 	bl	8001582 <HAL_PCD_EP_ClrStall>
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4618      	mov	r0, r3
 800859a:	f000 f8b9 	bl	8008710 <USBD_Get_USB_Status>
 800859e:	4603      	mov	r3, r0
 80085a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	da0c      	bge.n	80085e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ce:	68f9      	ldr	r1, [r7, #12]
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	440b      	add	r3, r1
 80085dc:	3302      	adds	r3, #2
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	e00b      	b.n	80085fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085e8:	68f9      	ldr	r1, [r7, #12]
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	440b      	add	r3, r1
 80085f4:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 80085f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	4611      	mov	r1, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f7f8 fe1b 	bl	800125e <HAL_PCD_SetAddress>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f86e 	bl	8008710 <USBD_Get_USB_Status>
 8008634:	4603      	mov	r3, r0
 8008636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008638:	7bbb      	ldrb	r3, [r7, #14]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b086      	sub	sp, #24
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	461a      	mov	r2, r3
 800864e:	460b      	mov	r3, r1
 8008650:	72fb      	strb	r3, [r7, #11]
 8008652:	4613      	mov	r3, r2
 8008654:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008664:	893b      	ldrh	r3, [r7, #8]
 8008666:	7af9      	ldrb	r1, [r7, #11]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	f7f8 fef3 	bl	8001454 <HAL_PCD_EP_Transmit>
 800866e:	4603      	mov	r3, r0
 8008670:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f84b 	bl	8008710 <USBD_Get_USB_Status>
 800867a:	4603      	mov	r3, r0
 800867c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800867e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	461a      	mov	r2, r3
 8008694:	460b      	mov	r3, r1
 8008696:	72fb      	strb	r3, [r7, #11]
 8008698:	4613      	mov	r3, r2
 800869a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086aa:	893b      	ldrh	r3, [r7, #8]
 80086ac:	7af9      	ldrb	r1, [r7, #11]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	f7f8 fe9f 	bl	80013f2 <HAL_PCD_EP_Receive>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f828 	bl	8008710 <USBD_Get_USB_Status>
 80086c0:	4603      	mov	r3, r0
 80086c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086d8:	4b02      	ldr	r3, [pc, #8]	@ (80086e4 <USBD_static_malloc+0x14>)
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr
 80086e4:	200009c8 	.word	0x200009c8

080086e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]

}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d817      	bhi.n	8008754 <USBD_Get_USB_Status+0x44>
 8008724:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <USBD_Get_USB_Status+0x1c>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	0800873d 	.word	0x0800873d
 8008730:	08008743 	.word	0x08008743
 8008734:	08008749 	.word	0x08008749
 8008738:	0800874f 	.word	0x0800874f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]
    break;
 8008740:	e00b      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008742:	2302      	movs	r3, #2
 8008744:	73fb      	strb	r3, [r7, #15]
    break;
 8008746:	e008      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
    break;
 800874c:	e005      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800874e:	2302      	movs	r3, #2
 8008750:	73fb      	strb	r3, [r7, #15]
    break;
 8008752:	e002      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008754:	2302      	movs	r3, #2
 8008756:	73fb      	strb	r3, [r7, #15]
    break;
 8008758:	bf00      	nop
  }
  return usb_status;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop

08008768 <memset>:
 8008768:	4603      	mov	r3, r0
 800876a:	4402      	add	r2, r0
 800876c:	4293      	cmp	r3, r2
 800876e:	d100      	bne.n	8008772 <memset+0xa>
 8008770:	4770      	bx	lr
 8008772:	f803 1b01 	strb.w	r1, [r3], #1
 8008776:	e7f9      	b.n	800876c <memset+0x4>

08008778 <__libc_init_array>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	2600      	movs	r6, #0
 800877c:	4d0c      	ldr	r5, [pc, #48]	@ (80087b0 <__libc_init_array+0x38>)
 800877e:	4c0d      	ldr	r4, [pc, #52]	@ (80087b4 <__libc_init_array+0x3c>)
 8008780:	1b64      	subs	r4, r4, r5
 8008782:	10a4      	asrs	r4, r4, #2
 8008784:	42a6      	cmp	r6, r4
 8008786:	d109      	bne.n	800879c <__libc_init_array+0x24>
 8008788:	f000 f81a 	bl	80087c0 <_init>
 800878c:	2600      	movs	r6, #0
 800878e:	4d0a      	ldr	r5, [pc, #40]	@ (80087b8 <__libc_init_array+0x40>)
 8008790:	4c0a      	ldr	r4, [pc, #40]	@ (80087bc <__libc_init_array+0x44>)
 8008792:	1b64      	subs	r4, r4, r5
 8008794:	10a4      	asrs	r4, r4, #2
 8008796:	42a6      	cmp	r6, r4
 8008798:	d105      	bne.n	80087a6 <__libc_init_array+0x2e>
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a0:	4798      	blx	r3
 80087a2:	3601      	adds	r6, #1
 80087a4:	e7ee      	b.n	8008784 <__libc_init_array+0xc>
 80087a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087aa:	4798      	blx	r3
 80087ac:	3601      	adds	r6, #1
 80087ae:	e7f2      	b.n	8008796 <__libc_init_array+0x1e>
 80087b0:	08008850 	.word	0x08008850
 80087b4:	08008850 	.word	0x08008850
 80087b8:	08008850 	.word	0x08008850
 80087bc:	08008854 	.word	0x08008854

080087c0 <_init>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr

080087cc <_fini>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr
