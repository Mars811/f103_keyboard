
f103_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008728  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008834  08008834  00009834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088ac  080088ac  0000a158  2**0
                  CONTENTS
  4 .ARM          00000000  080088ac  080088ac  0000a158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088ac  080088ac  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088ac  080088ac  000098ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088b0  080088b0  000098b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080088b4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20000158  08008a0c  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  08008a0c  0000a9e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141ed  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003301  00000000  00000000  0001e36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00021670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dea  00000000  00000000  00022888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b9  00000000  00000000  00023672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d66  00000000  00000000  0003d82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee5d  00000000  00000000  00055591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e43ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b04  00000000  00000000  000e4434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e8f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	0800881c 	.word	0x0800881c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	0800881c 	.word	0x0800881c

0800014c <GetPointerData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* 获取键位 */
static void GetPointerData(uint8_t *pbuf)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  // 清空报告缓冲区（8字节全0）
  memset(pbuf, 0, 8);
 8000154:	2208      	movs	r2, #8
 8000156:	2100      	movs	r1, #0
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f008 fb33 	bl	80087c4 <memset>

  if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == 1) {
 800015e:	2102      	movs	r1, #2
 8000160:	480f      	ldr	r0, [pc, #60]	@ (80001a0 <GetPointerData+0x54>)
 8000162:	f000 fe3d 	bl	8000de0 <HAL_GPIO_ReadPin>
 8000166:	4603      	mov	r3, r0
 8000168:	2b01      	cmp	r3, #1
 800016a:	d106      	bne.n	800017a <GetPointerData+0x2e>
    pbuf[0] = 0x01;   // 左Ctrl修饰键
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2201      	movs	r2, #1
 8000170:	701a      	strb	r2, [r3, #0]
    pbuf[2] = 0x19;   // V键
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	3302      	adds	r3, #2
 8000176:	2219      	movs	r2, #25
 8000178:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 800017a:	2108      	movs	r1, #8
 800017c:	4808      	ldr	r0, [pc, #32]	@ (80001a0 <GetPointerData+0x54>)
 800017e:	f000 fe2f 	bl	8000de0 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	2b01      	cmp	r3, #1
 8000186:	d106      	bne.n	8000196 <GetPointerData+0x4a>
    pbuf[0] = 0x01;   // 左Ctrl修饰键
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
    pbuf[2] = 0x06;   // C键
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3302      	adds	r3, #2
 8000192:	2206      	movs	r2, #6
 8000194:	701a      	strb	r2, [r3, #0]
  }
}
 8000196:	bf00      	nop
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010800 	.word	0x40010800

080001a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a8:	f000 fa74 	bl	8000694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ac:	f000 f810 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b0:	f000 f8de 	bl	8000370 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001b4:	f000 f8b2 	bl	800031c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001b8:	f007 ff5a 	bl	8008070 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001bc:	f000 f862 	bl	8000284 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001c0:	4802      	ldr	r0, [pc, #8]	@ (80001cc <main+0x28>)
 80001c2:	f003 f891 	bl	80032e8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c6:	bf00      	nop
 80001c8:	e7fd      	b.n	80001c6 <main+0x22>
 80001ca:	bf00      	nop
 80001cc:	20000174 	.word	0x20000174

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b094      	sub	sp, #80	@ 0x50
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001da:	2228      	movs	r2, #40	@ 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f008 faf0 	bl	80087c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000212:	2302      	movs	r3, #2
 8000214:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000216:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000220:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fb48 	bl	80028bc <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000232:	f000 f909 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000246:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fdb4 	bl	8002dc0 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800025e:	f000 f8f3 	bl	8000448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000262:	2310      	movs	r3, #16
 8000264:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f002 ff35 	bl	80030dc <HAL_RCCEx_PeriphCLKConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000278:	f000 f8e6 	bl	8000448 <Error_Handler>
  }
}
 800027c:	bf00      	nop
 800027e:	3750      	adds	r7, #80	@ 0x50
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002aa:	2247      	movs	r2, #71	@ 0x47
 80002ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002bc:	4b16      	ldr	r3, [pc, #88]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c2:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c8:	4813      	ldr	r0, [pc, #76]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002ca:	f002 ffbd 	bl	8003248 <HAL_TIM_Base_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002d4:	f000 f8b8 	bl	8000448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	4619      	mov	r1, r3
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <MX_TIM2_Init+0x94>)
 80002e6:	f003 f959 	bl	800359c <HAL_TIM_ConfigClockSource>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002f0:	f000 f8aa 	bl	8000448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f4:	2300      	movs	r3, #0
 80002f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002fc:	463b      	mov	r3, r7
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_TIM2_Init+0x94>)
 8000302:	f003 fb2f 	bl	8003964 <HAL_TIMEx_MasterConfigSynchronization>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800030c:	f000 f89c 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	3718      	adds	r7, #24
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000174 	.word	0x20000174

0800031c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000322:	4a12      	ldr	r2, [pc, #72]	@ (800036c <MX_USART1_UART_Init+0x50>)
 8000324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000328:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800032c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000354:	f003 fb76 	bl	8003a44 <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035e:	f000 f873 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200001bc 	.word	0x200001bc
 800036c:	40013800 	.word	0x40013800

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <MX_GPIO_Init+0x7c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <MX_GPIO_Init+0x7c>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b16      	ldr	r3, [pc, #88]	@ (80003ec <MX_GPIO_Init+0x7c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b13      	ldr	r3, [pc, #76]	@ (80003ec <MX_GPIO_Init+0x7c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a12      	ldr	r2, [pc, #72]	@ (80003ec <MX_GPIO_Init+0x7c>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b10      	ldr	r3, [pc, #64]	@ (80003ec <MX_GPIO_Init+0x7c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80003b4:	2302      	movs	r3, #2
 80003b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003bc:	2302      	movs	r3, #2
 80003be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	4619      	mov	r1, r3
 80003c6:	480a      	ldr	r0, [pc, #40]	@ (80003f0 <MX_GPIO_Init+0x80>)
 80003c8:	f000 fb86 	bl	8000ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* GPIO配置 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003cc:	2308      	movs	r3, #8
 80003ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d4:	2302      	movs	r3, #2
 80003d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	f107 0308 	add.w	r3, r7, #8
 80003dc:	4619      	mov	r1, r3
 80003de:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <MX_GPIO_Init+0x80>)
 80003e0:	f000 fb7a 	bl	8000ad8 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 80003e4:	bf00      	nop
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010800 	.word	0x40010800

080003f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* 定时器中断回调函数 */
  static volatile uint32_t counter = 0;
    if (htim->Instance == TIM2)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000404:	d115      	bne.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      // 每10ms执行一次PC的轮询回应
      if(counter++ == USBD_HID_GetPollingInterval(&hUsbDeviceFS))
 8000406:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000408:	681c      	ldr	r4, [r3, #0]
 800040a:	1c63      	adds	r3, r4, #1
 800040c:	4a0b      	ldr	r2, [pc, #44]	@ (800043c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800040e:	6013      	str	r3, [r2, #0]
 8000410:	480b      	ldr	r0, [pc, #44]	@ (8000440 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000412:	f006 fd4d 	bl	8006eb0 <USBD_HID_GetPollingInterval>
 8000416:	4603      	mov	r3, r0
 8000418:	429c      	cmp	r4, r3
 800041a:	d10a      	bne.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
        GetPointerData(HID_Buffer);
 800041c:	4809      	ldr	r0, [pc, #36]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800041e:	f7ff fe95 	bl	800014c <GetPointerData>
        USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000422:	2208      	movs	r2, #8
 8000424:	4907      	ldr	r1, [pc, #28]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000426:	4806      	ldr	r0, [pc, #24]	@ (8000440 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000428:	f006 fd20 	bl	8006e6c <USBD_HID_SendReport>
        counter = 0;
 800042c:	4b03      	ldr	r3, [pc, #12]	@ (800043c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
      }
    }
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bd90      	pop	{r4, r7, pc}
 800043a:	bf00      	nop
 800043c:	2000020c 	.word	0x2000020c
 8000440:	20000218 	.word	0x20000218
 8000444:	20000204 	.word	0x20000204

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <HAL_MspInit+0x60>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	@ (80004b4 <HAL_MspInit+0x60>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004c8:	d113      	bne.n	80004f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <HAL_TIM_Base_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a0b      	ldr	r2, [pc, #44]	@ (80004fc <HAL_TIM_Base_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <HAL_TIM_Base_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	201c      	movs	r0, #28
 80004e8:	f000 fa0d 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004ec:	201c      	movs	r0, #28
 80004ee:	f000 fa26 	bl	800093e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a20      	ldr	r2, [pc, #128]	@ (800059c <HAL_UART_MspInit+0x9c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d139      	bne.n	8000594 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000520:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <HAL_UART_MspInit+0xa0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a1e      	ldr	r2, [pc, #120]	@ (80005a0 <HAL_UART_MspInit+0xa0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <HAL_UART_MspInit+0xa0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <HAL_UART_MspInit+0xa0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a18      	ldr	r2, [pc, #96]	@ (80005a0 <HAL_UART_MspInit+0xa0>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <HAL_UART_MspInit+0xa0>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	480f      	ldr	r0, [pc, #60]	@ (80005a4 <HAL_UART_MspInit+0xa4>)
 8000566:	f000 fab7 	bl	8000ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800056a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800056e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <HAL_UART_MspInit+0xa4>)
 8000580:	f000 faaa 	bl	8000ad8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	2025      	movs	r0, #37	@ 0x25
 800058a:	f000 f9bc 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800058e:	2025      	movs	r0, #37	@ 0x25
 8000590:	f000 f9d5 	bl	800093e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40013800 	.word	0x40013800
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <NMI_Handler+0x4>

080005b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <MemManage_Handler+0x4>

080005c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <UsageFault_Handler+0x4>

080005d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 f892 	bl	8000720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000604:	4802      	ldr	r0, [pc, #8]	@ (8000610 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000606:	f000 fd27 	bl	8001058 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200006dc 	.word	0x200006dc

08000614 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000618:	4802      	ldr	r0, [pc, #8]	@ (8000624 <TIM2_IRQHandler+0x10>)
 800061a:	f002 feb7 	bl	800338c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000174 	.word	0x20000174

08000628 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <USART1_IRQHandler+0x10>)
 800062e:	f003 fa59 	bl	8003ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001bc 	.word	0x200001bc

0800063c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000648:	f7ff fff8 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800064e:	490c      	ldr	r1, [pc, #48]	@ (8000680 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000650:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a09      	ldr	r2, [pc, #36]	@ (8000688 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000664:	4c09      	ldr	r4, [pc, #36]	@ (800068c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000672:	f008 f8af 	bl	80087d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f7ff fd95 	bl	80001a4 <main>
  bx lr
 800067a:	4770      	bx	lr
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000684:	080088b4 	.word	0x080088b4
  ldr r2, =_sbss
 8000688:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800068c:	200009e0 	.word	0x200009e0

08000690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_2_IRQHandler>
	...

08000694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <HAL_Init+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	@ (80006bc <HAL_Init+0x28>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f923 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f808 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f7ff fed0 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_InitTick+0x54>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <HAL_InitTick+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f93b 	bl	800095a <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00e      	b.n	800070c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d80a      	bhi.n	800070a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f000 f903 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <HAL_InitTick+0x5c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000
 8000718:	20000008 	.word	0x20000008
 800071c:	20000004 	.word	0x20000004

08000720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_IncTick+0x1c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <HAL_IncTick+0x20>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a03      	ldr	r2, [pc, #12]	@ (8000740 <HAL_IncTick+0x20>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	20000008 	.word	0x20000008
 8000740:	20000210 	.word	0x20000210

08000744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return uwTick;
 8000748:	4b02      	ldr	r3, [pc, #8]	@ (8000754 <HAL_GetTick+0x10>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000210 	.word	0x20000210

08000758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	@ (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db0b      	blt.n	80007e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f003 021f 	and.w	r2, r3, #31
 80007d4:	4906      	ldr	r1, [pc, #24]	@ (80007f0 <__NVIC_EnableIRQ+0x34>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	095b      	lsrs	r3, r3, #5
 80007dc:	2001      	movs	r0, #1
 80007de:	fa00 f202 	lsl.w	r2, r0, r2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	@ (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	@ 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	@ 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff90 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff2d 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000918:	f7ff ff42 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 800091c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ff90 	bl	8000848 <NVIC_EncodePriority>
 8000928:	4602      	mov	r2, r0
 800092a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff5f 	bl	80007f4 <__NVIC_SetPriority>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff35 	bl	80007bc <__NVIC_EnableIRQ>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffa2 	bl	80008ac <SysTick_Config>
 8000968:	4603      	mov	r3, r0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000972:	b480      	push	{r7}
 8000974:	b085      	sub	sp, #20
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d008      	beq.n	800099c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2204      	movs	r2, #4
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e020      	b.n	80009de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f022 020e 	bic.w	r2, r2, #14
 80009aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f022 0201 	bic.w	r2, r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009c4:	2101      	movs	r1, #1
 80009c6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2201      	movs	r2, #1
 80009d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d005      	beq.n	8000a0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2204      	movs	r2, #4
 8000a04:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
 8000a0a:	e051      	b.n	8000ab0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 020e 	bic.w	r2, r2, #14
 8000a1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f022 0201 	bic.w	r2, r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a22      	ldr	r2, [pc, #136]	@ (8000abc <HAL_DMA_Abort_IT+0xd4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d029      	beq.n	8000a8a <HAL_DMA_Abort_IT+0xa2>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <HAL_DMA_Abort_IT+0xd8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d022      	beq.n	8000a86 <HAL_DMA_Abort_IT+0x9e>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <HAL_DMA_Abort_IT+0xdc>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d01a      	beq.n	8000a80 <HAL_DMA_Abort_IT+0x98>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac8 <HAL_DMA_Abort_IT+0xe0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d012      	beq.n	8000a7a <HAL_DMA_Abort_IT+0x92>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <HAL_DMA_Abort_IT+0xe4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00a      	beq.n	8000a74 <HAL_DMA_Abort_IT+0x8c>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <HAL_DMA_Abort_IT+0xe8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d102      	bne.n	8000a6e <HAL_DMA_Abort_IT+0x86>
 8000a68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a6c:	e00e      	b.n	8000a8c <HAL_DMA_Abort_IT+0xa4>
 8000a6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a72:	e00b      	b.n	8000a8c <HAL_DMA_Abort_IT+0xa4>
 8000a74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a78:	e008      	b.n	8000a8c <HAL_DMA_Abort_IT+0xa4>
 8000a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7e:	e005      	b.n	8000a8c <HAL_DMA_Abort_IT+0xa4>
 8000a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a84:	e002      	b.n	8000a8c <HAL_DMA_Abort_IT+0xa4>
 8000a86:	2310      	movs	r3, #16
 8000a88:	e000      	b.n	8000a8c <HAL_DMA_Abort_IT+0xa4>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4a11      	ldr	r2, [pc, #68]	@ (8000ad4 <HAL_DMA_Abort_IT+0xec>)
 8000a8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	4798      	blx	r3
    } 
  }
  return status;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40020008 	.word	0x40020008
 8000ac0:	4002001c 	.word	0x4002001c
 8000ac4:	40020030 	.word	0x40020030
 8000ac8:	40020044 	.word	0x40020044
 8000acc:	40020058 	.word	0x40020058
 8000ad0:	4002006c 	.word	0x4002006c
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b08b      	sub	sp, #44	@ 0x2c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e169      	b.n	8000dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aec:	2201      	movs	r2, #1
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f040 8158 	bne.w	8000dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a9a      	ldr	r2, [pc, #616]	@ (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d05e      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b14:	4a98      	ldr	r2, [pc, #608]	@ (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d875      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b1a:	4a98      	ldr	r2, [pc, #608]	@ (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d058      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b20:	4a96      	ldr	r2, [pc, #600]	@ (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d86f      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b26:	4a96      	ldr	r2, [pc, #600]	@ (8000d80 <HAL_GPIO_Init+0x2a8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d052      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b2c:	4a94      	ldr	r2, [pc, #592]	@ (8000d80 <HAL_GPIO_Init+0x2a8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d869      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b32:	4a94      	ldr	r2, [pc, #592]	@ (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d04c      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b38:	4a92      	ldr	r2, [pc, #584]	@ (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d863      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a92      	ldr	r2, [pc, #584]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d046      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b44:	4a90      	ldr	r2, [pc, #576]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d85d      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d82a      	bhi.n	8000ba4 <HAL_GPIO_Init+0xcc>
 8000b4e:	2b12      	cmp	r3, #18
 8000b50:	d859      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b52:	a201      	add	r2, pc, #4	@ (adr r2, 8000b58 <HAL_GPIO_Init+0x80>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000bd3 	.word	0x08000bd3
 8000b5c:	08000bad 	.word	0x08000bad
 8000b60:	08000bbf 	.word	0x08000bbf
 8000b64:	08000c01 	.word	0x08000c01
 8000b68:	08000c07 	.word	0x08000c07
 8000b6c:	08000c07 	.word	0x08000c07
 8000b70:	08000c07 	.word	0x08000c07
 8000b74:	08000c07 	.word	0x08000c07
 8000b78:	08000c07 	.word	0x08000c07
 8000b7c:	08000c07 	.word	0x08000c07
 8000b80:	08000c07 	.word	0x08000c07
 8000b84:	08000c07 	.word	0x08000c07
 8000b88:	08000c07 	.word	0x08000c07
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000c07 	.word	0x08000c07
 8000b94:	08000c07 	.word	0x08000c07
 8000b98:	08000c07 	.word	0x08000c07
 8000b9c:	08000bb5 	.word	0x08000bb5
 8000ba0:	08000bc9 	.word	0x08000bc9
 8000ba4:	4a79      	ldr	r2, [pc, #484]	@ (8000d8c <HAL_GPIO_Init+0x2b4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000baa:	e02c      	b.n	8000c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e029      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e024      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e01f      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	330c      	adds	r3, #12
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e01a      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e013      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	611a      	str	r2, [r3, #16]
          break;
 8000bf2:	e009      	b.n	8000c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	615a      	str	r2, [r3, #20]
          break;
 8000bfe:	e003      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          break;
 8000c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2bff      	cmp	r3, #255	@ 0xff
 8000c0c:	d801      	bhi.n	8000c12 <HAL_GPIO_Init+0x13a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	e001      	b.n	8000c16 <HAL_GPIO_Init+0x13e>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3304      	adds	r3, #4
 8000c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	@ 0xff
 8000c1c:	d802      	bhi.n	8000c24 <HAL_GPIO_Init+0x14c>
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x152>
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	3b08      	subs	r3, #8
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	210f      	movs	r1, #15
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	6a39      	ldr	r1, [r7, #32]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 80b1 	beq.w	8000dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c58:	4b4d      	ldr	r3, [pc, #308]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b4a      	ldr	r3, [pc, #296]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c70:	4a48      	ldr	r2, [pc, #288]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a40      	ldr	r2, [pc, #256]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d013      	beq.n	8000cc4 <HAL_GPIO_Init+0x1ec>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d9c <HAL_GPIO_Init+0x2c4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d00d      	beq.n	8000cc0 <HAL_GPIO_Init+0x1e8>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8000da0 <HAL_GPIO_Init+0x2c8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d007      	beq.n	8000cbc <HAL_GPIO_Init+0x1e4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3d      	ldr	r2, [pc, #244]	@ (8000da4 <HAL_GPIO_Init+0x2cc>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d101      	bne.n	8000cb8 <HAL_GPIO_Init+0x1e0>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e006      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e004      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cd6:	492f      	ldr	r1, [pc, #188]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	492c      	ldr	r1, [pc, #176]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4928      	ldr	r1, [pc, #160]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	4922      	ldr	r1, [pc, #136]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	491e      	ldr	r1, [pc, #120]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4918      	ldr	r1, [pc, #96]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4914      	ldr	r1, [pc, #80]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d021      	beq.n	8000dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	490e      	ldr	r1, [pc, #56]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
 8000d74:	e021      	b.n	8000dba <HAL_GPIO_Init+0x2e2>
 8000d76:	bf00      	nop
 8000d78:	10320000 	.word	0x10320000
 8000d7c:	10310000 	.word	0x10310000
 8000d80:	10220000 	.word	0x10220000
 8000d84:	10210000 	.word	0x10210000
 8000d88:	10120000 	.word	0x10120000
 8000d8c:	10110000 	.word	0x10110000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40011000 	.word	0x40011000
 8000da4:	40011400 	.word	0x40011400
 8000da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_GPIO_Init+0x304>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4909      	ldr	r1, [pc, #36]	@ (8000ddc <HAL_GPIO_Init+0x304>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f47f ae8e 	bne.w	8000aec <HAL_GPIO_Init+0x14>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	372c      	adds	r7, #44	@ 0x2c
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e001      	b.n	8000e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e10:	b08b      	sub	sp, #44	@ 0x2c
 8000e12:	af06      	add	r7, sp, #24
 8000e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e0f1      	b.n	8001004 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d106      	bne.n	8000e3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f007 fa3f 	bl	80082b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fb54 	bl	80044f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	687e      	ldr	r6, [r7, #4]
 8000e54:	466d      	mov	r5, sp
 8000e56:	f106 0410 	add.w	r4, r6, #16
 8000e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	602b      	str	r3, [r5, #0]
 8000e62:	1d33      	adds	r3, r6, #4
 8000e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f003 fb1e 	bl	80044a8 <USB_CoreInit>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2202      	movs	r2, #2
 8000e76:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0c2      	b.n	8001004 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fb4f 	bl	8004528 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e040      	b.n	8000f12 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	440b      	add	r3, r1
 8000eca:	3303      	adds	r3, #3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3338      	adds	r3, #56	@ 0x38
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	333c      	adds	r3, #60	@ 0x3c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3340      	adds	r3, #64	@ 0x40
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d3b9      	bcc.n	8000e90 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e044      	b.n	8000fac <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3b5      	bcc.n	8000f22 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	687e      	ldr	r6, [r7, #4]
 8000fbe:	466d      	mov	r5, sp
 8000fc0:	f106 0410 	add.w	r4, r6, #16
 8000fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	602b      	str	r3, [r5, #0]
 8000fcc:	1d33      	adds	r3, r6, #4
 8000fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f003 fab5 	bl	8004540 <USB_DevInit>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e00d      	b.n	8001004 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fd36 	bl	8006a6e <USB_DevDisconnect>

  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800100c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_PCD_Start+0x16>
 800101e:	2302      	movs	r3, #2
 8001020:	e016      	b.n	8001050 <HAL_PCD_Start+0x44>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fa4a 	bl	80044c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001034:	2101      	movs	r1, #1
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f007 fb8d 	bl	8008756 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fd0a 	bl	8006a5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f005 fd0c 	bl	8006a82 <USB_ReadInterrupts>
 800106a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 fb04 	bl	8001684 <PCD_EP_ISR_Handler>

    return;
 800107c:	e119      	b.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001084:	2b00      	cmp	r3, #0
 8001086:	d013      	beq.n	80010b0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001090:	b29a      	uxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800109a:	b292      	uxth	r2, r2
 800109c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f007 f984 	bl	80083ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f905 	bl	80012b8 <HAL_PCD_SetAddress>

    return;
 80010ae:	e100      	b.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00c      	beq.n	80010d4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010cc:	b292      	uxth	r2, r2
 80010ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010d2:	e0ee      	b.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00c      	beq.n	80010f8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010f6:	e0dc      	b.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d027      	beq.n	8001152 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800110a:	b29a      	uxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0204 	bic.w	r2, r2, #4
 8001114:	b292      	uxth	r2, r2
 8001116:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0208 	bic.w	r2, r2, #8
 800112c:	b292      	uxth	r2, r2
 800112e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f007 f974 	bl	8008420 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800114a:	b292      	uxth	r2, r2
 800114c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001150:	e0af      	b.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8083 	beq.w	8001264 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	77fb      	strb	r3, [r7, #31]
 8001162:	e010      	b.n	8001186 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	7ffb      	ldrb	r3, [r7, #31]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	441a      	add	r2, r3
 8001170:	7ffb      	ldrb	r3, [r7, #31]
 8001172:	8812      	ldrh	r2, [r2, #0]
 8001174:	b292      	uxth	r2, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	3320      	adds	r3, #32
 800117a:	443b      	add	r3, r7
 800117c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	3301      	adds	r3, #1
 8001184:	77fb      	strb	r3, [r7, #31]
 8001186:	7ffb      	ldrb	r3, [r7, #31]
 8001188:	2b07      	cmp	r3, #7
 800118a:	d9eb      	bls.n	8001164 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	b292      	uxth	r2, r2
 80011a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	b292      	uxth	r2, r2
 80011b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011bc:	bf00      	nop
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f6      	beq.n	80011be <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011e2:	b292      	uxth	r2, r2
 80011e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	77fb      	strb	r3, [r7, #31]
 80011ec:	e00f      	b.n	800120e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	4611      	mov	r1, r2
 80011f6:	7ffa      	ldrb	r2, [r7, #31]
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	440a      	add	r2, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	3320      	adds	r3, #32
 8001200:	443b      	add	r3, r7
 8001202:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001206:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	3301      	adds	r3, #1
 800120c:	77fb      	strb	r3, [r7, #31]
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	2b07      	cmp	r3, #7
 8001212:	d9ec      	bls.n	80011ee <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	b292      	uxth	r2, r2
 8001228:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001234:	b29a      	uxth	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800123e:	b292      	uxth	r2, r2
 8001240:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800124c:	b29a      	uxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0204 	orr.w	r2, r2, #4
 8001256:	b292      	uxth	r2, r2
 8001258:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f007 f8c5 	bl	80083ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001262:	e026      	b.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00f      	beq.n	800128e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001276:	b29a      	uxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001280:	b292      	uxth	r2, r2
 8001282:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f007 f883 	bl	8008392 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800128c:	e011      	b.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012aa:	b292      	uxth	r2, r2
 80012ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012b0:	bf00      	nop
  }
}
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_PCD_SetAddress+0x1a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e013      	b.n	80012fa <HAL_PCD_SetAddress+0x42>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	78fa      	ldrb	r2, [r7, #3]
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fba2 	bl	8006a34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	4608      	mov	r0, r1
 800130c:	4611      	mov	r1, r2
 800130e:	461a      	mov	r2, r3
 8001310:	4603      	mov	r3, r0
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	460b      	mov	r3, r1
 8001316:	803b      	strh	r3, [r7, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001324:	2b00      	cmp	r3, #0
 8001326:	da0e      	bge.n	8001346 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2201      	movs	r2, #1
 8001342:	705a      	strb	r2, [r3, #1]
 8001344:	e00e      	b.n	8001364 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	f003 0207 	and.w	r2, r3, #7
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	b2da      	uxtb	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001370:	883a      	ldrh	r2, [r7, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	78ba      	ldrb	r2, [r7, #2]
 800137a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800137c:	78bb      	ldrb	r3, [r7, #2]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d102      	bne.n	8001388 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_PCD_EP_Open+0x94>
 8001392:	2302      	movs	r3, #2
 8001394:	e00e      	b.n	80013b4 <HAL_PCD_EP_Open+0xb2>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68f9      	ldr	r1, [r7, #12]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 f8eb 	bl	8004580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80013b2:	7afb      	ldrb	r3, [r7, #11]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da0e      	bge.n	80013ee <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	705a      	strb	r2, [r3, #1]
 80013ec:	e00e      	b.n	800140c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	f003 0207 	and.w	r2, r3, #7
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	b2da      	uxtb	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_PCD_EP_Close+0x6a>
 8001422:	2302      	movs	r3, #2
 8001424:	e00e      	b.n	8001444 <HAL_PCD_EP_Close+0x88>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68f9      	ldr	r1, [r7, #12]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fc63 	bl	8004d00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	460b      	mov	r3, r1
 800145a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	f003 0207 	and.w	r2, r3, #7
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2200      	movs	r2, #0
 800148a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800148c:	7afb      	ldrb	r3, [r7, #11]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	b2da      	uxtb	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6979      	ldr	r1, [r7, #20]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fe1a 	bl	80050d8 <USB_EPStartXfer>

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	460b      	mov	r3, r1
 80014bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2201      	movs	r2, #1
 80014f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	b2da      	uxtb	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6979      	ldr	r1, [r7, #20]
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fde3 	bl	80050d8 <USB_EPStartXfer>

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	f003 0207 	and.w	r2, r3, #7
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d901      	bls.n	800153a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e04c      	b.n	80015d4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800153a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da0e      	bge.n	8001560 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	705a      	strb	r2, [r3, #1]
 800155e:	e00c      	b.n	800157a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	b2da      	uxtb	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_PCD_EP_SetStall+0x7e>
 8001596:	2302      	movs	r3, #2
 8001598:	e01c      	b.n	80015d4 <HAL_PCD_EP_SetStall+0xb8>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68f9      	ldr	r1, [r7, #12]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 f946 	bl	800683a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d108      	bne.n	80015ca <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4610      	mov	r0, r2
 80015c6:	f005 fa6b 	bl	8006aa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	f003 020f 	and.w	r2, r3, #15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d901      	bls.n	80015fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e040      	b.n	800167c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da0e      	bge.n	8001620 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	705a      	strb	r2, [r3, #1]
 800161e:	e00e      	b.n	800163e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	f003 0207 	and.w	r2, r3, #7
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	b2da      	uxtb	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_PCD_EP_ClrStall+0x82>
 800165a:	2302      	movs	r3, #2
 800165c:	e00e      	b.n	800167c <HAL_PCD_EP_ClrStall+0xa0>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68f9      	ldr	r1, [r7, #12]
 800166c:	4618      	mov	r0, r3
 800166e:	f005 f934 	bl	80068da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	@ 0x58
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800168c:	e3be      	b.n	8001e0c <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001696:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800169a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80016a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 8178 	bne.w	80019a2 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d151      	bne.n	8001762 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80016ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016ce:	81fb      	strh	r3, [r7, #14]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016de:	b29b      	uxth	r3, r3
 80016e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3328      	adds	r3, #40	@ 0x28
 80016e6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	3302      	adds	r3, #2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001712:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	441a      	add	r2, r3
 800171e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001720:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f006 fe1a 	bl	800835e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 836a 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x788>
 8001738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f040 8365 	bne.w	8001e0c <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800174e:	b2da      	uxtb	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001760:	e354      	b.n	8001e0c <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001768:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001774:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800177c:	2b00      	cmp	r3, #0
 800177e:	d034      	beq.n	80017ea <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	3306      	adds	r3, #6
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80017b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017bc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017be:	b29b      	uxth	r3, r3
 80017c0:	f005 f9be 	bl	8006b40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017d0:	4013      	ands	r3, r2
 80017d2:	823b      	strh	r3, [r7, #16]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	8a3a      	ldrh	r2, [r7, #16]
 80017da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017de:	b292      	uxth	r2, r2
 80017e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f006 fd8e 	bl	8008304 <HAL_PCD_SetupStageCallback>
 80017e8:	e310      	b.n	8001e0c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f280 830c 	bge.w	8001e0c <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001800:	4013      	ands	r3, r2
 8001802:	83fb      	strh	r3, [r7, #30]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	8bfa      	ldrh	r2, [r7, #30]
 800180a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800180e:	b292      	uxth	r2, r2
 8001810:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	3306      	adds	r3, #6
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	4413      	add	r3, r2
 8001830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800183a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800183e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d019      	beq.n	800187a <PCD_EP_ISR_Handler+0x1f6>
 8001846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d015      	beq.n	800187a <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001854:	6959      	ldr	r1, [r3, #20]
 8001856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001858:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800185a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800185e:	b29b      	uxth	r3, r3
 8001860:	f005 f96e 	bl	8006b40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	441a      	add	r2, r3
 800186e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001870:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001872:	2100      	movs	r1, #0
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f006 fd57 	bl	8008328 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001884:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800188c:	2b00      	cmp	r3, #0
 800188e:	f040 82bd 	bne.w	8001e0c <PCD_EP_ISR_Handler+0x788>
 8001892:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001896:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800189a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800189e:	f000 82b5 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	4413      	add	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80018d8:	d91d      	bls.n	8001916 <PCD_EP_ISR_Handler+0x292>
 80018da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <PCD_EP_ISR_Handler+0x270>
 80018ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f0:	3b01      	subs	r3, #1
 80018f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	b29b      	uxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b29b      	uxth	r3, r3
 8001906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800190a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800190e:	b29a      	uxth	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	801a      	strh	r2, [r3, #0]
 8001914:	e026      	b.n	8001964 <PCD_EP_ISR_Handler+0x2e0>
 8001916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <PCD_EP_ISR_Handler+0x2b0>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800192c:	b29a      	uxth	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	e017      	b.n	8001964 <PCD_EP_ISR_Handler+0x2e0>
 8001934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	647b      	str	r3, [r7, #68]	@ 0x44
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <PCD_EP_ISR_Handler+0x2ca>
 8001948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194a:	3301      	adds	r3, #1
 800194c:	647b      	str	r3, [r7, #68]	@ 0x44
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29a      	uxth	r2, r3
 8001954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001956:	b29b      	uxth	r3, r3
 8001958:	029b      	lsls	r3, r3, #10
 800195a:	b29b      	uxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001974:	827b      	strh	r3, [r7, #18]
 8001976:	8a7b      	ldrh	r3, [r7, #18]
 8001978:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800197c:	827b      	strh	r3, [r7, #18]
 800197e:	8a7b      	ldrh	r3, [r7, #18]
 8001980:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001984:	827b      	strh	r3, [r7, #18]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	8a7b      	ldrh	r3, [r7, #18]
 800198c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800199c:	b29b      	uxth	r3, r3
 800199e:	8013      	strh	r3, [r2, #0]
 80019a0:	e234      	b.n	8001e0c <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019b6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f280 80fc 	bge.w	8001bb8 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019d6:	4013      	ands	r3, r2
 80019d8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80019ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019f2:	b292      	uxth	r2, r2
 80019f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019f6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0e:	7b1b      	ldrb	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d125      	bne.n	8001a60 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	3306      	adds	r3, #6
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001a40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8092 	beq.w	8001b6e <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a50:	6959      	ldr	r1, [r3, #20]
 8001a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a54:	88da      	ldrh	r2, [r3, #6]
 8001a56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a5a:	f005 f871 	bl	8006b40 <USB_ReadPMA>
 8001a5e:	e086      	b.n	8001b6e <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a62:	78db      	ldrb	r3, [r3, #3]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d10a      	bne.n	8001a7e <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f9d9 	bl	8001e28 <HAL_PCD_EP_DB_Receive>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001a7c:	e077      	b.n	8001b6e <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a98:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	441a      	add	r2, r3
 8001aaa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d024      	beq.n	8001b26 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	3302      	adds	r3, #2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b04:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d02e      	beq.n	8001b6e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b16:	6959      	ldr	r1, [r3, #20]
 8001b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1a:	891a      	ldrh	r2, [r3, #8]
 8001b1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b20:	f005 f80e 	bl	8006b40 <USB_ReadPMA>
 8001b24:	e023      	b.n	8001b6e <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3306      	adds	r3, #6
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b4e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b60:	6959      	ldr	r1, [r3, #20]
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	895a      	ldrh	r2, [r3, #10]
 8001b66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b6a:	f004 ffe9 	bl	8006b40 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b76:	441a      	add	r2, r3
 8001b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b84:	441a      	add	r2, r3
 8001b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b88:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <PCD_EP_ISR_Handler+0x51a>
 8001b92:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d206      	bcs.n	8001bac <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f006 fbbf 	bl	8008328 <HAL_PCD_DataOutStageCallback>
 8001baa:	e005      	b.n	8001bb8 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fa90 	bl	80050d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8123 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bc6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bf4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	441a      	add	r2, r3
 8001c06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c18:	78db      	ldrb	r3, [r3, #3]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	f040 80a2 	bne.w	8001d64 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c28:	7b1b      	ldrb	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8093 	beq.w	8001d56 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d046      	beq.n	8001cca <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3e:	785b      	ldrb	r3, [r3, #1]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d126      	bne.n	8001c92 <PCD_EP_ISR_Handler+0x60e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	4413      	add	r3, r2
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	011a      	lsls	r2, r3, #4
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	4413      	add	r3, r2
 8001c66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	801a      	strh	r2, [r3, #0]
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	801a      	strh	r2, [r3, #0]
 8001c90:	e061      	b.n	8001d56 <PCD_EP_ISR_Handler+0x6d2>
 8001c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c94:	785b      	ldrb	r3, [r3, #1]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d15d      	bne.n	8001d56 <PCD_EP_ISR_Handler+0x6d2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cae:	4413      	add	r3, r2
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	011a      	lsls	r2, r3, #4
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cba:	4413      	add	r3, r2
 8001cbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	e045      	b.n	8001d56 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d126      	bne.n	8001d26 <PCD_EP_ISR_Handler+0x6a2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cec:	4413      	add	r3, r2
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	011a      	lsls	r2, r3, #4
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	e017      	b.n	8001d56 <PCD_EP_ISR_Handler+0x6d2>
 8001d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d113      	bne.n	8001d56 <PCD_EP_ISR_Handler+0x6d2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3c:	4413      	add	r3, r2
 8001d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	011a      	lsls	r2, r3, #4
 8001d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d48:	4413      	add	r3, r2
 8001d4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f006 fafe 	bl	800835e <HAL_PCD_DataInStageCallback>
 8001d62:	e053      	b.n	8001e0c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d146      	bne.n	8001dfe <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	3302      	adds	r3, #2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d907      	bls.n	8001db8 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001db0:	1ad2      	subs	r2, r2, r3
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	e002      	b.n	8001dbe <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f006 fac6 	bl	800835e <HAL_PCD_DataInStageCallback>
 8001dd2:	e01b      	b.n	8001e0c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ddc:	441a      	add	r2, r3
 8001dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dea:	441a      	add	r2, r3
 8001dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f96e 	bl	80050d8 <USB_EPStartXfer>
 8001dfc:	e006      	b.n	8001e0c <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001dfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e02:	461a      	mov	r2, r3
 8001e04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f91b 	bl	8002042 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f6ff ac38 	blt.w	800168e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3758      	adds	r7, #88	@ 0x58
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d07e      	beq.n	8001f3e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	3302      	adds	r3, #2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	8b7b      	ldrh	r3, [r7, #26]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d306      	bcc.n	8001e82 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	8b7b      	ldrh	r3, [r7, #26]
 8001e7a:	1ad2      	subs	r2, r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	619a      	str	r2, [r3, #24]
 8001e80:	e002      	b.n	8001e88 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d123      	bne.n	8001ed8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eaa:	833b      	strh	r3, [r7, #24]
 8001eac:	8b3b      	ldrh	r3, [r7, #24]
 8001eae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001eb2:	833b      	strh	r3, [r7, #24]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	441a      	add	r2, r3
 8001ec2:	8b3b      	ldrh	r3, [r7, #24]
 8001ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01f      	beq.n	8001f22 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001efc:	82fb      	strh	r3, [r7, #22]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	441a      	add	r2, r3
 8001f0c:	8afb      	ldrh	r3, [r7, #22]
 8001f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f22:	8b7b      	ldrh	r3, [r7, #26]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8087 	beq.w	8002038 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6959      	ldr	r1, [r3, #20]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	891a      	ldrh	r2, [r3, #8]
 8001f36:	8b7b      	ldrh	r3, [r7, #26]
 8001f38:	f004 fe02 	bl	8006b40 <USB_ReadPMA>
 8001f3c:	e07c      	b.n	8002038 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	3306      	adds	r3, #6
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	8b7b      	ldrh	r3, [r7, #26]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d306      	bcc.n	8001f80 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	8b7b      	ldrh	r3, [r7, #26]
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	619a      	str	r2, [r3, #24]
 8001f7e:	e002      	b.n	8001f86 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d123      	bne.n	8001fd6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa8:	83fb      	strh	r3, [r7, #30]
 8001faa:	8bfb      	ldrh	r3, [r7, #30]
 8001fac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fb0:	83fb      	strh	r3, [r7, #30]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	441a      	add	r2, r3
 8001fc0:	8bfb      	ldrh	r3, [r7, #30]
 8001fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11f      	bne.n	8002020 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ffa:	83bb      	strh	r3, [r7, #28]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	8bbb      	ldrh	r3, [r7, #28]
 800200c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002018:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002020:	8b7b      	ldrh	r3, [r7, #26]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6959      	ldr	r1, [r3, #20]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	895a      	ldrh	r2, [r3, #10]
 8002032:	8b7b      	ldrh	r3, [r7, #26]
 8002034:	f004 fd84 	bl	8006b40 <USB_ReadPMA>
    }
  }

  return count;
 8002038:	8b7b      	ldrh	r3, [r7, #26]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b0a4      	sub	sp, #144	@ 0x90
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	4613      	mov	r3, r2
 800204e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 81dd 	beq.w	8002416 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002064:	b29b      	uxth	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	3302      	adds	r3, #2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002084:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002090:	429a      	cmp	r2, r3
 8002092:	d907      	bls.n	80020a4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800209c:	1ad2      	subs	r2, r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	619a      	str	r2, [r3, #24]
 80020a2:	e002      	b.n	80020aa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80b9 	bne.w	8002226 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d126      	bne.n	800210a <HAL_PCD_EP_DB_Transmit+0xc8>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d0:	4413      	add	r3, r2
 80020d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	011a      	lsls	r2, r3, #4
 80020da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020dc:	4413      	add	r3, r2
 80020de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002102:	b29a      	uxth	r2, r3
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	801a      	strh	r2, [r3, #0]
 8002108:	e01a      	b.n	8002140 <HAL_PCD_EP_DB_Transmit+0xfe>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	785b      	ldrb	r3, [r3, #1]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d116      	bne.n	8002140 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002126:	4413      	add	r3, r2
 8002128:	637b      	str	r3, [r7, #52]	@ 0x34
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	011a      	lsls	r2, r3, #4
 8002130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002132:	4413      	add	r3, r2
 8002134:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002138:	633b      	str	r3, [r7, #48]	@ 0x30
 800213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213c:	2200      	movs	r2, #0
 800213e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d126      	bne.n	800219c <HAL_PCD_EP_DB_Transmit+0x15a>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	011a      	lsls	r2, r3, #4
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	4413      	add	r3, r2
 8002170:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	b29a      	uxth	r2, r3
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	801a      	strh	r2, [r3, #0]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002194:	b29a      	uxth	r2, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	e017      	b.n	80021cc <HAL_PCD_EP_DB_Transmit+0x18a>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d113      	bne.n	80021cc <HAL_PCD_EP_DB_Transmit+0x18a>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	4413      	add	r3, r2
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	011a      	lsls	r2, r3, #4
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	4413      	add	r3, r2
 80021c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f006 f8c3 	bl	800835e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 82fc 	beq.w	80027dc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021fe:	82fb      	strh	r3, [r7, #22]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	441a      	add	r2, r3
 800220e:	8afb      	ldrh	r3, [r7, #22]
 8002210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002218:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800221c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002220:	b29b      	uxth	r3, r3
 8002222:	8013      	strh	r3, [r2, #0]
 8002224:	e2da      	b.n	80027dc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d021      	beq.n	8002274 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800226c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002270:	b29b      	uxth	r3, r3
 8002272:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800227a:	2b01      	cmp	r3, #1
 800227c:	f040 82ae 	bne.w	80027dc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002288:	441a      	add	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002296:	441a      	add	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d30b      	bcc.n	80022c0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022b8:	1ad2      	subs	r2, r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	621a      	str	r2, [r3, #32]
 80022be:	e017      	b.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d108      	bne.n	80022da <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80022c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022d8:	e00a      	b.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d165      	bne.n	80023c4 <HAL_PCD_EP_DB_Transmit+0x382>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230c:	4413      	add	r3, r2
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	011a      	lsls	r2, r3, #4
 8002316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002318:	4413      	add	r3, r2
 800231a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800231e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232a:	b29a      	uxth	r2, r3
 800232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002334:	2b3e      	cmp	r3, #62	@ 0x3e
 8002336:	d91d      	bls.n	8002374 <HAL_PCD_EP_DB_Transmit+0x332>
 8002338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <HAL_PCD_EP_DB_Transmit+0x310>
 800234c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800234e:	3b01      	subs	r3, #1
 8002350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29a      	uxth	r2, r3
 8002358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235a:	b29b      	uxth	r3, r3
 800235c:	029b      	lsls	r3, r3, #10
 800235e:	b29b      	uxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b29b      	uxth	r3, r3
 8002364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236c:	b29a      	uxth	r2, r3
 800236e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	e044      	b.n	80023fe <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_PCD_EP_DB_Transmit+0x350>
 800237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238a:	b29a      	uxth	r2, r3
 800238c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	e035      	b.n	80023fe <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800239a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_PCD_EP_DB_Transmit+0x36a>
 80023a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a8:	3301      	adds	r3, #1
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	e01c      	b.n	80023fe <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	785b      	ldrb	r3, [r3, #1]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d118      	bne.n	80023fe <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e0:	4413      	add	r3, r2
 80023e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	011a      	lsls	r2, r3, #4
 80023ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ec:	4413      	add	r3, r2
 80023ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80023f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6959      	ldr	r1, [r3, #20]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	891a      	ldrh	r2, [r3, #8]
 800240a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800240e:	b29b      	uxth	r3, r3
 8002410:	f004 fb51 	bl	8006ab6 <USB_WritePMA>
 8002414:	e1e2      	b.n	80027dc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	3306      	adds	r3, #6
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800244a:	429a      	cmp	r2, r3
 800244c:	d307      	bcc.n	800245e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002456:	1ad2      	subs	r2, r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	e002      	b.n	8002464 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 80c0 	bne.w	80025ee <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d126      	bne.n	80024c4 <HAL_PCD_EP_DB_Transmit+0x482>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800248a:	4413      	add	r3, r2
 800248c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	011a      	lsls	r2, r3, #4
 8002494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002496:	4413      	add	r3, r2
 8002498:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800249c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800249e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024bc:	b29a      	uxth	r2, r3
 80024be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c0:	801a      	strh	r2, [r3, #0]
 80024c2:	e01a      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d116      	bne.n	80024fa <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024e0:	4413      	add	r3, r2
 80024e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ec:	4413      	add	r3, r2
 80024ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80024f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d12b      	bne.n	8002560 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251c:	4413      	add	r3, r2
 800251e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	011a      	lsls	r2, r3, #4
 8002526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002528:	4413      	add	r3, r2
 800252a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800252e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002532:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253e:	b29a      	uxth	r2, r3
 8002540:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002556:	b29a      	uxth	r2, r3
 8002558:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	e017      	b.n	8002590 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d113      	bne.n	8002590 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002576:	4413      	add	r3, r2
 8002578:	677b      	str	r3, [r7, #116]	@ 0x74
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	011a      	lsls	r2, r3, #4
 8002580:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002582:	4413      	add	r3, r2
 8002584:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002588:	673b      	str	r3, [r7, #112]	@ 0x70
 800258a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f005 fee1 	bl	800835e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 811a 	bne.w	80027dc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	8013      	strh	r3, [r2, #0]
 80025ec:	e0f6      	b.n	80027dc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d121      	bne.n	800263c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800260e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002612:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	441a      	add	r2, r3
 8002624:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800262c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002638:	b29b      	uxth	r3, r3
 800263a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002642:	2b01      	cmp	r3, #1
 8002644:	f040 80ca 	bne.w	80027dc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002650:	441a      	add	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800265e:	441a      	add	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d30b      	bcc.n	8002688 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	621a      	str	r2, [r3, #32]
 8002686:	e017      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d108      	bne.n	80026a2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002690:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002694:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80026a0:	e00a      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d165      	bne.n	8002792 <HAL_PCD_EP_DB_Transmit+0x750>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026da:	4413      	add	r3, r2
 80026dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	011a      	lsls	r2, r3, #4
 80026e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026e6:	4413      	add	r3, r2
 80026e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026fc:	801a      	strh	r2, [r3, #0]
 80026fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002702:	2b3e      	cmp	r3, #62	@ 0x3e
 8002704:	d91d      	bls.n	8002742 <HAL_PCD_EP_DB_Transmit+0x700>
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800270e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_PCD_EP_DB_Transmit+0x6de>
 800271a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800271c:	3b01      	subs	r3, #1
 800271e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29a      	uxth	r2, r3
 8002726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002728:	b29b      	uxth	r3, r3
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	b29b      	uxth	r3, r3
 800272e:	4313      	orrs	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800273a:	b29a      	uxth	r2, r3
 800273c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	e041      	b.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <HAL_PCD_EP_DB_Transmit+0x71e>
 800274a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002758:	b29a      	uxth	r2, r3
 800275a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	e032      	b.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002760:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_PCD_EP_DB_Transmit+0x738>
 8002774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002776:	3301      	adds	r3, #1
 8002778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800277a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29a      	uxth	r2, r3
 8002780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002782:	b29b      	uxth	r3, r3
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	b29b      	uxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b29a      	uxth	r2, r3
 800278c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	e019      	b.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d115      	bne.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x784>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a8:	4413      	add	r3, r2
 80027aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	011a      	lsls	r2, r3, #4
 80027b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6959      	ldr	r1, [r3, #20]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	895a      	ldrh	r2, [r3, #10]
 80027d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f004 f96d 	bl	8006ab6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027f6:	82bb      	strh	r3, [r7, #20]
 80027f8:	8abb      	ldrh	r3, [r7, #20]
 80027fa:	f083 0310 	eor.w	r3, r3, #16
 80027fe:	82bb      	strh	r3, [r7, #20]
 8002800:	8abb      	ldrh	r3, [r7, #20]
 8002802:	f083 0320 	eor.w	r3, r3, #32
 8002806:	82bb      	strh	r3, [r7, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	8abb      	ldrh	r3, [r7, #20]
 8002818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800281c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002828:	b29b      	uxth	r3, r3
 800282a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3790      	adds	r7, #144	@ 0x90
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002836:	b480      	push	{r7}
 8002838:	b087      	sub	sp, #28
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	817b      	strh	r3, [r7, #10]
 8002844:	4613      	mov	r3, r2
 8002846:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00b      	beq.n	800286c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002854:	897b      	ldrh	r3, [r7, #10]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e009      	b.n	8002880 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800286c:	897a      	ldrh	r2, [r7, #10]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002880:	893b      	ldrh	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	b29a      	uxth	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	80da      	strh	r2, [r3, #6]
 8002894:	e00b      	b.n	80028ae <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2201      	movs	r2, #1
 800289a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e272      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8087 	beq.w	80029ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028dc:	4b92      	ldr	r3, [pc, #584]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d00c      	beq.n	8002902 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d112      	bne.n	800291a <HAL_RCC_OscConfig+0x5e>
 80028f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002900:	d10b      	bne.n	800291a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002902:	4b89      	ldr	r3, [pc, #548]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d06c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x12c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d168      	bne.n	80029e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e24c      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x76>
 8002924:	4b80      	ldr	r3, [pc, #512]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a7f      	ldr	r2, [pc, #508]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800292a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	e02e      	b.n	8002990 <HAL_RCC_OscConfig+0xd4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x98>
 800293a:	4b7b      	ldr	r3, [pc, #492]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7a      	ldr	r2, [pc, #488]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b78      	ldr	r3, [pc, #480]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a77      	ldr	r2, [pc, #476]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e01d      	b.n	8002990 <HAL_RCC_OscConfig+0xd4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0xbc>
 800295e:	4b72      	ldr	r3, [pc, #456]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a71      	ldr	r2, [pc, #452]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0xd4>
 8002978:	4b6b      	ldr	r3, [pc, #428]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6a      	ldr	r2, [pc, #424]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b68      	ldr	r3, [pc, #416]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a67      	ldr	r2, [pc, #412]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800298e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fd fed4 	bl	8000744 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fd fed0 	bl	8000744 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	@ 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e200      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0xe4>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fd fec0 	bl	8000744 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fd febc 	bl	8000744 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1ec      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	4b53      	ldr	r3, [pc, #332]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x10c>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a02:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x18c>
 8002a0e:	4b46      	ldr	r3, [pc, #280]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b43      	ldr	r3, [pc, #268]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x176>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1c0      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b3d      	ldr	r3, [pc, #244]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4939      	ldr	r1, [pc, #228]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e03a      	b.n	8002abe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <HAL_RCC_OscConfig+0x270>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fd fe75 	bl	8000744 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7fd fe71 	bl	8000744 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1a1      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	4b2d      	ldr	r3, [pc, #180]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4927      	ldr	r1, [pc, #156]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
 8002a90:	e015      	b.n	8002abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a92:	4b26      	ldr	r3, [pc, #152]	@ (8002b2c <HAL_RCC_OscConfig+0x270>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fd fe54 	bl	8000744 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fd fe50 	bl	8000744 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e180      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d03a      	beq.n	8002b40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d019      	beq.n	8002b06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad8:	f7fd fe34 	bl	8000744 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fd fe30 	bl	8000744 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e160      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002afe:	2001      	movs	r0, #1
 8002b00:	f000 face 	bl	80030a0 <RCC_Delay>
 8002b04:	e01c      	b.n	8002b40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fd fe1a 	bl	8000744 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b12:	e00f      	b.n	8002b34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fd fe16 	bl	8000744 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d908      	bls.n	8002b34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e146      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	42420000 	.word	0x42420000
 8002b30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	4b92      	ldr	r3, [pc, #584]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e9      	bne.n	8002b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a6 	beq.w	8002c9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b8b      	ldr	r3, [pc, #556]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b88      	ldr	r3, [pc, #544]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a87      	ldr	r2, [pc, #540]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b85      	ldr	r3, [pc, #532]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b76:	2301      	movs	r3, #1
 8002b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b82      	ldr	r3, [pc, #520]	@ (8002d84 <HAL_RCC_OscConfig+0x4c8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d118      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b86:	4b7f      	ldr	r3, [pc, #508]	@ (8002d84 <HAL_RCC_OscConfig+0x4c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d84 <HAL_RCC_OscConfig+0x4c8>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b92:	f7fd fdd7 	bl	8000744 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9a:	f7fd fdd3 	bl	8000744 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b64      	cmp	r3, #100	@ 0x64
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e103      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b75      	ldr	r3, [pc, #468]	@ (8002d84 <HAL_RCC_OscConfig+0x4c8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x312>
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	e02d      	b.n	8002c2a <HAL_RCC_OscConfig+0x36e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x334>
 8002bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a69      	ldr	r2, [pc, #420]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	4b67      	ldr	r3, [pc, #412]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a66      	ldr	r2, [pc, #408]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	e01c      	b.n	8002c2a <HAL_RCC_OscConfig+0x36e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x356>
 8002bf8:	4b61      	ldr	r3, [pc, #388]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a60      	ldr	r2, [pc, #384]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	4b5e      	ldr	r3, [pc, #376]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a5d      	ldr	r2, [pc, #372]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0x36e>
 8002c12:	4b5b      	ldr	r3, [pc, #364]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a5a      	ldr	r2, [pc, #360]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	4b58      	ldr	r3, [pc, #352]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a57      	ldr	r2, [pc, #348]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d015      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7fd fd87 	bl	8000744 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fd fd83 	bl	8000744 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0b1      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	4b4b      	ldr	r3, [pc, #300]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ee      	beq.n	8002c3a <HAL_RCC_OscConfig+0x37e>
 8002c5c:	e014      	b.n	8002c88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fd fd71 	bl	8000744 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fd fd6d 	bl	8000744 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e09b      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	4b40      	ldr	r3, [pc, #256]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ee      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4a3b      	ldr	r2, [pc, #236]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8087 	beq.w	8002db2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca4:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d061      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d146      	bne.n	8002d46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb8:	4b33      	ldr	r3, [pc, #204]	@ (8002d88 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fd fd41 	bl	8000744 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fd fd3d 	bl	8000744 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e06d      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd8:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cec:	d108      	bne.n	8002d00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cee:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4921      	ldr	r1, [pc, #132]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d00:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a19      	ldr	r1, [r3, #32]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	430b      	orrs	r3, r1
 8002d12:	491b      	ldr	r1, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d18:	4b1b      	ldr	r3, [pc, #108]	@ (8002d88 <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fd fd11 	bl	8000744 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fd fd0d 	bl	8000744 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e03d      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d38:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x46a>
 8002d44:	e035      	b.n	8002db2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fd fcfa 	bl	8000744 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fd fcf6 	bl	8000744 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e026      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x498>
 8002d72:	e01e      	b.n	8002db2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e019      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
 8002d88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_OscConfig+0x500>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0d0      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d910      	bls.n	8002e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b67      	ldr	r3, [pc, #412]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 0207 	bic.w	r2, r3, #7
 8002dea:	4965      	ldr	r1, [pc, #404]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0b8      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e1c:	4b59      	ldr	r3, [pc, #356]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a58      	ldr	r2, [pc, #352]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e34:	4b53      	ldr	r3, [pc, #332]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b50      	ldr	r3, [pc, #320]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	494d      	ldr	r1, [pc, #308]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d040      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d115      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e07f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e073      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e06b      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9e:	4b39      	ldr	r3, [pc, #228]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f023 0203 	bic.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4936      	ldr	r1, [pc, #216]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb0:	f7fd fc48 	bl	8000744 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb8:	f7fd fc44 	bl	8000744 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e053      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	4b2d      	ldr	r3, [pc, #180]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 020c 	and.w	r2, r3, #12
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d1eb      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b27      	ldr	r3, [pc, #156]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d210      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	4922      	ldr	r1, [pc, #136]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e032      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4916      	ldr	r1, [pc, #88]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f3a:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	490e      	ldr	r1, [pc, #56]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f4e:	f000 f821 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	490a      	ldr	r1, [pc, #40]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	5ccb      	ldrb	r3, [r1, r3]
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <HAL_RCC_ClockConfig+0x1cc>)
 8002f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <HAL_RCC_ClockConfig+0x1d0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fba6 	bl	80006c0 <HAL_InitTick>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40021000 	.word	0x40021000
 8002f88:	08008880 	.word	0x08008880
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	20000004 	.word	0x20000004

08002f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x30>
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x36>
 8002fc2:	e027      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc4:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fc6:	613b      	str	r3, [r7, #16]
      break;
 8002fc8:	e027      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0c9b      	lsrs	r3, r3, #18
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fd4:	5cd3      	ldrb	r3, [r2, r3]
 8002fd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe2:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0c5b      	lsrs	r3, r3, #17
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	4a11      	ldr	r2, [pc, #68]	@ (8003034 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800302c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ff6:	fb03 f202 	mul.w	r2, r3, r2
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e004      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0c      	ldr	r2, [pc, #48]	@ (8003038 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	613b      	str	r3, [r7, #16]
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCC_GetSysClockFreq+0x98>)
 8003016:	613b      	str	r3, [r7, #16]
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	693b      	ldr	r3, [r7, #16]
}
 800301c:	4618      	mov	r0, r3
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	007a1200 	.word	0x007a1200
 8003030:	08008898 	.word	0x08008898
 8003034:	080088a8 	.word	0x080088a8
 8003038:	003d0900 	.word	0x003d0900

0800303c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b02      	ldr	r3, [pc, #8]	@ (800304c <HAL_RCC_GetHCLKFreq+0x10>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003054:	f7ff fff2 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	08008890 	.word	0x08008890

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800307c:	f7ff ffde 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0adb      	lsrs	r3, r3, #11
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	08008890 	.word	0x08008890

080030a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030a8:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <RCC_Delay+0x34>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <RCC_Delay+0x38>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0a5b      	lsrs	r3, r3, #9
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030bc:	bf00      	nop
  }
  while (Delay --);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1e5a      	subs	r2, r3, #1
 80030c2:	60fa      	str	r2, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f9      	bne.n	80030bc <RCC_Delay+0x1c>
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000000 	.word	0x20000000
 80030d8:	10624dd3 	.word	0x10624dd3

080030dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d07d      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fc:	4b4f      	ldr	r3, [pc, #316]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b4c      	ldr	r3, [pc, #304]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	4a4b      	ldr	r2, [pc, #300]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003112:	61d3      	str	r3, [r2, #28]
 8003114:	4b49      	ldr	r3, [pc, #292]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003130:	4b43      	ldr	r3, [pc, #268]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7fd fb02 	bl	8000744 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	e008      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fd fafe 	bl	8000744 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e06d      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b3a      	ldr	r3, [pc, #232]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003162:	4b36      	ldr	r3, [pc, #216]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d02e      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	429a      	cmp	r2, r3
 800317e:	d027      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003180:	4b2e      	ldr	r3, [pc, #184]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003188:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800318a:	4b2e      	ldr	r3, [pc, #184]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003190:	4b2c      	ldr	r3, [pc, #176]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003196:	4a29      	ldr	r2, [pc, #164]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d014      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fd facd 	bl	8000744 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fd fac9 	bl	8000744 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e036      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	4b1d      	ldr	r3, [pc, #116]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ee      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d0:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4917      	ldr	r1, [pc, #92]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b14      	ldr	r3, [pc, #80]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4a13      	ldr	r2, [pc, #76]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003200:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	490b      	ldr	r1, [pc, #44]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4904      	ldr	r1, [pc, #16]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
 8003244:	42420440 	.word	0x42420440

08003248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e041      	b.n	80032de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd f922 	bl	80004b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f000 fa74 	bl	8003774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d001      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e03a      	b.n	8003376 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a18      	ldr	r2, [pc, #96]	@ (8003380 <HAL_TIM_Base_Start_IT+0x98>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x58>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332a:	d009      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x58>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <HAL_TIM_Base_Start_IT+0x9c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x58>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a13      	ldr	r2, [pc, #76]	@ (8003388 <HAL_TIM_Base_Start_IT+0xa0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d111      	bne.n	8003364 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d010      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003362:	e007      	b.n	8003374 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800

0800338c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d122      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d11b      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0202 	mvn.w	r2, #2
 80033b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9b4 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f9a7 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f9b6 	bl	800374e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d122      	bne.n	800343c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d11b      	bne.n	800343c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0204 	mvn.w	r2, #4
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f98a 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f97d 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f98c 	bl	800374e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b08      	cmp	r3, #8
 8003448:	d122      	bne.n	8003490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d11b      	bne.n	8003490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0208 	mvn.w	r2, #8
 8003460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2204      	movs	r2, #4
 8003466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f960 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 800347c:	e005      	b.n	800348a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f953 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f962 	bl	800374e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b10      	cmp	r3, #16
 800349c:	d122      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d11b      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0210 	mvn.w	r2, #16
 80034b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2208      	movs	r2, #8
 80034ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f936 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f929 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f938 	bl	800374e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0201 	mvn.w	r2, #1
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fc ff72 	bl	80003f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	2b80      	cmp	r3, #128	@ 0x80
 800351c:	d10e      	bne.n	800353c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003528:	2b80      	cmp	r3, #128	@ 0x80
 800352a:	d107      	bne.n	800353c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa7b 	bl	8003a32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003554:	2b40      	cmp	r3, #64	@ 0x40
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8fc 	bl	8003760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b20      	cmp	r3, #32
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d107      	bne.n	8003594 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0220 	mvn.w	r2, #32
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa46 	bl	8003a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0b4      	b.n	8003722 <HAL_TIM_ConfigClockSource+0x186>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f0:	d03e      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0xd4>
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f6:	f200 8087 	bhi.w	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fe:	f000 8086 	beq.w	800370e <HAL_TIM_ConfigClockSource+0x172>
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003606:	d87f      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b70      	cmp	r3, #112	@ 0x70
 800360a:	d01a      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0xa6>
 800360c:	2b70      	cmp	r3, #112	@ 0x70
 800360e:	d87b      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b60      	cmp	r3, #96	@ 0x60
 8003612:	d050      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003614:	2b60      	cmp	r3, #96	@ 0x60
 8003616:	d877      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b50      	cmp	r3, #80	@ 0x50
 800361a:	d03c      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0xfa>
 800361c:	2b50      	cmp	r3, #80	@ 0x50
 800361e:	d873      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d058      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d86f      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b30      	cmp	r3, #48	@ 0x30
 800362a:	d064      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	2b30      	cmp	r3, #48	@ 0x30
 800362e:	d86b      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b20      	cmp	r3, #32
 8003632:	d060      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d867      	bhi.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d05c      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 800363c:	2b10      	cmp	r3, #16
 800363e:	d05a      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003640:	e062      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003652:	f000 f968 	bl	8003926 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	609a      	str	r2, [r3, #8]
      break;
 800366e:	e04f      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003680:	f000 f951 	bl	8003926 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003692:	609a      	str	r2, [r3, #8]
      break;
 8003694:	e03c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 f8c8 	bl	8003838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2150      	movs	r1, #80	@ 0x50
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f91f 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80036b4:	e02c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c2:	461a      	mov	r2, r3
 80036c4:	f000 f8e6 	bl	8003894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2160      	movs	r1, #96	@ 0x60
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f90f 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80036d4:	e01c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	461a      	mov	r2, r3
 80036e4:	f000 f8a8 	bl	8003838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2140      	movs	r1, #64	@ 0x40
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f8ff 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80036f4:	e00c      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f000 f8f6 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003706:	e003      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	e000      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800370e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
	...

08003774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a29      	ldr	r2, [pc, #164]	@ (800382c <TIM_Base_SetConfig+0xb8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00b      	beq.n	80037a4 <TIM_Base_SetConfig+0x30>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x30>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a26      	ldr	r2, [pc, #152]	@ (8003830 <TIM_Base_SetConfig+0xbc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x30>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a25      	ldr	r2, [pc, #148]	@ (8003834 <TIM_Base_SetConfig+0xc0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <TIM_Base_SetConfig+0xb8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_Base_SetConfig+0x62>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0x62>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a19      	ldr	r2, [pc, #100]	@ (8003830 <TIM_Base_SetConfig+0xbc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0x62>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a18      	ldr	r2, [pc, #96]	@ (8003834 <TIM_Base_SetConfig+0xc0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a07      	ldr	r2, [pc, #28]	@ (800382c <TIM_Base_SetConfig+0xb8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d103      	bne.n	800381c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	615a      	str	r2, [r3, #20]
}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800

08003838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 030a 	bic.w	r3, r3, #10
 8003874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0210 	bic.w	r2, r3, #16
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	031b      	lsls	r3, r3, #12
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	f043 0307 	orr.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	021a      	lsls	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	431a      	orrs	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4313      	orrs	r3, r2
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	609a      	str	r2, [r3, #8]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003978:	2302      	movs	r3, #2
 800397a:	e046      	b.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a16      	ldr	r2, [pc, #88]	@ (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c8:	d009      	beq.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a10      	ldr	r2, [pc, #64]	@ (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10c      	bne.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800

08003a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e042      	b.n	8003adc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fc fd48 	bl	8000500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	@ 0x24
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fc7f 	bl	800438c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_UART_IRQHandler+0x66>
 8003b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fb63 	bl	800420e <UART_Receive_IT>
      return;
 8003b48:	e25b      	b.n	8004002 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80de 	beq.w	8003d10 <HAL_UART_IRQHandler+0x22c>
 8003b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80d1 	beq.w	8003d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_UART_IRQHandler+0xae>
 8003b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_UART_IRQHandler+0xd2>
 8003b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f043 0202 	orr.w	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_UART_IRQHandler+0xf6>
 8003bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d011      	beq.n	8003c0a <HAL_UART_IRQHandler+0x126>
 8003be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	f043 0208 	orr.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 81f2 	beq.w	8003ff8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_UART_IRQHandler+0x14e>
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 faee 	bl	800420e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_UART_IRQHandler+0x17a>
 8003c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d04f      	beq.n	8003cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9f8 	bl	8004054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d041      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1d9      	bne.n	8003c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d013      	beq.n	8003cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	4a7e      	ldr	r2, [pc, #504]	@ (8003ec4 <HAL_UART_IRQHandler+0x3e0>)
 8003ccc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fe88 	bl	80009e8 <HAL_DMA_Abort_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e00e      	b.n	8003d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f99c 	bl	800402c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e00a      	b.n	8003d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f998 	bl	800402c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e006      	b.n	8003d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f994 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d0a:	e175      	b.n	8003ff8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	bf00      	nop
    return;
 8003d0e:	e173      	b.n	8003ff8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f040 814f 	bne.w	8003fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8148 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8141 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80b6 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8145 	beq.w	8003ffc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f080 813e 	bcs.w	8003ffc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	f000 8088 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dc0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1d9      	bne.n	8003d94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e04:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e08:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e1      	bne.n	8003de0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3314      	adds	r3, #20
 8003e22:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e40:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e3      	bne.n	8003e1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e88:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e3      	bne.n	8003e62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fd67 	bl	8000972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4619      	mov	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8bf 	bl	800403e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec0:	e09c      	b.n	8003ffc <HAL_UART_IRQHandler+0x518>
 8003ec2:	bf00      	nop
 8003ec4:	08004119 	.word	0x08004119
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 808e 	beq.w	8004000 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8089 	beq.w	8004000 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e3      	bne.n	8003eee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	623b      	str	r3, [r7, #32]
   return(result);
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e3      	bne.n	8003f26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0310 	bic.w	r3, r3, #16
 8003f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f90:	61fa      	str	r2, [r7, #28]
 8003f92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e3      	bne.n	8003f6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f844 	bl	800403e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fb6:	e023      	b.n	8004000 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x4f4>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8b5 	bl	8004140 <UART_Transmit_IT>
    return;
 8003fd6:	e014      	b.n	8004002 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <HAL_UART_IRQHandler+0x51e>
 8003fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8f4 	bl	80041de <UART_EndTransmit_IT>
    return;
 8003ff6:	e004      	b.n	8004002 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_UART_IRQHandler+0x51e>
      return;
 8004000:	bf00      	nop
  }
}
 8004002:	37e8      	adds	r7, #232	@ 0xe8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b095      	sub	sp, #84	@ 0x54
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800407c:	643a      	str	r2, [r7, #64]	@ 0x40
 800407e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e5      	bne.n	8004090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d119      	bne.n	8004100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	60bb      	str	r3, [r7, #8]
   return(result);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f023 0310 	bic.w	r3, r3, #16
 80040e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ec:	61ba      	str	r2, [r7, #24]
 80040ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	613b      	str	r3, [r7, #16]
   return(result);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e5      	bne.n	80040cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800410e:	bf00      	nop
 8004110:	3754      	adds	r7, #84	@ 0x54
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff ff7a 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b21      	cmp	r3, #33	@ 0x21
 8004152:	d13e      	bne.n	80041d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415c:	d114      	bne.n	8004188 <UART_Transmit_IT+0x48>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d110      	bne.n	8004188 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800417a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]
 8004186:	e008      	b.n	800419a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	1c59      	adds	r1, r3, #1
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6211      	str	r1, [r2, #32]
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4619      	mov	r1, r3
 80041a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
  }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff02 	bl	8004008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08c      	sub	sp, #48	@ 0x30
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b22      	cmp	r3, #34	@ 0x22
 8004220:	f040 80ae 	bne.w	8004380 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800422c:	d117      	bne.n	800425e <UART_Receive_IT+0x50>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d113      	bne.n	800425e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424c:	b29a      	uxth	r2, r3
 800424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	@ 0x28
 800425c:	e026      	b.n	80042ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004270:	d007      	beq.n	8004282 <UART_Receive_IT+0x74>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <UART_Receive_IT+0x82>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e008      	b.n	80042a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800429c:	b2da      	uxtb	r2, r3
 800429e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4619      	mov	r1, r3
 80042ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d15d      	bne.n	800437c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0220 	bic.w	r2, r2, #32
 80042ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	2b01      	cmp	r3, #1
 8004304:	d135      	bne.n	8004372 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	613b      	str	r3, [r7, #16]
   return(result);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432c:	623a      	str	r2, [r7, #32]
 800432e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	69f9      	ldr	r1, [r7, #28]
 8004332:	6a3a      	ldr	r2, [r7, #32]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	61bb      	str	r3, [r7, #24]
   return(result);
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e5      	bne.n	800430c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d10a      	bne.n	8004364 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff fe67 	bl	800403e <HAL_UARTEx_RxEventCallback>
 8004370:	e002      	b.n	8004378 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fe51 	bl	800401a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e002      	b.n	8004382 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e000      	b.n	8004382 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	3730      	adds	r7, #48	@ 0x30
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043c6:	f023 030c 	bic.w	r3, r3, #12
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2c      	ldr	r2, [pc, #176]	@ (80044a0 <UART_SetConfig+0x114>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d103      	bne.n	80043fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7fe fe40 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	e002      	b.n	8004402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe fe28 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009a      	lsls	r2, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	4a22      	ldr	r2, [pc, #136]	@ (80044a4 <UART_SetConfig+0x118>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	0119      	lsls	r1, r3, #4
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009a      	lsls	r2, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fbb2 f2f3 	udiv	r2, r2, r3
 8004438:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <UART_SetConfig+0x118>)
 800443a:	fba3 0302 	umull	r0, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2064      	movs	r0, #100	@ 0x64
 8004442:	fb00 f303 	mul.w	r3, r0, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	@ 0x32
 800444c:	4a15      	ldr	r2, [pc, #84]	@ (80044a4 <UART_SetConfig+0x118>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004458:	4419      	add	r1, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009a      	lsls	r2, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <UART_SetConfig+0x118>)
 8004472:	fba3 0302 	umull	r0, r3, r3, r2
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2064      	movs	r0, #100	@ 0x64
 800447a:	fb00 f303 	mul.w	r3, r0, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	3332      	adds	r3, #50	@ 0x32
 8004484:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <UART_SetConfig+0x118>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	f003 020f 	and.w	r2, r3, #15
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	440a      	add	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40013800 	.word	0x40013800
 80044a4:	51eb851f 	.word	0x51eb851f

080044a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044a8:	b084      	sub	sp, #16
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	f107 0014 	add.w	r0, r7, #20
 80044b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	b004      	add	sp, #16
 80044c6:	4770      	bx	lr

080044c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044d8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044fc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004500:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	b29b      	uxth	r3, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	4013      	ands	r3, r2
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004540:	b084      	sub	sp, #16
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	f107 0014 	add.w	r0, r7, #20
 800454e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	b004      	add	sp, #16
 800457e:	4770      	bx	lr

08004580 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004580:	b480      	push	{r7}
 8004582:	b09d      	sub	sp, #116	@ 0x74
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80045a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d81f      	bhi.n	80045f2 <USB_ActivateEndpoint+0x72>
 80045b2:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <USB_ActivateEndpoint+0x38>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	080045fb 	.word	0x080045fb
 80045c4:	080045d7 	.word	0x080045d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045d4:	e012      	b.n	80045fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045da:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80045de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045e2:	e00b      	b.n	80045fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045f0:	e004      	b.n	80045fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80045f8:	e000      	b.n	80045fc <USB_ActivateEndpoint+0x7c>
      break;
 80045fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800460a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800460e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800461a:	b29b      	uxth	r3, r3
 800461c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004634:	b29b      	uxth	r3, r3
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800464e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800465a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	7b1b      	ldrb	r3, [r3, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 8178 	bne.w	800495c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8084 	beq.w	800477e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004680:	b29b      	uxth	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	011a      	lsls	r2, r3, #4
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	88db      	ldrh	r3, [r3, #6]
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	827b      	strh	r3, [r7, #18]
 80046b8:	8a7b      	ldrh	r3, [r7, #18]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01b      	beq.n	80046fa <USB_ActivateEndpoint+0x17a>
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d8:	823b      	strh	r3, [r7, #16]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	441a      	add	r2, r3
 80046e4:	8a3b      	ldrh	r3, [r7, #16]
 80046e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	78db      	ldrb	r3, [r3, #3]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d020      	beq.n	8004744 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004718:	81bb      	strh	r3, [r7, #12]
 800471a:	89bb      	ldrh	r3, [r7, #12]
 800471c:	f083 0320 	eor.w	r3, r3, #32
 8004720:	81bb      	strh	r3, [r7, #12]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	89bb      	ldrh	r3, [r7, #12]
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800473a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]
 8004742:	e2d5      	b.n	8004cf0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475a:	81fb      	strh	r3, [r7, #14]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	89fb      	ldrh	r3, [r7, #14]
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
 800477c:	e2b8      	b.n	8004cf0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	633b      	str	r3, [r7, #48]	@ 0x30
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	4413      	add	r3, r2
 8004790:	633b      	str	r3, [r7, #48]	@ 0x30
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	011a      	lsls	r2, r3, #4
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	4413      	add	r3, r2
 800479c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	88db      	ldrh	r3, [r3, #6]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	4413      	add	r3, r2
 80047c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	011a      	lsls	r2, r3, #4
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	4413      	add	r3, r2
 80047d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80047ec:	d91d      	bls.n	800482a <USB_ActivateEndpoint+0x2aa>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <USB_ActivateEndpoint+0x288>
 8004802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004804:	3b01      	subs	r3, #1
 8004806:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004810:	b29b      	uxth	r3, r3
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	b29b      	uxth	r3, r3
 8004816:	4313      	orrs	r3, r2
 8004818:	b29b      	uxth	r3, r3
 800481a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004822:	b29a      	uxth	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e026      	b.n	8004878 <USB_ActivateEndpoint+0x2f8>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <USB_ActivateEndpoint+0x2c8>
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004840:	b29a      	uxth	r2, r3
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	e017      	b.n	8004878 <USB_ActivateEndpoint+0x2f8>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <USB_ActivateEndpoint+0x2e2>
 800485c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800485e:	3301      	adds	r3, #1
 8004860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29a      	uxth	r2, r3
 8004868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
 8004870:	4313      	orrs	r3, r2
 8004872:	b29a      	uxth	r2, r3
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004886:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01b      	beq.n	80048c8 <USB_ActivateEndpoint+0x348>
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a6:	843b      	strh	r3, [r7, #32]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	8c3b      	ldrh	r3, [r7, #32]
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d124      	bne.n	800491a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e6:	83bb      	strh	r3, [r7, #28]
 80048e8:	8bbb      	ldrh	r3, [r7, #28]
 80048ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048ee:	83bb      	strh	r3, [r7, #28]
 80048f0:	8bbb      	ldrh	r3, [r7, #28]
 80048f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048f6:	83bb      	strh	r3, [r7, #28]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	8bbb      	ldrh	r3, [r7, #28]
 8004904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004914:	b29b      	uxth	r3, r3
 8004916:	8013      	strh	r3, [r2, #0]
 8004918:	e1ea      	b.n	8004cf0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800492c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004930:	83fb      	strh	r3, [r7, #30]
 8004932:	8bfb      	ldrh	r3, [r7, #30]
 8004934:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004938:	83fb      	strh	r3, [r7, #30]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	8bfb      	ldrh	r3, [r7, #30]
 8004946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800494a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800494e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004956:	b29b      	uxth	r3, r3
 8004958:	8013      	strh	r3, [r2, #0]
 800495a:	e1c9      	b.n	8004cf0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	78db      	ldrb	r3, [r3, #3]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d11e      	bne.n	80049a2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800498c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004994:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]
 80049a0:	e01d      	b.n	80049de <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80049b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ee:	4413      	add	r3, r2
 80049f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	011a      	lsls	r2, r3, #4
 80049f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	891b      	ldrh	r3, [r3, #8]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a22:	4413      	add	r3, r2
 8004a24:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	011a      	lsls	r2, r3, #4
 8004a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004a34:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	895b      	ldrh	r3, [r3, #10]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a44:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 8093 	bne.w	8004b76 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004a60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <USB_ActivateEndpoint+0x524>
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004ab2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <USB_ActivateEndpoint+0x574>
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b0c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b12:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b1a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b52:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
 8004b74:	e0bc      	b.n	8004cf0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01d      	beq.n	8004bce <USB_ActivateEndpoint+0x64e>
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004bde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01d      	beq.n	8004c26 <USB_ActivateEndpoint+0x6a6>
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c00:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	78db      	ldrb	r3, [r3, #3]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d024      	beq.n	8004c78 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c44:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c4c:	f083 0320 	eor.w	r3, r3, #32
 8004c50:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cf0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3774      	adds	r7, #116	@ 0x74
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop

08004d00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b08d      	sub	sp, #52	@ 0x34
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	7b1b      	ldrb	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 808e 	bne.w	8004e30 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d044      	beq.n	8004da6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	81bb      	strh	r3, [r7, #12]
 8004d2a:	89bb      	ldrh	r3, [r7, #12]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01b      	beq.n	8004d6c <USB_DeactivateEndpoint+0x6c>
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4a:	817b      	strh	r3, [r7, #10]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	897b      	ldrh	r3, [r7, #10]
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d82:	813b      	strh	r3, [r7, #8]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	893b      	ldrh	r3, [r7, #8]
 8004d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	8013      	strh	r3, [r2, #0]
 8004da4:	e192      	b.n	80050cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	827b      	strh	r3, [r7, #18]
 8004db4:	8a7b      	ldrh	r3, [r7, #18]
 8004db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01b      	beq.n	8004df6 <USB_DeactivateEndpoint+0xf6>
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd4:	823b      	strh	r3, [r7, #16]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	441a      	add	r2, r3
 8004de0:	8a3b      	ldrh	r3, [r7, #16]
 8004de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0c:	81fb      	strh	r3, [r7, #14]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	89fb      	ldrh	r3, [r7, #14]
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]
 8004e2e:	e14d      	b.n	80050cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 80a5 	bne.w	8004f84 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	843b      	strh	r3, [r7, #32]
 8004e48:	8c3b      	ldrh	r3, [r7, #32]
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01b      	beq.n	8004e8a <USB_DeactivateEndpoint+0x18a>
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e68:	83fb      	strh	r3, [r7, #30]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	8bfb      	ldrh	r3, [r7, #30]
 8004e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	83bb      	strh	r3, [r7, #28]
 8004e98:	8bbb      	ldrh	r3, [r7, #28]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01b      	beq.n	8004eda <USB_DeactivateEndpoint+0x1da>
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb8:	837b      	strh	r3, [r7, #26]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	8b7b      	ldrh	r3, [r7, #26]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef0:	833b      	strh	r3, [r7, #24]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	8b3b      	ldrh	r3, [r7, #24]
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f28:	82fb      	strh	r3, [r7, #22]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	8afb      	ldrh	r3, [r7, #22]
 8004f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f60:	82bb      	strh	r3, [r7, #20]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	8abb      	ldrh	r3, [r7, #20]
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]
 8004f82:	e0a3      	b.n	80050cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <USB_DeactivateEndpoint+0x2d4>
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004fe2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <USB_DeactivateEndpoint+0x324>
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005002:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800501c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800504c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005072:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800508c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3734      	adds	r7, #52	@ 0x34
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b0c2      	sub	sp, #264	@ 0x108
 80050dc:	af00      	add	r7, sp, #0
 80050de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050e6:	6018      	str	r0, [r3, #0]
 80050e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	f040 86b7 	bne.w	8005e72 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	429a      	cmp	r2, r3
 800511e:	d908      	bls.n	8005132 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005130:	e007      	b.n	8005142 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	7b1b      	ldrb	r3, [r3, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d13a      	bne.n	80051c8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6959      	ldr	r1, [r3, #20]
 800515e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	88da      	ldrh	r2, [r3, #6]
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516e:	b29b      	uxth	r3, r3
 8005170:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005174:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005178:	6800      	ldr	r0, [r0, #0]
 800517a:	f001 fc9c 	bl	8006ab6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800517e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005198:	b29b      	uxth	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	011a      	lsls	r2, r3, #4
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	f000 be1f 	b.w	8005e06 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	78db      	ldrb	r3, [r3, #3]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f040 8462 	bne.w	8005a9e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	f240 83df 	bls.w	80059b6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	441a      	add	r2, r3
 800523c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005248:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800524c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005250:	b29b      	uxth	r3, r3
 8005252:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005264:	1ad2      	subs	r2, r2, r3
 8005266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 81c7 	beq.w	8005628 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800529a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d177      	bne.n	80053a6 <USB_EPStartXfer+0x2ce>
 80052b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	4413      	add	r3, r2
 80052d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	011a      	lsls	r2, r3, #4
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	4413      	add	r3, r2
 80052ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005306:	2b3e      	cmp	r3, #62	@ 0x3e
 8005308:	d921      	bls.n	800534e <USB_EPStartXfer+0x276>
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <USB_EPStartXfer+0x252>
 8005320:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005324:	3b01      	subs	r3, #1
 8005326:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29a      	uxth	r2, r3
 8005330:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005334:	b29b      	uxth	r3, r3
 8005336:	029b      	lsls	r3, r3, #10
 8005338:	b29b      	uxth	r3, r3
 800533a:	4313      	orrs	r3, r2
 800533c:	b29b      	uxth	r3, r3
 800533e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005346:	b29a      	uxth	r2, r3
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	e050      	b.n	80053f0 <USB_EPStartXfer+0x318>
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <USB_EPStartXfer+0x294>
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005364:	b29a      	uxth	r2, r3
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	e041      	b.n	80053f0 <USB_EPStartXfer+0x318>
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <USB_EPStartXfer+0x2b4>
 8005382:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005386:	3301      	adds	r3, #1
 8005388:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29a      	uxth	r2, r3
 8005392:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005396:	b29b      	uxth	r3, r3
 8005398:	029b      	lsls	r3, r3, #10
 800539a:	b29b      	uxth	r3, r3
 800539c:	4313      	orrs	r3, r2
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e024      	b.n	80053f0 <USB_EPStartXfer+0x318>
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d11c      	bne.n	80053f0 <USB_EPStartXfer+0x318>
 80053b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	4413      	add	r3, r2
 80053cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	011a      	lsls	r2, r3, #4
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	4413      	add	r3, r2
 80053e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	895b      	ldrh	r3, [r3, #10]
 80053fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6959      	ldr	r1, [r3, #20]
 800540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005410:	b29b      	uxth	r3, r3
 8005412:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005416:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800541a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	f001 fb49 	bl	8006ab6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005434:	441a      	add	r2, r3
 8005436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d90f      	bls.n	800547e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	621a      	str	r2, [r3, #32]
 800547c:	e00e      	b.n	800549c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800547e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800548e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2200      	movs	r2, #0
 800549a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800549c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d177      	bne.n	800559c <USB_EPStartXfer+0x4c4>
 80054ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	011a      	lsls	r2, r3, #4
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	4413      	add	r3, r2
 80054e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80054fe:	d921      	bls.n	8005544 <USB_EPStartXfer+0x46c>
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2b00      	cmp	r3, #0
 8005514:	d104      	bne.n	8005520 <USB_EPStartXfer+0x448>
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800551a:	3b01      	subs	r3, #1
 800551c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29a      	uxth	r2, r3
 8005526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800552a:	b29b      	uxth	r3, r3
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	b29b      	uxth	r3, r3
 8005530:	4313      	orrs	r3, r2
 8005532:	b29b      	uxth	r3, r3
 8005534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553c:	b29a      	uxth	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e056      	b.n	80055f2 <USB_EPStartXfer+0x51a>
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <USB_EPStartXfer+0x48a>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555a:	b29a      	uxth	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	801a      	strh	r2, [r3, #0]
 8005560:	e047      	b.n	80055f2 <USB_EPStartXfer+0x51a>
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800556c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <USB_EPStartXfer+0x4aa>
 8005578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557c:	3301      	adds	r3, #1
 800557e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800558c:	b29b      	uxth	r3, r3
 800558e:	029b      	lsls	r3, r3, #10
 8005590:	b29b      	uxth	r3, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	b29a      	uxth	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e02a      	b.n	80055f2 <USB_EPStartXfer+0x51a>
 800559c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d122      	bne.n	80055f2 <USB_EPStartXfer+0x51a>
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	4413      	add	r3, r2
 80055ce:	623b      	str	r3, [r7, #32]
 80055d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	011a      	lsls	r2, r3, #4
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	4413      	add	r3, r2
 80055e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	891b      	ldrh	r3, [r3, #8]
 80055fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6959      	ldr	r1, [r3, #20]
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	b29b      	uxth	r3, r3
 8005614:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005618:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800561c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005620:	6800      	ldr	r0, [r0, #0]
 8005622:	f001 fa48 	bl	8006ab6 <USB_WritePMA>
 8005626:	e3ee      	b.n	8005e06 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d177      	bne.n	8005728 <USB_EPStartXfer+0x650>
 8005638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005658:	4413      	add	r3, r2
 800565a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800565c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800566c:	4413      	add	r3, r2
 800566e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005672:	647b      	str	r3, [r7, #68]	@ 0x44
 8005674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800567e:	b29a      	uxth	r2, r3
 8005680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005688:	2b3e      	cmp	r3, #62	@ 0x3e
 800568a:	d921      	bls.n	80056d0 <USB_EPStartXfer+0x5f8>
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <USB_EPStartXfer+0x5d4>
 80056a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056a6:	3b01      	subs	r3, #1
 80056a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	029b      	lsls	r3, r3, #10
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	4313      	orrs	r3, r2
 80056be:	b29b      	uxth	r3, r3
 80056c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	e056      	b.n	800577e <USB_EPStartXfer+0x6a6>
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <USB_EPStartXfer+0x616>
 80056d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	e047      	b.n	800577e <USB_EPStartXfer+0x6a6>
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <USB_EPStartXfer+0x636>
 8005704:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005708:	3301      	adds	r3, #1
 800570a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800570e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29a      	uxth	r2, r3
 8005714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005718:	b29b      	uxth	r3, r3
 800571a:	029b      	lsls	r3, r3, #10
 800571c:	b29b      	uxth	r3, r3
 800571e:	4313      	orrs	r3, r2
 8005720:	b29a      	uxth	r2, r3
 8005722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	e02a      	b.n	800577e <USB_EPStartXfer+0x6a6>
 8005728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d122      	bne.n	800577e <USB_EPStartXfer+0x6a6>
 8005738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	653b      	str	r3, [r7, #80]	@ 0x50
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005758:	4413      	add	r3, r2
 800575a:	653b      	str	r3, [r7, #80]	@ 0x50
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	011a      	lsls	r2, r3, #4
 800576a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576c:	4413      	add	r3, r2
 800576e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	b29a      	uxth	r2, r3
 800577a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800577c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800577e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	891b      	ldrh	r3, [r3, #8]
 800578a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800578e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6959      	ldr	r1, [r3, #20]
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f001 f982 	bl	8006ab6 <USB_WritePMA>
            ep->xfer_buff += len;
 80057b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c2:	441a      	add	r2, r3
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d90f      	bls.n	800580c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	621a      	str	r2, [r3, #32]
 800580a:	e00e      	b.n	800582a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800580c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800581c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800582a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	643b      	str	r3, [r7, #64]	@ 0x40
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d177      	bne.n	8005936 <USB_EPStartXfer+0x85e>
 8005846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005856:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005860:	b29b      	uxth	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	4413      	add	r3, r2
 8005868:	63bb      	str	r3, [r7, #56]	@ 0x38
 800586a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	011a      	lsls	r2, r3, #4
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	4413      	add	r3, r2
 800587c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005880:	637b      	str	r3, [r7, #52]	@ 0x34
 8005882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800588c:	b29a      	uxth	r2, r3
 800588e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005896:	2b3e      	cmp	r3, #62	@ 0x3e
 8005898:	d921      	bls.n	80058de <USB_EPStartXfer+0x806>
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <USB_EPStartXfer+0x7e2>
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	3b01      	subs	r3, #1
 80058b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e050      	b.n	8005980 <USB_EPStartXfer+0x8a8>
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <USB_EPStartXfer+0x824>
 80058e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	e041      	b.n	8005980 <USB_EPStartXfer+0x8a8>
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005900:	085b      	lsrs	r3, r3, #1
 8005902:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <USB_EPStartXfer+0x844>
 8005912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005916:	3301      	adds	r3, #1
 8005918:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800591c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29a      	uxth	r2, r3
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005926:	b29b      	uxth	r3, r3
 8005928:	029b      	lsls	r3, r3, #10
 800592a:	b29b      	uxth	r3, r3
 800592c:	4313      	orrs	r3, r2
 800592e:	b29a      	uxth	r2, r3
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	e024      	b.n	8005980 <USB_EPStartXfer+0x8a8>
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d11c      	bne.n	8005980 <USB_EPStartXfer+0x8a8>
 8005946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005954:	b29b      	uxth	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800595a:	4413      	add	r3, r2
 800595c:	643b      	str	r3, [r7, #64]	@ 0x40
 800595e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	011a      	lsls	r2, r3, #4
 800596c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800596e:	4413      	add	r3, r2
 8005970:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597a:	b29a      	uxth	r2, r3
 800597c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	895b      	ldrh	r3, [r3, #10]
 800598c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6959      	ldr	r1, [r3, #20]
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059ae:	6800      	ldr	r0, [r0, #0]
 80059b0:	f001 f881 	bl	8006ab6 <USB_WritePMA>
 80059b4:	e227      	b.n	8005e06 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80059e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ec:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80059f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a42:	4413      	add	r3, r2
 8005a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	011a      	lsls	r2, r3, #4
 8005a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a56:	4413      	add	r3, r2
 8005a58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	891b      	ldrh	r3, [r3, #8]
 8005a74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6959      	ldr	r1, [r3, #20]
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a8e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a92:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	f001 f80d 	bl	8006ab6 <USB_WritePMA>
 8005a9c:	e1b3      	b.n	8005e06 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80c6 	beq.w	8005c70 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	673b      	str	r3, [r7, #112]	@ 0x70
 8005af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d177      	bne.n	8005bf0 <USB_EPStartXfer+0xb18>
 8005b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b20:	4413      	add	r3, r2
 8005b22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	011a      	lsls	r2, r3, #4
 8005b32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b34:	4413      	add	r3, r2
 8005b36:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b52:	d921      	bls.n	8005b98 <USB_EPStartXfer+0xac0>
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <USB_EPStartXfer+0xa9c>
 8005b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	4313      	orrs	r3, r2
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e050      	b.n	8005c3a <USB_EPStartXfer+0xb62>
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <USB_EPStartXfer+0xade>
 8005ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e041      	b.n	8005c3a <USB_EPStartXfer+0xb62>
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <USB_EPStartXfer+0xafe>
 8005bcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	029b      	lsls	r3, r3, #10
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	4313      	orrs	r3, r2
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e024      	b.n	8005c3a <USB_EPStartXfer+0xb62>
 8005bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d11c      	bne.n	8005c3a <USB_EPStartXfer+0xb62>
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c14:	4413      	add	r3, r2
 8005c16:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	011a      	lsls	r2, r3, #4
 8005c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	895b      	ldrh	r3, [r3, #10]
 8005c46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6959      	ldr	r1, [r3, #20]
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c68:	6800      	ldr	r0, [r0, #0]
 8005c6a:	f000 ff24 	bl	8006ab6 <USB_WritePMA>
 8005c6e:	e0ca      	b.n	8005e06 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d177      	bne.n	8005d70 <USB_EPStartXfer+0xc98>
 8005c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ca0:	4413      	add	r3, r2
 8005ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	011a      	lsls	r2, r3, #4
 8005cb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cd2:	d921      	bls.n	8005d18 <USB_EPStartXfer+0xc40>
 8005cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <USB_EPStartXfer+0xc1c>
 8005cea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	029b      	lsls	r3, r3, #10
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4313      	orrs	r3, r2
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e05c      	b.n	8005dd2 <USB_EPStartXfer+0xcfa>
 8005d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <USB_EPStartXfer+0xc5e>
 8005d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	e04d      	b.n	8005dd2 <USB_EPStartXfer+0xcfa>
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <USB_EPStartXfer+0xc7e>
 8005d4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d50:	3301      	adds	r3, #1
 8005d52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e030      	b.n	8005dd2 <USB_EPStartXfer+0xcfa>
 8005d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d128      	bne.n	8005dd2 <USB_EPStartXfer+0xcfa>
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005da4:	4413      	add	r3, r2
 8005da6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	011a      	lsls	r2, r3, #4
 8005db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	891b      	ldrh	r3, [r3, #8]
 8005dde:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6959      	ldr	r1, [r3, #20]
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005df8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dfc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e00:	6800      	ldr	r0, [r0, #0]
 8005e02:	f000 fe58 	bl	8006ab6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2c:	817b      	strh	r3, [r7, #10]
 8005e2e:	897b      	ldrh	r3, [r7, #10]
 8005e30:	f083 0310 	eor.w	r3, r3, #16
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	897b      	ldrh	r3, [r7, #10]
 8005e38:	f083 0320 	eor.w	r3, r3, #32
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	897b      	ldrh	r3, [r7, #10]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]
 8005e6e:	f000 bcde 	b.w	800682e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	7b1b      	ldrb	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 80bb 	bne.w	8005ffa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d917      	bls.n	8005ed0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	1ad2      	subs	r2, r2, r3
 8005ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	619a      	str	r2, [r3, #24]
 8005ece:	e00e      	b.n	8005eee <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f12:	4413      	add	r3, r2
 8005f14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	011a      	lsls	r2, r3, #4
 8005f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f4e:	d924      	bls.n	8005f9a <USB_EPStartXfer+0xec2>
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <USB_EPStartXfer+0xe98>
 8005f66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4313      	orrs	r3, r2
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	f000 bc10 	b.w	80067ba <USB_EPStartXfer+0x16e2>
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10c      	bne.n	8005fbc <USB_EPStartXfer+0xee4>
 8005fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	e3fe      	b.n	80067ba <USB_EPStartXfer+0x16e2>
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <USB_EPStartXfer+0xf04>
 8005fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e3df      	b.n	80067ba <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	78db      	ldrb	r3, [r3, #3]
 8006006:	2b02      	cmp	r3, #2
 8006008:	f040 8218 	bne.w	800643c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 809d 	bne.w	8006158 <USB_EPStartXfer+0x1080>
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800602c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006042:	4413      	add	r3, r2
 8006044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	011a      	lsls	r2, r3, #4
 8006056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800605a:	4413      	add	r3, r2
 800605c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006070:	b29a      	uxth	r2, r3
 8006072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b3e      	cmp	r3, #62	@ 0x3e
 8006086:	d92b      	bls.n	80060e0 <USB_EPStartXfer+0x1008>
 8006088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800609a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <USB_EPStartXfer+0xfe0>
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	3b01      	subs	r3, #1
 80060b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	029b      	lsls	r3, r3, #10
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4313      	orrs	r3, r2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	e070      	b.n	80061c2 <USB_EPStartXfer+0x10ea>
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10c      	bne.n	800610a <USB_EPStartXfer+0x1032>
 80060f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006100:	b29a      	uxth	r2, r3
 8006102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e05b      	b.n	80061c2 <USB_EPStartXfer+0x10ea>
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d004      	beq.n	800613a <USB_EPStartXfer+0x1062>
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006134:	3301      	adds	r3, #1
 8006136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800613a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29a      	uxth	r2, r3
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006146:	b29b      	uxth	r3, r3
 8006148:	029b      	lsls	r3, r3, #10
 800614a:	b29b      	uxth	r3, r3
 800614c:	4313      	orrs	r3, r2
 800614e:	b29a      	uxth	r2, r3
 8006150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e034      	b.n	80061c2 <USB_EPStartXfer+0x10ea>
 8006158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d12c      	bne.n	80061c2 <USB_EPStartXfer+0x10ea>
 8006168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006184:	b29b      	uxth	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800618c:	4413      	add	r3, r2
 800618e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	011a      	lsls	r2, r3, #4
 80061a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80061a4:	4413      	add	r3, r2
 80061a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 809d 	bne.w	800631c <USB_EPStartXfer+0x1244>
 80061e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006206:	4413      	add	r3, r2
 8006208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	011a      	lsls	r2, r3, #4
 800621a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800621e:	4413      	add	r3, r2
 8006220:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b3e      	cmp	r3, #62	@ 0x3e
 800624a:	d92b      	bls.n	80062a4 <USB_EPStartXfer+0x11cc>
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800625e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <USB_EPStartXfer+0x11a4>
 8006272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006276:	3b01      	subs	r3, #1
 8006278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800627c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29b      	uxth	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	b29b      	uxth	r3, r3
 8006292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e069      	b.n	8006378 <USB_EPStartXfer+0x12a0>
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10c      	bne.n	80062ce <USB_EPStartXfer+0x11f6>
 80062b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e054      	b.n	8006378 <USB_EPStartXfer+0x12a0>
 80062ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <USB_EPStartXfer+0x1226>
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f8:	3301      	adds	r3, #1
 80062fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29a      	uxth	r2, r3
 8006306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29b      	uxth	r3, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	b29a      	uxth	r2, r3
 8006314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e02d      	b.n	8006378 <USB_EPStartXfer+0x12a0>
 800631c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d125      	bne.n	8006378 <USB_EPStartXfer+0x12a0>
 800632c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633a:	b29b      	uxth	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006342:	4413      	add	r3, r2
 8006344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	011a      	lsls	r2, r3, #4
 8006356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800635a:	4413      	add	r3, r2
 800635c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006360:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	b29a      	uxth	r2, r3
 8006372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006376:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8218 	beq.w	80067ba <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800638a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <USB_EPStartXfer+0x12ea>
 80063b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f040 81f5 	bne.w	80067ba <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 81ee 	bne.w	80067ba <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006404:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	441a      	add	r2, r3
 8006422:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800642a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800642e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006432:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006436:	b29b      	uxth	r3, r3
 8006438:	8013      	strh	r3, [r2, #0]
 800643a:	e1be      	b.n	80067ba <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	78db      	ldrb	r3, [r3, #3]
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 81b4 	bne.w	80067b6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	429a      	cmp	r2, r3
 8006468:	d917      	bls.n	800649a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800646a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	619a      	str	r2, [r3, #24]
 8006498:	e00e      	b.n	80064b8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80064aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2200      	movs	r2, #0
 80064b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 8085 	bne.w	80065d4 <USB_EPStartXfer+0x14fc>
 80064ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064ee:	4413      	add	r3, r2
 80064f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	011a      	lsls	r2, r3, #4
 8006502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006506:	4413      	add	r3, r2
 8006508:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800650c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800651c:	b29a      	uxth	r2, r3
 800651e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006528:	2b3e      	cmp	r3, #62	@ 0x3e
 800652a:	d923      	bls.n	8006574 <USB_EPStartXfer+0x149c>
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <USB_EPStartXfer+0x1474>
 8006542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006546:	3b01      	subs	r3, #1
 8006548:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800654c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29a      	uxth	r2, r3
 8006554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006558:	b29b      	uxth	r3, r3
 800655a:	029b      	lsls	r3, r3, #10
 800655c:	b29b      	uxth	r3, r3
 800655e:	4313      	orrs	r3, r2
 8006560:	b29b      	uxth	r3, r3
 8006562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e060      	b.n	8006636 <USB_EPStartXfer+0x155e>
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10c      	bne.n	8006596 <USB_EPStartXfer+0x14be>
 800657c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658c:	b29a      	uxth	r2, r3
 800658e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e04f      	b.n	8006636 <USB_EPStartXfer+0x155e>
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <USB_EPStartXfer+0x14de>
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b0:	3301      	adds	r3, #1
 80065b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29a      	uxth	r2, r3
 80065be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	029b      	lsls	r3, r3, #10
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	4313      	orrs	r3, r2
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e030      	b.n	8006636 <USB_EPStartXfer+0x155e>
 80065d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d128      	bne.n	8006636 <USB_EPStartXfer+0x155e>
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006608:	4413      	add	r3, r2
 800660a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800660e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	011a      	lsls	r2, r3, #4
 800661c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006620:	4413      	add	r3, r2
 8006622:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006626:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	b29a      	uxth	r2, r3
 8006630:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 8085 	bne.w	8006760 <USB_EPStartXfer+0x1688>
 8006656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006672:	b29b      	uxth	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800667a:	4413      	add	r3, r2
 800667c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	011a      	lsls	r2, r3, #4
 800668e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006692:	4413      	add	r3, r2
 8006694:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800669c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80066b6:	d923      	bls.n	8006700 <USB_EPStartXfer+0x1628>
 80066b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d104      	bne.n	80066d8 <USB_EPStartXfer+0x1600>
 80066ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066d2:	3b01      	subs	r3, #1
 80066d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	4313      	orrs	r3, r2
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e05c      	b.n	80067ba <USB_EPStartXfer+0x16e2>
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10c      	bne.n	8006722 <USB_EPStartXfer+0x164a>
 8006708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006718:	b29a      	uxth	r2, r3
 800671a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	e04b      	b.n	80067ba <USB_EPStartXfer+0x16e2>
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <USB_EPStartXfer+0x166a>
 8006738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800673c:	3301      	adds	r3, #1
 800673e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29a      	uxth	r2, r3
 800674a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800674e:	b29b      	uxth	r3, r3
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	b29b      	uxth	r3, r3
 8006754:	4313      	orrs	r3, r2
 8006756:	b29a      	uxth	r2, r3
 8006758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	e02c      	b.n	80067ba <USB_EPStartXfer+0x16e2>
 8006760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d124      	bne.n	80067ba <USB_EPStartXfer+0x16e2>
 8006770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006786:	4413      	add	r3, r2
 8006788:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800678c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	011a      	lsls	r2, r3, #4
 800679a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800679e:	4413      	add	r3, r2
 80067a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e001      	b.n	80067ba <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e03a      	b.n	8006830 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800681a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800682a:	b29b      	uxth	r3, r3
 800682c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d020      	beq.n	800688e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006862:	81bb      	strh	r3, [r7, #12]
 8006864:	89bb      	ldrh	r3, [r7, #12]
 8006866:	f083 0310 	eor.w	r3, r3, #16
 800686a:	81bb      	strh	r3, [r7, #12]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	89bb      	ldrh	r3, [r7, #12]
 8006878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800687c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006888:	b29b      	uxth	r3, r3
 800688a:	8013      	strh	r3, [r2, #0]
 800688c:	e01f      	b.n	80068ce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a4:	81fb      	strh	r3, [r7, #14]
 80068a6:	89fb      	ldrh	r3, [r7, #14]
 80068a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068ac:	81fb      	strh	r3, [r7, #14]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	89fb      	ldrh	r3, [r7, #14]
 80068ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068da:	b480      	push	{r7}
 80068dc:	b087      	sub	sp, #28
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	7b1b      	ldrb	r3, [r3, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f040 809d 	bne.w	8006a28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04c      	beq.n	8006990 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	823b      	strh	r3, [r7, #16]
 8006904:	8a3b      	ldrh	r3, [r7, #16]
 8006906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01b      	beq.n	8006946 <USB_EPClearStall+0x6c>
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006924:	81fb      	strh	r3, [r7, #14]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	89fb      	ldrh	r3, [r7, #14]
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800693e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	78db      	ldrb	r3, [r3, #3]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d06c      	beq.n	8006a28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006964:	81bb      	strh	r3, [r7, #12]
 8006966:	89bb      	ldrh	r3, [r7, #12]
 8006968:	f083 0320 	eor.w	r3, r3, #32
 800696c:	81bb      	strh	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	89bb      	ldrh	r3, [r7, #12]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]
 800698e:	e04b      	b.n	8006a28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	82fb      	strh	r3, [r7, #22]
 800699e:	8afb      	ldrh	r3, [r7, #22]
 80069a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01b      	beq.n	80069e0 <USB_EPClearStall+0x106>
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069be:	82bb      	strh	r3, [r7, #20]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	441a      	add	r2, r3
 80069ca:	8abb      	ldrh	r3, [r7, #20]
 80069cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069dc:	b29b      	uxth	r3, r3
 80069de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f6:	827b      	strh	r3, [r7, #18]
 80069f8:	8a7b      	ldrh	r3, [r7, #18]
 80069fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069fe:	827b      	strh	r3, [r7, #18]
 8006a00:	8a7b      	ldrh	r3, [r7, #18]
 8006a02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a06:	827b      	strh	r3, [r7, #18]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	8a7b      	ldrh	r3, [r7, #18]
 8006a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2280      	movs	r2, #128	@ 0x80
 8006a4a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr

08006a82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b08b      	sub	sp, #44	@ 0x2c
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	80fb      	strh	r3, [r7, #6]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006acc:	88bb      	ldrh	r3, [r7, #4]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	005a      	lsls	r2, r3, #1
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ae8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aee:	e01e      	b.n	8006b2e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	3301      	adds	r3, #1
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	b21a      	sxth	r2, r3
 8006b00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	b21b      	sxth	r3, r3
 8006b08:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	8a7a      	ldrh	r2, [r7, #18]
 8006b0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	3302      	adds	r3, #2
 8006b14:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	3302      	adds	r3, #2
 8006b1a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1dd      	bne.n	8006af0 <USB_WritePMA+0x3a>
  }
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	372c      	adds	r7, #44	@ 0x2c
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b08b      	sub	sp, #44	@ 0x2c
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	460b      	mov	r3, r1
 8006b50:	80fb      	strh	r3, [r7, #6]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b56:	88bb      	ldrh	r3, [r7, #4]
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	005a      	lsls	r2, r3, #1
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b72:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b78:	e01b      	b.n	8006bb2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	3302      	adds	r3, #2
 8006b86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	3301      	adds	r3, #1
 8006b94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	0a1b      	lsrs	r3, r3, #8
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	3302      	adds	r3, #2
 8006baa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e0      	bne.n	8006b7a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bb8:	88bb      	ldrh	r3, [r7, #4]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	701a      	strb	r2, [r3, #0]
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	372c      	adds	r7, #44	@ 0x2c
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006bea:	2304      	movs	r3, #4
 8006bec:	2203      	movs	r2, #3
 8006bee:	2181      	movs	r1, #129	@ 0x81
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fc86 	bl	8008502 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006bfc:	2010      	movs	r0, #16
 8006bfe:	f001 fd95 	bl	800872c <USBD_static_malloc>
 8006c02:	4602      	mov	r2, r0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006c14:	2302      	movs	r3, #2
 8006c16:	e005      	b.n	8006c24 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1e:	2200      	movs	r2, #0
 8006c20:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006c38:	2181      	movs	r1, #129	@ 0x81
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fc87 	bl	800854e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 fd74 	bl	8008744 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c80:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d045      	beq.n	8006d2a <USBD_HID_Setup+0xba>
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	f040 80d3 	bne.w	8006e4a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	3b02      	subs	r3, #2
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d835      	bhi.n	8006d1a <USBD_HID_Setup+0xaa>
 8006cae:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <USBD_HID_Setup+0x44>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006d0b 	.word	0x08006d0b
 8006cb8:	08006ceb 	.word	0x08006ceb
 8006cbc:	08006d1b 	.word	0x08006d1b
 8006cc0:	08006d1b 	.word	0x08006d1b
 8006cc4:	08006d1b 	.word	0x08006d1b
 8006cc8:	08006d1b 	.word	0x08006d1b
 8006ccc:	08006d1b 	.word	0x08006d1b
 8006cd0:	08006d1b 	.word	0x08006d1b
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006cdd 	.word	0x08006cdd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	885b      	ldrh	r3, [r3, #2]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	601a      	str	r2, [r3, #0]
          break;
 8006ce8:	e01e      	b.n	8006d28 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2201      	movs	r2, #1
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f957 	bl	8007fa4 <USBD_CtlSendData>
          break;
 8006cf6:	e017      	b.n	8006d28 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	885b      	ldrh	r3, [r3, #2]
 8006cfc:	0a1b      	lsrs	r3, r3, #8
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]
          break;
 8006d08:	e00e      	b.n	8006d28 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	2201      	movs	r2, #1
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 f946 	bl	8007fa4 <USBD_CtlSendData>
          break;
 8006d18:	e006      	b.n	8006d28 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 f8d7 	bl	8007ed0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d22:	2302      	movs	r3, #2
 8006d24:	75fb      	strb	r3, [r7, #23]
          break;
 8006d26:	bf00      	nop
      }
      break;
 8006d28:	e096      	b.n	8006e58 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b0b      	cmp	r3, #11
 8006d30:	f200 8083 	bhi.w	8006e3a <USBD_HID_Setup+0x1ca>
 8006d34:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <USBD_HID_Setup+0xcc>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006e3b 	.word	0x08006e3b
 8006d44:	08006e3b 	.word	0x08006e3b
 8006d48:	08006e3b 	.word	0x08006e3b
 8006d4c:	08006e3b 	.word	0x08006e3b
 8006d50:	08006e3b 	.word	0x08006e3b
 8006d54:	08006d95 	.word	0x08006d95
 8006d58:	08006e3b 	.word	0x08006e3b
 8006d5c:	08006e3b 	.word	0x08006e3b
 8006d60:	08006e3b 	.word	0x08006e3b
 8006d64:	08006ded 	.word	0x08006ded
 8006d68:	08006e15 	.word	0x08006e15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d107      	bne.n	8006d86 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d76:	f107 030e 	add.w	r3, r7, #14
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 f910 	bl	8007fa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d84:	e060      	b.n	8006e48 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f8a1 	bl	8007ed0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	75fb      	strb	r3, [r7, #23]
          break;
 8006d92:	e059      	b.n	8006e48 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	885b      	ldrh	r3, [r3, #2]
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b22      	cmp	r3, #34	@ 0x22
 8006d9e:	d108      	bne.n	8006db2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	88db      	ldrh	r3, [r3, #6]
 8006da4:	2b3f      	cmp	r3, #63	@ 0x3f
 8006da6:	bf28      	it	cs
 8006da8:	233f      	movcs	r3, #63	@ 0x3f
 8006daa:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006dac:	4b2d      	ldr	r3, [pc, #180]	@ (8006e64 <USBD_HID_Setup+0x1f4>)
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	e015      	b.n	8006dde <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	885b      	ldrh	r3, [r3, #2]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b21      	cmp	r3, #33	@ 0x21
 8006dbc:	d108      	bne.n	8006dd0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006e68 <USBD_HID_Setup+0x1f8>)
 8006dc0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	88db      	ldrh	r3, [r3, #6]
 8006dc6:	2b09      	cmp	r3, #9
 8006dc8:	bf28      	it	cs
 8006dca:	2309      	movcs	r3, #9
 8006dcc:	83fb      	strh	r3, [r7, #30]
 8006dce:	e006      	b.n	8006dde <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 f87c 	bl	8007ed0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	75fb      	strb	r3, [r7, #23]
            break;
 8006ddc:	e034      	b.n	8006e48 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006dde:	8bfb      	ldrh	r3, [r7, #30]
 8006de0:	461a      	mov	r2, r3
 8006de2:	69b9      	ldr	r1, [r7, #24]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f8dd 	bl	8007fa4 <USBD_CtlSendData>
          break;
 8006dea:	e02d      	b.n	8006e48 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d107      	bne.n	8006e06 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 f8d0 	bl	8007fa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e04:	e020      	b.n	8006e48 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f861 	bl	8007ed0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	75fb      	strb	r3, [r7, #23]
          break;
 8006e12:	e019      	b.n	8006e48 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d106      	bne.n	8006e2c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	885b      	ldrh	r3, [r3, #2]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e2a:	e00d      	b.n	8006e48 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 f84e 	bl	8007ed0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e34:	2302      	movs	r3, #2
 8006e36:	75fb      	strb	r3, [r7, #23]
          break;
 8006e38:	e006      	b.n	8006e48 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f847 	bl	8007ed0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	75fb      	strb	r3, [r7, #23]
          break;
 8006e46:	bf00      	nop
      }
      break;
 8006e48:	e006      	b.n	8006e58 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f83f 	bl	8007ed0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	75fb      	strb	r3, [r7, #23]
      break;
 8006e56:	bf00      	nop
  }

  return ret;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	200000c8 	.word	0x200000c8
 8006e68:	200000b0 	.word	0x200000b0

08006e6c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e80:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d10c      	bne.n	8006ea6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	7b1b      	ldrb	r3, [r3, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2201      	movs	r2, #1
 8006e98:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	2181      	movs	r1, #129	@ 0x81
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f001 fbfc 	bl	800869e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7c1b      	ldrb	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e001      	b.n	8006ece <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8006eca:	230a      	movs	r3, #10
 8006ecc:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
	...

08006edc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2222      	movs	r2, #34	@ 0x22
 8006ee8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006eea:	4b03      	ldr	r3, [pc, #12]	@ (8006ef8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000044 	.word	0x20000044

08006efc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2222      	movs	r2, #34	@ 0x22
 8006f08:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006f0a:	4b03      	ldr	r3, [pc, #12]	@ (8006f18 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000068 	.word	0x20000068

08006f1c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2222      	movs	r2, #34	@ 0x22
 8006f28:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006f2a:	4b03      	ldr	r3, [pc, #12]	@ (8006f38 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	2000008c 	.word	0x2000008c

08006f3c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f4e:	2200      	movs	r2, #0
 8006f50:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr
	...

08006f60 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006f6e:	4b03      	ldr	r3, [pc, #12]	@ (8006f7c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	200000bc 	.word	0x200000bc

08006f80 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f94:	2302      	movs	r3, #2
 8006f96:	e01a      	b.n	8006fce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	79fa      	ldrb	r2, [r7, #7]
 8006fc4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f001 fa38 	bl	800843c <USBD_LL_Init>

  return USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
 8006ff6:	e001      	b.n	8006ffc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr

08007008 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 fa5b 	bl	80084cc <USBD_LL_Start>

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr

08007034 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007040:	2302      	movs	r3, #2
 8007042:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00c      	beq.n	8007068 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	4611      	mov	r1, r2
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	4611      	mov	r1, r2
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3

  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fed7 	bl	8007e5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d016      	beq.n	8007102 <USBD_LL_SetupStage+0x6a>
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d81c      	bhi.n	8007112 <USBD_LL_SetupStage+0x7a>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <USBD_LL_SetupStage+0x4a>
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d008      	beq.n	80070f2 <USBD_LL_SetupStage+0x5a>
 80070e0:	e017      	b.n	8007112 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f9ca 	bl	8007484 <USBD_StdDevReq>
      break;
 80070f0:	e01a      	b.n	8007128 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa2c 	bl	8007558 <USBD_StdItfReq>
      break;
 8007100:	e012      	b.n	8007128 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa6c 	bl	80075e8 <USBD_StdEPReq>
      break;
 8007110:	e00a      	b.n	8007128 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007118:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fa33 	bl	800858c <USBD_LL_StallEP>
      break;
 8007126:	bf00      	nop
  }

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	460b      	mov	r3, r1
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d14b      	bne.n	80071de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800714c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007154:	2b03      	cmp	r3, #3
 8007156:	d134      	bne.n	80071c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	429a      	cmp	r2, r3
 8007162:	d919      	bls.n	8007198 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800717a:	429a      	cmp	r2, r3
 800717c:	d203      	bcs.n	8007186 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007182:	b29b      	uxth	r3, r3
 8007184:	e002      	b.n	800718c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800718a:	b29b      	uxth	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 ff35 	bl	8008000 <USBD_CtlContinueRx>
 8007196:	e038      	b.n	800720a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d105      	bne.n	80071ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 ff32 	bl	8008024 <USBD_CtlSendStatus>
 80071c0:	e023      	b.n	800720a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071c8:	2b05      	cmp	r3, #5
 80071ca:	d11e      	bne.n	800720a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071d4:	2100      	movs	r1, #0
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 f9d8 	bl	800858c <USBD_LL_StallEP>
 80071dc:	e015      	b.n	800720a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d108      	bne.n	8007206 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	7afa      	ldrb	r2, [r7, #11]
 80071fe:	4611      	mov	r1, r2
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	4798      	blx	r3
 8007204:	e001      	b.n	800720a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007206:	2302      	movs	r3, #2
 8007208:	e000      	b.n	800720c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	460b      	mov	r3, r1
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d17f      	bne.n	8007328 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3314      	adds	r3, #20
 800722c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007234:	2b02      	cmp	r3, #2
 8007236:	d15c      	bne.n	80072f2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	d915      	bls.n	8007270 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	b29b      	uxth	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 febd 	bl	8007fdc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007262:	2300      	movs	r3, #0
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f001 fa3b 	bl	80086e4 <USBD_LL_PrepareReceive>
 800726e:	e04e      	b.n	800730e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	6912      	ldr	r2, [r2, #16]
 8007278:	fbb3 f1f2 	udiv	r1, r3, r2
 800727c:	fb01 f202 	mul.w	r2, r1, r2
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d11c      	bne.n	80072c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800728e:	429a      	cmp	r2, r3
 8007290:	d316      	bcc.n	80072c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800729c:	429a      	cmp	r2, r3
 800729e:	d20f      	bcs.n	80072c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072a0:	2200      	movs	r2, #0
 80072a2:	2100      	movs	r1, #0
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fe99 	bl	8007fdc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072b2:	2300      	movs	r3, #0
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fa13 	bl	80086e4 <USBD_LL_PrepareReceive>
 80072be:	e026      	b.n	800730e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d105      	bne.n	80072e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072e2:	2180      	movs	r1, #128	@ 0x80
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f001 f951 	bl	800858c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fead 	bl	800804a <USBD_CtlReceiveStatus>
 80072f0:	e00d      	b.n	800730e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d004      	beq.n	8007306 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007306:	2180      	movs	r1, #128	@ 0x80
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f001 f93f 	bl	800858c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007314:	2b01      	cmp	r3, #1
 8007316:	d11d      	bne.n	8007354 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff fe81 	bl	8007020 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007326:	e015      	b.n	8007354 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00d      	beq.n	8007350 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800733a:	2b03      	cmp	r3, #3
 800733c:	d108      	bne.n	8007350 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	7afa      	ldrb	r2, [r7, #11]
 8007348:	4611      	mov	r1, r2
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	4798      	blx	r3
 800734e:	e001      	b.n	8007354 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007350:	2302      	movs	r3, #2
 8007352:	e000      	b.n	8007356 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007366:	2340      	movs	r3, #64	@ 0x40
 8007368:	2200      	movs	r2, #0
 800736a:	2100      	movs	r1, #0
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f8c8 	bl	8008502 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2240      	movs	r2, #64	@ 0x40
 800737e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007382:	2340      	movs	r3, #64	@ 0x40
 8007384:	2200      	movs	r2, #0
 8007386:	2180      	movs	r1, #128	@ 0x80
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 f8ba 	bl	8008502 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2240      	movs	r2, #64	@ 0x40
 8007398:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6852      	ldr	r2, [r2, #4]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	4611      	mov	r1, r2
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
  }

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr

080073fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr

08007426 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007434:	2b04      	cmp	r3, #4
 8007436:	d105      	bne.n	8007444 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr

08007450 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800745e:	2b03      	cmp	r3, #3
 8007460:	d10b      	bne.n	800747a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800749a:	2b40      	cmp	r3, #64	@ 0x40
 800749c:	d005      	beq.n	80074aa <USBD_StdDevReq+0x26>
 800749e:	2b40      	cmp	r3, #64	@ 0x40
 80074a0:	d84f      	bhi.n	8007542 <USBD_StdDevReq+0xbe>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <USBD_StdDevReq+0x36>
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d14b      	bne.n	8007542 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
      break;
 80074b8:	e048      	b.n	800754c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b09      	cmp	r3, #9
 80074c0:	d839      	bhi.n	8007536 <USBD_StdDevReq+0xb2>
 80074c2:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <USBD_StdDevReq+0x44>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	08007519 	.word	0x08007519
 80074cc:	0800752d 	.word	0x0800752d
 80074d0:	08007537 	.word	0x08007537
 80074d4:	08007523 	.word	0x08007523
 80074d8:	08007537 	.word	0x08007537
 80074dc:	080074fb 	.word	0x080074fb
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	08007537 	.word	0x08007537
 80074e8:	0800750f 	.word	0x0800750f
 80074ec:	08007505 	.word	0x08007505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9dc 	bl	80078b0 <USBD_GetDescriptor>
          break;
 80074f8:	e022      	b.n	8007540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb3f 	bl	8007b80 <USBD_SetAddress>
          break;
 8007502:	e01d      	b.n	8007540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb7e 	bl	8007c08 <USBD_SetConfig>
          break;
 800750c:	e018      	b.n	8007540 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fc07 	bl	8007d24 <USBD_GetConfig>
          break;
 8007516:	e013      	b.n	8007540 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fc37 	bl	8007d8e <USBD_GetStatus>
          break;
 8007520:	e00e      	b.n	8007540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fc65 	bl	8007df4 <USBD_SetFeature>
          break;
 800752a:	e009      	b.n	8007540 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fc74 	bl	8007e1c <USBD_ClrFeature>
          break;
 8007534:	e004      	b.n	8007540 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fcc9 	bl	8007ed0 <USBD_CtlError>
          break;
 800753e:	bf00      	nop
      }
      break;
 8007540:	e004      	b.n	800754c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fcc3 	bl	8007ed0 <USBD_CtlError>
      break;
 800754a:	bf00      	nop
  }

  return ret;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop

08007558 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800756e:	2b40      	cmp	r3, #64	@ 0x40
 8007570:	d005      	beq.n	800757e <USBD_StdItfReq+0x26>
 8007572:	2b40      	cmp	r3, #64	@ 0x40
 8007574:	d82e      	bhi.n	80075d4 <USBD_StdItfReq+0x7c>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <USBD_StdItfReq+0x26>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d12a      	bne.n	80075d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007584:	3b01      	subs	r3, #1
 8007586:	2b02      	cmp	r3, #2
 8007588:	d81d      	bhi.n	80075c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	889b      	ldrh	r3, [r3, #4]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d813      	bhi.n	80075bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	4798      	blx	r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d110      	bne.n	80075d0 <USBD_StdItfReq+0x78>
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10d      	bne.n	80075d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fd35 	bl	8008024 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ba:	e009      	b.n	80075d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fc86 	bl	8007ed0 <USBD_CtlError>
          break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc81 	bl	8007ed0 <USBD_CtlError>
          break;
 80075ce:	e000      	b.n	80075d2 <USBD_StdItfReq+0x7a>
          break;
 80075d0:	bf00      	nop
      }
      break;
 80075d2:	e004      	b.n	80075de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fc7a 	bl	8007ed0 <USBD_CtlError>
      break;
 80075dc:	bf00      	nop
  }

  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	889b      	ldrh	r3, [r3, #4]
 80075fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007604:	2b40      	cmp	r3, #64	@ 0x40
 8007606:	d007      	beq.n	8007618 <USBD_StdEPReq+0x30>
 8007608:	2b40      	cmp	r3, #64	@ 0x40
 800760a:	f200 8146 	bhi.w	800789a <USBD_StdEPReq+0x2b2>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <USBD_StdEPReq+0x40>
 8007612:	2b20      	cmp	r3, #32
 8007614:	f040 8141 	bne.w	800789a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
      break;
 8007626:	e13d      	b.n	80078a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007630:	2b20      	cmp	r3, #32
 8007632:	d10a      	bne.n	800764a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	e12d      	b.n	80078a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d007      	beq.n	8007662 <USBD_StdEPReq+0x7a>
 8007652:	2b03      	cmp	r3, #3
 8007654:	f300 811b 	bgt.w	800788e <USBD_StdEPReq+0x2a6>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d072      	beq.n	8007742 <USBD_StdEPReq+0x15a>
 800765c:	2b01      	cmp	r3, #1
 800765e:	d03a      	beq.n	80076d6 <USBD_StdEPReq+0xee>
 8007660:	e115      	b.n	800788e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007668:	2b02      	cmp	r3, #2
 800766a:	d002      	beq.n	8007672 <USBD_StdEPReq+0x8a>
 800766c:	2b03      	cmp	r3, #3
 800766e:	d015      	beq.n	800769c <USBD_StdEPReq+0xb4>
 8007670:	e02b      	b.n	80076ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <USBD_StdEPReq+0xaa>
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b80      	cmp	r3, #128	@ 0x80
 800767c:	d009      	beq.n	8007692 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 ff82 	bl	800858c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007688:	2180      	movs	r1, #128	@ 0x80
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 ff7e 	bl	800858c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007690:	e020      	b.n	80076d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fc1b 	bl	8007ed0 <USBD_CtlError>
              break;
 800769a:	e01b      	b.n	80076d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	885b      	ldrh	r3, [r3, #2]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10e      	bne.n	80076c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <USBD_StdEPReq+0xda>
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b80      	cmp	r3, #128	@ 0x80
 80076ae:	d008      	beq.n	80076c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	88db      	ldrh	r3, [r3, #6]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 ff65 	bl	800858c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fcae 	bl	8008024 <USBD_CtlSendStatus>

              break;
 80076c8:	e004      	b.n	80076d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fbff 	bl	8007ed0 <USBD_CtlError>
              break;
 80076d2:	bf00      	nop
          }
          break;
 80076d4:	e0e0      	b.n	8007898 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d002      	beq.n	80076e6 <USBD_StdEPReq+0xfe>
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d015      	beq.n	8007710 <USBD_StdEPReq+0x128>
 80076e4:	e026      	b.n	8007734 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00c      	beq.n	8007706 <USBD_StdEPReq+0x11e>
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	2b80      	cmp	r3, #128	@ 0x80
 80076f0:	d009      	beq.n	8007706 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 ff48 	bl	800858c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076fc:	2180      	movs	r1, #128	@ 0x80
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 ff44 	bl	800858c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007704:	e01c      	b.n	8007740 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fbe1 	bl	8007ed0 <USBD_CtlError>
              break;
 800770e:	e017      	b.n	8007740 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	885b      	ldrh	r3, [r3, #2]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d112      	bne.n	800773e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 ff4f 	bl	80085ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc79 	bl	8008024 <USBD_CtlSendStatus>
              }
              break;
 8007732:	e004      	b.n	800773e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fbca 	bl	8007ed0 <USBD_CtlError>
              break;
 800773c:	e000      	b.n	8007740 <USBD_StdEPReq+0x158>
              break;
 800773e:	bf00      	nop
          }
          break;
 8007740:	e0aa      	b.n	8007898 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007748:	2b02      	cmp	r3, #2
 800774a:	d002      	beq.n	8007752 <USBD_StdEPReq+0x16a>
 800774c:	2b03      	cmp	r3, #3
 800774e:	d032      	beq.n	80077b6 <USBD_StdEPReq+0x1ce>
 8007750:	e097      	b.n	8007882 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <USBD_StdEPReq+0x180>
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b80      	cmp	r3, #128	@ 0x80
 800775c:	d004      	beq.n	8007768 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fbb5 	bl	8007ed0 <USBD_CtlError>
                break;
 8007766:	e091      	b.n	800788c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	da0b      	bge.n	8007788 <USBD_StdEPReq+0x1a0>
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	3310      	adds	r3, #16
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	4413      	add	r3, r2
 8007784:	3304      	adds	r3, #4
 8007786:	e00b      	b.n	80077a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	3304      	adds	r3, #4
 80077a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2202      	movs	r2, #2
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fbf8 	bl	8007fa4 <USBD_CtlSendData>
              break;
 80077b4:	e06a      	b.n	800788c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da11      	bge.n	80077e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	f003 020f 	and.w	r2, r3, #15
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	3318      	adds	r3, #24
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d117      	bne.n	8007808 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fb78 	bl	8007ed0 <USBD_CtlError>
                  break;
 80077e0:	e054      	b.n	800788c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	f003 020f 	and.w	r2, r3, #15
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d104      	bne.n	8007808 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fb65 	bl	8007ed0 <USBD_CtlError>
                  break;
 8007806:	e041      	b.n	800788c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da0b      	bge.n	8007828 <USBD_StdEPReq+0x240>
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	3310      	adds	r3, #16
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	3304      	adds	r3, #4
 8007826:	e00b      	b.n	8007840 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	3304      	adds	r3, #4
 8007840:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <USBD_StdEPReq+0x266>
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b80      	cmp	r3, #128	@ 0x80
 800784c:	d103      	bne.n	8007856 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e00e      	b.n	8007874 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fed4 	bl	8008608 <USBD_LL_IsStallEP>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2201      	movs	r2, #1
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	e002      	b.n	8007874 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2202      	movs	r2, #2
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb92 	bl	8007fa4 <USBD_CtlSendData>
              break;
 8007880:	e004      	b.n	800788c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb23 	bl	8007ed0 <USBD_CtlError>
              break;
 800788a:	bf00      	nop
          }
          break;
 800788c:	e004      	b.n	8007898 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb1d 	bl	8007ed0 <USBD_CtlError>
          break;
 8007896:	bf00      	nop
      }
      break;
 8007898:	e004      	b.n	80078a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fb17 	bl	8007ed0 <USBD_CtlError>
      break;
 80078a2:	bf00      	nop
  }

  return ret;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	2b06      	cmp	r3, #6
 80078d2:	f200 8128 	bhi.w	8007b26 <USBD_GetDescriptor+0x276>
 80078d6:	a201      	add	r2, pc, #4	@ (adr r2, 80078dc <USBD_GetDescriptor+0x2c>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007911 	.word	0x08007911
 80078e4:	08007951 	.word	0x08007951
 80078e8:	08007b27 	.word	0x08007b27
 80078ec:	08007b27 	.word	0x08007b27
 80078f0:	08007ac7 	.word	0x08007ac7
 80078f4:	08007af3 	.word	0x08007af3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	7c12      	ldrb	r2, [r2, #16]
 8007904:	f107 0108 	add.w	r1, r7, #8
 8007908:	4610      	mov	r0, r2
 800790a:	4798      	blx	r3
 800790c:	60f8      	str	r0, [r7, #12]
      break;
 800790e:	e112      	b.n	8007b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	7c1b      	ldrb	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10d      	bne.n	8007934 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800791e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007920:	f107 0208 	add.w	r2, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3301      	adds	r3, #1
 800792e:	2202      	movs	r2, #2
 8007930:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007932:	e100      	b.n	8007b36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800793a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793c:	f107 0208 	add.w	r2, r7, #8
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	2202      	movs	r2, #2
 800794c:	701a      	strb	r2, [r3, #0]
      break;
 800794e:	e0f2      	b.n	8007b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	885b      	ldrh	r3, [r3, #2]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b05      	cmp	r3, #5
 8007958:	f200 80ac 	bhi.w	8007ab4 <USBD_GetDescriptor+0x204>
 800795c:	a201      	add	r2, pc, #4	@ (adr r2, 8007964 <USBD_GetDescriptor+0xb4>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	0800797d 	.word	0x0800797d
 8007968:	080079b1 	.word	0x080079b1
 800796c:	080079e5 	.word	0x080079e5
 8007970:	08007a19 	.word	0x08007a19
 8007974:	08007a4d 	.word	0x08007a4d
 8007978:	08007a81 	.word	0x08007a81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 0108 	add.w	r1, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799e:	e091      	b.n	8007ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa94 	bl	8007ed0 <USBD_CtlError>
            err++;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	3301      	adds	r3, #1
 80079ac:	72fb      	strb	r3, [r7, #11]
          break;
 80079ae:	e089      	b.n	8007ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	7c12      	ldrb	r2, [r2, #16]
 80079c8:	f107 0108 	add.w	r1, r7, #8
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
 80079d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d2:	e077      	b.n	8007ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa7a 	bl	8007ed0 <USBD_CtlError>
            err++;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	3301      	adds	r3, #1
 80079e0:	72fb      	strb	r3, [r7, #11]
          break;
 80079e2:	e06f      	b.n	8007ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	7c12      	ldrb	r2, [r2, #16]
 80079fc:	f107 0108 	add.w	r1, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a06:	e05d      	b.n	8007ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa60 	bl	8007ed0 <USBD_CtlError>
            err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
          break;
 8007a16:	e055      	b.n	8007ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	7c12      	ldrb	r2, [r2, #16]
 8007a30:	f107 0108 	add.w	r1, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3a:	e043      	b.n	8007ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa46 	bl	8007ed0 <USBD_CtlError>
            err++;
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	3301      	adds	r3, #1
 8007a48:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4a:	e03b      	b.n	8007ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	7c12      	ldrb	r2, [r2, #16]
 8007a64:	f107 0108 	add.w	r1, r7, #8
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6e:	e029      	b.n	8007ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa2c 	bl	8007ed0 <USBD_CtlError>
            err++;
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7e:	e021      	b.n	8007ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa2:	e00f      	b.n	8007ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fa12 	bl	8007ed0 <USBD_CtlError>
            err++;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab2:	e007      	b.n	8007ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa0a 	bl	8007ed0 <USBD_CtlError>
          err++;
 8007abc:	7afb      	ldrb	r3, [r7, #11]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ac2:	e038      	b.n	8007b36 <USBD_GetDescriptor+0x286>
 8007ac4:	e037      	b.n	8007b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	7c1b      	ldrb	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d109      	bne.n	8007ae2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad6:	f107 0208 	add.w	r2, r7, #8
 8007ada:	4610      	mov	r0, r2
 8007adc:	4798      	blx	r3
 8007ade:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ae0:	e029      	b.n	8007b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9f3 	bl	8007ed0 <USBD_CtlError>
        err++;
 8007aea:	7afb      	ldrb	r3, [r7, #11]
 8007aec:	3301      	adds	r3, #1
 8007aee:	72fb      	strb	r3, [r7, #11]
      break;
 8007af0:	e021      	b.n	8007b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	7c1b      	ldrb	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10d      	bne.n	8007b16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b02:	f107 0208 	add.w	r2, r7, #8
 8007b06:	4610      	mov	r0, r2
 8007b08:	4798      	blx	r3
 8007b0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	2207      	movs	r2, #7
 8007b12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b14:	e00f      	b.n	8007b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9d9 	bl	8007ed0 <USBD_CtlError>
        err++;
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
 8007b20:	3301      	adds	r3, #1
 8007b22:	72fb      	strb	r3, [r7, #11]
      break;
 8007b24:	e007      	b.n	8007b36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9d1 	bl	8007ed0 <USBD_CtlError>
      err++;
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	3301      	adds	r3, #1
 8007b32:	72fb      	strb	r3, [r7, #11]
      break;
 8007b34:	bf00      	nop
  }

  if (err != 0U)
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d11c      	bne.n	8007b76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b3c:	893b      	ldrh	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d011      	beq.n	8007b66 <USBD_GetDescriptor+0x2b6>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00d      	beq.n	8007b66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	88da      	ldrh	r2, [r3, #6]
 8007b4e:	893b      	ldrh	r3, [r7, #8]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	bf28      	it	cs
 8007b54:	4613      	movcs	r3, r2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b5a:	893b      	ldrh	r3, [r7, #8]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fa1f 	bl	8007fa4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	88db      	ldrh	r3, [r3, #6]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa58 	bl	8008024 <USBD_CtlSendStatus>
 8007b74:	e000      	b.n	8007b78 <USBD_GetDescriptor+0x2c8>
    return;
 8007b76:	bf00      	nop
    }
  }
}
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop

08007b80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	889b      	ldrh	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d130      	bne.n	8007bf4 <USBD_SetAddress+0x74>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	88db      	ldrh	r3, [r3, #6]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d12c      	bne.n	8007bf4 <USBD_SetAddress+0x74>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	885b      	ldrh	r3, [r3, #2]
 8007b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ba0:	d828      	bhi.n	8007bf4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d104      	bne.n	8007bc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f988 	bl	8007ed0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc0:	e01d      	b.n	8007bfe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7bfa      	ldrb	r2, [r7, #15]
 8007bc6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fd46 	bl	8008660 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa25 	bl	8008024 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be8:	e009      	b.n	8007bfe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf2:	e004      	b.n	8007bfe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f96a 	bl	8007ed0 <USBD_CtlError>
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	4b41      	ldr	r3, [pc, #260]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c1c:	4b40      	ldr	r3, [pc, #256]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d904      	bls.n	8007c2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f952 	bl	8007ed0 <USBD_CtlError>
 8007c2c:	e075      	b.n	8007d1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d002      	beq.n	8007c3e <USBD_SetConfig+0x36>
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d023      	beq.n	8007c84 <USBD_SetConfig+0x7c>
 8007c3c:	e062      	b.n	8007d04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c3e:	4b38      	ldr	r3, [pc, #224]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01a      	beq.n	8007c7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c46:	4b36      	ldr	r3, [pc, #216]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2203      	movs	r2, #3
 8007c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c58:	4b31      	ldr	r3, [pc, #196]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff f9e8 	bl	8007034 <USBD_SetClassConfig>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d104      	bne.n	8007c74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f92f 	bl	8007ed0 <USBD_CtlError>
            return;
 8007c72:	e052      	b.n	8007d1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9d5 	bl	8008024 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c7a:	e04e      	b.n	8007d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f9d1 	bl	8008024 <USBD_CtlSendStatus>
        break;
 8007c82:	e04a      	b.n	8007d1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c84:	4b26      	ldr	r3, [pc, #152]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d112      	bne.n	8007cb2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c94:	4b22      	ldr	r3, [pc, #136]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c9e:	4b20      	ldr	r3, [pc, #128]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff f9e4 	bl	8007072 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9ba 	bl	8008024 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cb0:	e033      	b.n	8007d1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d01d      	beq.n	8007cfc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff f9d2 	bl	8007072 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cce:	4b14      	ldr	r3, [pc, #80]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cd8:	4b11      	ldr	r3, [pc, #68]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff f9a8 	bl	8007034 <USBD_SetClassConfig>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d104      	bne.n	8007cf4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f8ef 	bl	8007ed0 <USBD_CtlError>
            return;
 8007cf2:	e012      	b.n	8007d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f995 	bl	8008024 <USBD_CtlSendStatus>
        break;
 8007cfa:	e00e      	b.n	8007d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f991 	bl	8008024 <USBD_CtlSendStatus>
        break;
 8007d02:	e00a      	b.n	8007d1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8e2 	bl	8007ed0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d0c:	4b04      	ldr	r3, [pc, #16]	@ (8007d20 <USBD_SetConfig+0x118>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff f9ad 	bl	8007072 <USBD_ClrClassConfig>
        break;
 8007d18:	bf00      	nop
    }
  }
}
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000214 	.word	0x20000214

08007d24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88db      	ldrh	r3, [r3, #6]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d004      	beq.n	8007d40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f8c9 	bl	8007ed0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d3e:	e022      	b.n	8007d86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	dc02      	bgt.n	8007d50 <USBD_GetConfig+0x2c>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dc03      	bgt.n	8007d56 <USBD_GetConfig+0x32>
 8007d4e:	e015      	b.n	8007d7c <USBD_GetConfig+0x58>
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetConfig+0x48>
 8007d54:	e012      	b.n	8007d7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	2201      	movs	r2, #1
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f91d 	bl	8007fa4 <USBD_CtlSendData>
        break;
 8007d6a:	e00c      	b.n	8007d86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	2201      	movs	r2, #1
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f915 	bl	8007fa4 <USBD_CtlSendData>
        break;
 8007d7a:	e004      	b.n	8007d86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8a6 	bl	8007ed0 <USBD_CtlError>
        break;
 8007d84:	bf00      	nop
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d81e      	bhi.n	8007de2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	88db      	ldrh	r3, [r3, #6]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d004      	beq.n	8007db6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f88e 	bl	8007ed0 <USBD_CtlError>
        break;
 8007db4:	e01a      	b.n	8007dec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f043 0202 	orr.w	r2, r3, #2
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f8e2 	bl	8007fa4 <USBD_CtlSendData>
      break;
 8007de0:	e004      	b.n	8007dec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f873 	bl	8007ed0 <USBD_CtlError>
      break;
 8007dea:	bf00      	nop
  }
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d106      	bne.n	8007e14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f908 	bl	8008024 <USBD_CtlSendStatus>
  }
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d80b      	bhi.n	8007e4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	885b      	ldrh	r3, [r3, #2]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d10c      	bne.n	8007e54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f8ee 	bl	8008024 <USBD_CtlSendStatus>
      }
      break;
 8007e48:	e004      	b.n	8007e54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f83f 	bl	8007ed0 <USBD_CtlError>
      break;
 8007e52:	e000      	b.n	8007e56 <USBD_ClrFeature+0x3a>
      break;
 8007e54:	bf00      	nop
  }
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	785a      	ldrb	r2, [r3, #1]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	3302      	adds	r3, #2
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	3303      	adds	r3, #3
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	3304      	adds	r3, #4
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3305      	adds	r3, #5
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	4413      	add	r3, r2
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	3306      	adds	r3, #6
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	3307      	adds	r3, #7
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	80da      	strh	r2, [r3, #6]

}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007eda:	2180      	movs	r1, #128	@ 0x80
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fb55 	bl	800858c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fb51 	bl	800858c <USBD_LL_StallEP>
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b086      	sub	sp, #24
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d032      	beq.n	8007f6e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f834 	bl	8007f76 <USBD_GetLen>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	3301      	adds	r3, #1
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	75fa      	strb	r2, [r7, #23]
 8007f22:	461a      	mov	r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	75fa      	strb	r2, [r7, #23]
 8007f34:	461a      	mov	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4413      	add	r3, r2
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f3e:	e012      	b.n	8007f66 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	1c5a      	adds	r2, r3, #1
 8007f44:	60fa      	str	r2, [r7, #12]
 8007f46:	7dfa      	ldrb	r2, [r7, #23]
 8007f48:	1c51      	adds	r1, r2, #1
 8007f4a:	75f9      	strb	r1, [r7, #23]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	440a      	add	r2, r1
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	75fa      	strb	r2, [r7, #23]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	4413      	add	r3, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e8      	bne.n	8007f40 <USBD_GetString+0x4e>
    }
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b085      	sub	sp, #20
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f82:	e005      	b.n	8007f90 <USBD_GetLen+0x1a>
  {
    len++;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	3301      	adds	r3, #1
 8007f88:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1f5      	bne.n	8007f84 <USBD_GetLen+0xe>
  }

  return len;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr

08007fa4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fb66 	bl	800869e <USBD_LL_Transmit>

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	2100      	movs	r1, #0
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fb54 	bl	800869e <USBD_LL_Transmit>

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4613      	mov	r3, r2
 800800c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	2100      	movs	r1, #0
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fb65 	bl	80086e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2204      	movs	r2, #4
 8008030:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008034:	2300      	movs	r3, #0
 8008036:	2200      	movs	r2, #0
 8008038:	2100      	movs	r1, #0
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb2f 	bl	800869e <USBD_LL_Transmit>

  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2205      	movs	r2, #5
 8008056:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800805a:	2300      	movs	r3, #0
 800805c:	2200      	movs	r2, #0
 800805e:	2100      	movs	r1, #0
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fb3f 	bl	80086e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008074:	2200      	movs	r2, #0
 8008076:	490e      	ldr	r1, [pc, #56]	@ (80080b0 <MX_USB_DEVICE_Init+0x40>)
 8008078:	480e      	ldr	r0, [pc, #56]	@ (80080b4 <MX_USB_DEVICE_Init+0x44>)
 800807a:	f7fe ff81 	bl	8006f80 <USBD_Init>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008084:	f7f8 f9e0 	bl	8000448 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008088:	490b      	ldr	r1, [pc, #44]	@ (80080b8 <MX_USB_DEVICE_Init+0x48>)
 800808a:	480a      	ldr	r0, [pc, #40]	@ (80080b4 <MX_USB_DEVICE_Init+0x44>)
 800808c:	f7fe ffa3 	bl	8006fd6 <USBD_RegisterClass>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008096:	f7f8 f9d7 	bl	8000448 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800809a:	4806      	ldr	r0, [pc, #24]	@ (80080b4 <MX_USB_DEVICE_Init+0x44>)
 800809c:	f7fe ffb4 	bl	8007008 <USBD_Start>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80080a6:	f7f8 f9cf 	bl	8000448 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080aa:	bf00      	nop
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20000108 	.word	0x20000108
 80080b4:	20000218 	.word	0x20000218
 80080b8:	2000000c 	.word	0x2000000c

080080bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	6039      	str	r1, [r7, #0]
 80080c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2212      	movs	r2, #18
 80080cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080ce:	4b03      	ldr	r3, [pc, #12]	@ (80080dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20000124 	.word	0x20000124

080080e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2204      	movs	r2, #4
 80080f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080f2:	4b03      	ldr	r3, [pc, #12]	@ (8008100 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000138 	.word	0x20000138

08008104 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d105      	bne.n	8008122 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4907      	ldr	r1, [pc, #28]	@ (8008138 <USBD_FS_ProductStrDescriptor+0x34>)
 800811a:	4808      	ldr	r0, [pc, #32]	@ (800813c <USBD_FS_ProductStrDescriptor+0x38>)
 800811c:	f7ff fee9 	bl	8007ef2 <USBD_GetString>
 8008120:	e004      	b.n	800812c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4904      	ldr	r1, [pc, #16]	@ (8008138 <USBD_FS_ProductStrDescriptor+0x34>)
 8008126:	4805      	ldr	r0, [pc, #20]	@ (800813c <USBD_FS_ProductStrDescriptor+0x38>)
 8008128:	f7ff fee3 	bl	8007ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800812c:	4b02      	ldr	r3, [pc, #8]	@ (8008138 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200004dc 	.word	0x200004dc
 800813c:	08008834 	.word	0x08008834

08008140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	4904      	ldr	r1, [pc, #16]	@ (8008160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008150:	4804      	ldr	r0, [pc, #16]	@ (8008164 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008152:	f7ff fece 	bl	8007ef2 <USBD_GetString>
  return USBD_StrDesc;
 8008156:	4b02      	ldr	r3, [pc, #8]	@ (8008160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200004dc 	.word	0x200004dc
 8008164:	0800884c 	.word	0x0800884c

08008168 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	221a      	movs	r2, #26
 8008178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800817a:	f000 f843 	bl	8008204 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800817e:	4b02      	ldr	r3, [pc, #8]	@ (8008188 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	2000013c 	.word	0x2000013c

0800818c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4907      	ldr	r1, [pc, #28]	@ (80081c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081a2:	4808      	ldr	r0, [pc, #32]	@ (80081c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081a4:	f7ff fea5 	bl	8007ef2 <USBD_GetString>
 80081a8:	e004      	b.n	80081b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4904      	ldr	r1, [pc, #16]	@ (80081c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ae:	4805      	ldr	r0, [pc, #20]	@ (80081c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081b0:	f7ff fe9f 	bl	8007ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081b4:	4b02      	ldr	r3, [pc, #8]	@ (80081c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200004dc 	.word	0x200004dc
 80081c4:	08008860 	.word	0x08008860

080081c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4907      	ldr	r1, [pc, #28]	@ (80081fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081de:	4808      	ldr	r0, [pc, #32]	@ (8008200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e0:	f7ff fe87 	bl	8007ef2 <USBD_GetString>
 80081e4:	e004      	b.n	80081f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4904      	ldr	r1, [pc, #16]	@ (80081fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081ea:	4805      	ldr	r0, [pc, #20]	@ (8008200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081ec:	f7ff fe81 	bl	8007ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f0:	4b02      	ldr	r3, [pc, #8]	@ (80081fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	200004dc 	.word	0x200004dc
 8008200:	08008870 	.word	0x08008870

08008204 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4413      	add	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008218:	2208      	movs	r2, #8
 800821a:	4906      	ldr	r1, [pc, #24]	@ (8008234 <Get_SerialNum+0x30>)
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f80d 	bl	800823c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008222:	2204      	movs	r2, #4
 8008224:	4904      	ldr	r1, [pc, #16]	@ (8008238 <Get_SerialNum+0x34>)
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f808 	bl	800823c <IntToUnicode>
  }
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000013e 	.word	0x2000013e
 8008238:	2000014e 	.word	0x2000014e

0800823c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]
 8008252:	e027      	b.n	80082a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	0f1b      	lsrs	r3, r3, #28
 8008258:	2b09      	cmp	r3, #9
 800825a:	d80b      	bhi.n	8008274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	0f1b      	lsrs	r3, r3, #28
 8008260:	b2da      	uxtb	r2, r3
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	4619      	mov	r1, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	440b      	add	r3, r1
 800826c:	3230      	adds	r2, #48	@ 0x30
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	e00a      	b.n	800828a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	0f1b      	lsrs	r3, r3, #28
 8008278:	b2da      	uxtb	r2, r3
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4619      	mov	r1, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	440b      	add	r3, r1
 8008284:	3237      	adds	r2, #55	@ 0x37
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	3301      	adds	r3, #1
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	4413      	add	r3, r2
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	3301      	adds	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
 80082a4:	7dfa      	ldrb	r2, [r7, #23]
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3d3      	bcc.n	8008254 <IntToUnicode+0x18>
  }
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a0d      	ldr	r2, [pc, #52]	@ (80082fc <HAL_PCD_MspInit+0x44>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d113      	bne.n	80082f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008300 <HAL_PCD_MspInit+0x48>)
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008300 <HAL_PCD_MspInit+0x48>)
 80082d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082d4:	61d3      	str	r3, [r2, #28]
 80082d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <HAL_PCD_MspInit+0x48>)
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80082e2:	2200      	movs	r2, #0
 80082e4:	2100      	movs	r1, #0
 80082e6:	2014      	movs	r0, #20
 80082e8:	f7f8 fb0d 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80082ec:	2014      	movs	r0, #20
 80082ee:	f7f8 fb26 	bl	800093e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40005c00 	.word	0x40005c00
 8008300:	40021000 	.word	0x40021000

08008304 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f7fe febc 	bl	8007098 <USBD_LL_SetupStage>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	440b      	add	r3, r1
 8008348:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	4619      	mov	r1, r3
 8008352:	f7fe feee 	bl	8007132 <USBD_LL_DataOutStage>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	440b      	add	r3, r1
 800837e:	333c      	adds	r3, #60	@ 0x3c
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	4619      	mov	r1, r3
 8008386:	f7fe ff45 	bl	8007214 <USBD_LL_DataInStage>
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff f855 	bl	8007450 <USBD_LL_SOF>
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083b6:	2301      	movs	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d001      	beq.n	80083c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083c2:	f7f8 f841 	bl	8000448 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083cc:	7bfa      	ldrb	r2, [r7, #15]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff f805 	bl	80073e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe ffbe 	bl	800735e <USBD_LL_Reset>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe ffff 	bl	80073fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008408:	4b04      	ldr	r3, [pc, #16]	@ (800841c <HAL_PCD_SuspendCallback+0x30>)
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	4a03      	ldr	r2, [pc, #12]	@ (800841c <HAL_PCD_SuspendCallback+0x30>)
 800840e:	f043 0306 	orr.w	r3, r3, #6
 8008412:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	e000ed00 	.word	0xe000ed00

08008420 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fff9 	bl	8007426 <USBD_LL_Resume>
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008444:	4a1f      	ldr	r2, [pc, #124]	@ (80084c4 <USBD_LL_Init+0x88>)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a1d      	ldr	r2, [pc, #116]	@ (80084c4 <USBD_LL_Init+0x88>)
 8008450:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008454:	4b1b      	ldr	r3, [pc, #108]	@ (80084c4 <USBD_LL_Init+0x88>)
 8008456:	4a1c      	ldr	r2, [pc, #112]	@ (80084c8 <USBD_LL_Init+0x8c>)
 8008458:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800845a:	4b1a      	ldr	r3, [pc, #104]	@ (80084c4 <USBD_LL_Init+0x88>)
 800845c:	2208      	movs	r2, #8
 800845e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008460:	4b18      	ldr	r3, [pc, #96]	@ (80084c4 <USBD_LL_Init+0x88>)
 8008462:	2202      	movs	r2, #2
 8008464:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008466:	4b17      	ldr	r3, [pc, #92]	@ (80084c4 <USBD_LL_Init+0x88>)
 8008468:	2200      	movs	r2, #0
 800846a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800846c:	4b15      	ldr	r3, [pc, #84]	@ (80084c4 <USBD_LL_Init+0x88>)
 800846e:	2200      	movs	r2, #0
 8008470:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008472:	4b14      	ldr	r3, [pc, #80]	@ (80084c4 <USBD_LL_Init+0x88>)
 8008474:	2200      	movs	r2, #0
 8008476:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008478:	4812      	ldr	r0, [pc, #72]	@ (80084c4 <USBD_LL_Init+0x88>)
 800847a:	f7f8 fcc8 	bl	8000e0e <HAL_PCD_Init>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008484:	f7f7 ffe0 	bl	8000448 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800848e:	2318      	movs	r3, #24
 8008490:	2200      	movs	r2, #0
 8008492:	2100      	movs	r1, #0
 8008494:	f7fa f9cf 	bl	8002836 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800849e:	2358      	movs	r3, #88	@ 0x58
 80084a0:	2200      	movs	r2, #0
 80084a2:	2180      	movs	r1, #128	@ 0x80
 80084a4:	f7fa f9c7 	bl	8002836 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084b2:	2200      	movs	r2, #0
 80084b4:	2181      	movs	r1, #129	@ 0x81
 80084b6:	f7fa f9be 	bl	8002836 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	200006dc 	.word	0x200006dc
 80084c8:	40005c00 	.word	0x40005c00

080084cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f8 fd92 	bl	800100c <HAL_PCD_Start>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f93c 	bl	800876c <USBD_Get_USB_Status>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	4608      	mov	r0, r1
 800850c:	4611      	mov	r1, r2
 800850e:	461a      	mov	r2, r3
 8008510:	4603      	mov	r3, r0
 8008512:	70fb      	strb	r3, [r7, #3]
 8008514:	460b      	mov	r3, r1
 8008516:	70bb      	strb	r3, [r7, #2]
 8008518:	4613      	mov	r3, r2
 800851a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800852a:	78bb      	ldrb	r3, [r7, #2]
 800852c:	883a      	ldrh	r2, [r7, #0]
 800852e:	78f9      	ldrb	r1, [r7, #3]
 8008530:	f7f8 fee7 	bl	8001302 <HAL_PCD_EP_Open>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f916 	bl	800876c <USBD_Get_USB_Status>
 8008540:	4603      	mov	r3, r0
 8008542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008544:	7bbb      	ldrb	r3, [r7, #14]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008568:	78fa      	ldrb	r2, [r7, #3]
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f7f8 ff25 	bl	80013bc <HAL_PCD_EP_Close>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f8f7 	bl	800876c <USBD_Get_USB_Status>
 800857e:	4603      	mov	r3, r0
 8008580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008582:	7bbb      	ldrb	r3, [r7, #14]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085a6:	78fa      	ldrb	r2, [r7, #3]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f8 ffb6 	bl	800151c <HAL_PCD_EP_SetStall>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f8d8 	bl	800876c <USBD_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7f8 fff7 	bl	80015dc <HAL_PCD_EP_ClrStall>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 f8b9 	bl	800876c <USBD_Get_USB_Status>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800861a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800861c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008620:	2b00      	cmp	r3, #0
 8008622:	da0c      	bge.n	800863e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800862a:	68f9      	ldr	r1, [r7, #12]
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	440b      	add	r3, r1
 8008638:	3302      	adds	r3, #2
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	e00b      	b.n	8008656 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008644:	68f9      	ldr	r1, [r7, #12]
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	440b      	add	r3, r1
 8008650:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008654:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr

08008660 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7f8 fe1a 	bl	80012b8 <HAL_PCD_SetAddress>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f86e 	bl	800876c <USBD_Get_USB_Status>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b086      	sub	sp, #24
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	461a      	mov	r2, r3
 80086aa:	460b      	mov	r3, r1
 80086ac:	72fb      	strb	r3, [r7, #11]
 80086ae:	4613      	mov	r3, r2
 80086b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086c0:	893b      	ldrh	r3, [r7, #8]
 80086c2:	7af9      	ldrb	r1, [r7, #11]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	f7f8 fef2 	bl	80014ae <HAL_PCD_EP_Transmit>
 80086ca:	4603      	mov	r3, r0
 80086cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 f84b 	bl	800876c <USBD_Get_USB_Status>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086da:	7dbb      	ldrb	r3, [r7, #22]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	607a      	str	r2, [r7, #4]
 80086ee:	461a      	mov	r2, r3
 80086f0:	460b      	mov	r3, r1
 80086f2:	72fb      	strb	r3, [r7, #11]
 80086f4:	4613      	mov	r3, r2
 80086f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008706:	893b      	ldrh	r3, [r7, #8]
 8008708:	7af9      	ldrb	r1, [r7, #11]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	f7f8 fe9e 	bl	800144c <HAL_PCD_EP_Receive>
 8008710:	4603      	mov	r3, r0
 8008712:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f828 	bl	800876c <USBD_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008720:	7dbb      	ldrb	r3, [r7, #22]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008734:	4b02      	ldr	r3, [pc, #8]	@ (8008740 <USBD_static_malloc+0x14>)
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr
 8008740:	200009cc 	.word	0x200009cc

08008744 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr

08008756 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	bc80      	pop	{r7}
 800876a:	4770      	bx	lr

0800876c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b03      	cmp	r3, #3
 800877e:	d817      	bhi.n	80087b0 <USBD_Get_USB_Status+0x44>
 8008780:	a201      	add	r2, pc, #4	@ (adr r2, 8008788 <USBD_Get_USB_Status+0x1c>)
 8008782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008786:	bf00      	nop
 8008788:	08008799 	.word	0x08008799
 800878c:	0800879f 	.word	0x0800879f
 8008790:	080087a5 	.word	0x080087a5
 8008794:	080087ab 	.word	0x080087ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
    break;
 800879c:	e00b      	b.n	80087b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800879e:	2302      	movs	r3, #2
 80087a0:	73fb      	strb	r3, [r7, #15]
    break;
 80087a2:	e008      	b.n	80087b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
    break;
 80087a8:	e005      	b.n	80087b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087aa:	2302      	movs	r3, #2
 80087ac:	73fb      	strb	r3, [r7, #15]
    break;
 80087ae:	e002      	b.n	80087b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087b0:	2302      	movs	r3, #2
 80087b2:	73fb      	strb	r3, [r7, #15]
    break;
 80087b4:	bf00      	nop
  }
  return usb_status;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <memset>:
 80087c4:	4603      	mov	r3, r0
 80087c6:	4402      	add	r2, r0
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d100      	bne.n	80087ce <memset+0xa>
 80087cc:	4770      	bx	lr
 80087ce:	f803 1b01 	strb.w	r1, [r3], #1
 80087d2:	e7f9      	b.n	80087c8 <memset+0x4>

080087d4 <__libc_init_array>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	2600      	movs	r6, #0
 80087d8:	4d0c      	ldr	r5, [pc, #48]	@ (800880c <__libc_init_array+0x38>)
 80087da:	4c0d      	ldr	r4, [pc, #52]	@ (8008810 <__libc_init_array+0x3c>)
 80087dc:	1b64      	subs	r4, r4, r5
 80087de:	10a4      	asrs	r4, r4, #2
 80087e0:	42a6      	cmp	r6, r4
 80087e2:	d109      	bne.n	80087f8 <__libc_init_array+0x24>
 80087e4:	f000 f81a 	bl	800881c <_init>
 80087e8:	2600      	movs	r6, #0
 80087ea:	4d0a      	ldr	r5, [pc, #40]	@ (8008814 <__libc_init_array+0x40>)
 80087ec:	4c0a      	ldr	r4, [pc, #40]	@ (8008818 <__libc_init_array+0x44>)
 80087ee:	1b64      	subs	r4, r4, r5
 80087f0:	10a4      	asrs	r4, r4, #2
 80087f2:	42a6      	cmp	r6, r4
 80087f4:	d105      	bne.n	8008802 <__libc_init_array+0x2e>
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fc:	4798      	blx	r3
 80087fe:	3601      	adds	r6, #1
 8008800:	e7ee      	b.n	80087e0 <__libc_init_array+0xc>
 8008802:	f855 3b04 	ldr.w	r3, [r5], #4
 8008806:	4798      	blx	r3
 8008808:	3601      	adds	r6, #1
 800880a:	e7f2      	b.n	80087f2 <__libc_init_array+0x1e>
 800880c:	080088ac 	.word	0x080088ac
 8008810:	080088ac 	.word	0x080088ac
 8008814:	080088ac 	.word	0x080088ac
 8008818:	080088b0 	.word	0x080088b0

0800881c <_init>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	bf00      	nop
 8008820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008822:	bc08      	pop	{r3}
 8008824:	469e      	mov	lr, r3
 8008826:	4770      	bx	lr

08008828 <_fini>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	bf00      	nop
 800882c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882e:	bc08      	pop	{r3}
 8008830:	469e      	mov	lr, r3
 8008832:	4770      	bx	lr
