
f103_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008730  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800883c  0800883c  0000983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088b4  080088b4  0000a158  2**0
                  CONTENTS
  4 .ARM          00000000  080088b4  080088b4  0000a158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088b4  080088b4  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b4  080088b4  000098b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088b8  080088b8  000098b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080088bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000158  08008a14  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  08008a14  0000a9dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141fe  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003312  00000000  00000000  0001e37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00021698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de9  00000000  00000000  000228b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b9  00000000  00000000  00023699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d8b  00000000  00000000  0003d852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee68  00000000  00000000  000555dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b04  00000000  00000000  000e4488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e8f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08008824 	.word	0x08008824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08008824 	.word	0x08008824

0800014c <GetPointerData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*设置鼠标指针坐标�?*/
static void GetPointerData(uint8_t *pbuf)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  int8_t keyboard = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	73fb      	strb	r3, [r7, #15]
	
	if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == 0)
 8000158:	2102      	movs	r1, #2
 800015a:	4819      	ldr	r0, [pc, #100]	@ (80001c0 <GetPointerData+0x74>)
 800015c:	f000 fe44 	bl	8000de8 <HAL_GPIO_ReadPin>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d110      	bne.n	8000188 <GetPointerData+0x3c>
	{
		if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == 0)
 8000166:	2102      	movs	r1, #2
 8000168:	4815      	ldr	r0, [pc, #84]	@ (80001c0 <GetPointerData+0x74>)
 800016a:	f000 fe3d 	bl	8000de8 <HAL_GPIO_ReadPin>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d109      	bne.n	8000188 <GetPointerData+0x3c>
		{
			//printf("KEY0 Pressed : z/Z\r\n");
			keyboard = 0x1D;
 8000174:	231d      	movs	r3, #29
 8000176:	73fb      	strb	r3, [r7, #15]
			while(!HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin));
 8000178:	bf00      	nop
 800017a:	2102      	movs	r1, #2
 800017c:	4810      	ldr	r0, [pc, #64]	@ (80001c0 <GetPointerData+0x74>)
 800017e:	f000 fe33 	bl	8000de8 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d0f8      	beq.n	800017a <GetPointerData+0x2e>
		}
	}
	//合成键盘数据�?
	for(uint8_t i=0;i<8;i++)
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	e010      	b.n	80001b0 <GetPointerData+0x64>
	{
		if(i == 2) pbuf[i] = keyboard;
 800018e:	7bbb      	ldrb	r3, [r7, #14]
 8000190:	2b02      	cmp	r3, #2
 8000192:	d105      	bne.n	80001a0 <GetPointerData+0x54>
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	4413      	add	r3, r2
 800019a:	7bfa      	ldrb	r2, [r7, #15]
 800019c:	701a      	strb	r2, [r3, #0]
 800019e:	e004      	b.n	80001aa <GetPointerData+0x5e>
		else pbuf[i] = 0;
 80001a0:	7bbb      	ldrb	r3, [r7, #14]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	4413      	add	r3, r2
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<8;i++)
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	3301      	adds	r3, #1
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	7bbb      	ldrb	r3, [r7, #14]
 80001b2:	2b07      	cmp	r3, #7
 80001b4:	d9eb      	bls.n	800018e <GetPointerData+0x42>
	}
}
 80001b6:	bf00      	nop
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	40010800 	.word	0x40010800

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c8:	f000 fa68 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001cc:	f000 f810 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d0:	f000 f8de 	bl	8000390 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001d4:	f000 f8b2 	bl	800033c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f007 ff4e 	bl	8008078 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001dc:	f000 f862 	bl	80002a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001e0:	4802      	ldr	r0, [pc, #8]	@ (80001ec <main+0x28>)
 80001e2:	f003 f885 	bl	80032f0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	bf00      	nop
 80001e8:	e7fd      	b.n	80001e6 <main+0x22>
 80001ea:	bf00      	nop
 80001ec:	20000174 	.word	0x20000174

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	@ 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f008 fae4 	bl	80087cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fb3c 	bl	80028c4 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000252:	f000 f8fd 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000266:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2102      	movs	r1, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fda8 	bl	8002dc8 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027e:	f000 f8e7 	bl	8000450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000282:	2310      	movs	r3, #16
 8000284:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f002 ff29 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000298:	f000 f8da 	bl	8000450 <Error_Handler>
  }
}
 800029c:	bf00      	nop
 800029e:	3750      	adds	r7, #80	@ 0x50
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000338 <MX_TIM2_Init+0x94>)
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80002c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000338 <MX_TIM2_Init+0x94>)
 80002ca:	2247      	movs	r2, #71	@ 0x47
 80002cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <MX_TIM2_Init+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <MX_TIM2_Init+0x94>)
 80002d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002dc:	4b16      	ldr	r3, [pc, #88]	@ (8000338 <MX_TIM2_Init+0x94>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_TIM2_Init+0x94>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e8:	4813      	ldr	r0, [pc, #76]	@ (8000338 <MX_TIM2_Init+0x94>)
 80002ea:	f002 ffb1 	bl	8003250 <HAL_TIM_Base_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002f4:	f000 f8ac 	bl	8000450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	4619      	mov	r1, r3
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <MX_TIM2_Init+0x94>)
 8000306:	f003 f94d 	bl	80035a4 <HAL_TIM_ConfigClockSource>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000310:	f000 f89e 	bl	8000450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000314:	2300      	movs	r3, #0
 8000316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000318:	2300      	movs	r3, #0
 800031a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031c:	463b      	mov	r3, r7
 800031e:	4619      	mov	r1, r3
 8000320:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_TIM2_Init+0x94>)
 8000322:	f003 fb23 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800032c:	f000 f890 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000174 	.word	0x20000174

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f003 fb6a 	bl	8003a4c <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f867 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200001bc 	.word	0x200001bc
 800038c:	40013800 	.word	0x40013800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <MX_GPIO_Init+0x64>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a12      	ldr	r2, [pc, #72]	@ (80003f4 <MX_GPIO_Init+0x64>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b10      	ldr	r3, [pc, #64]	@ (80003f4 <MX_GPIO_Init+0x64>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b0d      	ldr	r3, [pc, #52]	@ (80003f4 <MX_GPIO_Init+0x64>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a0c      	ldr	r2, [pc, #48]	@ (80003f4 <MX_GPIO_Init+0x64>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <MX_GPIO_Init+0x64>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80003d4:	2302      	movs	r3, #2
 80003d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_GPIO_Init+0x68>)
 80003e8:	f000 fb7a 	bl	8000ae0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ec:	bf00      	nop
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010800 	.word	0x40010800

080003fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  static volatile uint32_t counter = 0;
    if (htim->Instance == TIM2)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800040c:	d115      	bne.n	800043a <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      /* check Joystick state every polling interval (10ms) */
      if(counter++ == USBD_HID_GetPollingInterval(&hUsbDeviceFS))
 800040e:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000410:	681c      	ldr	r4, [r3, #0]
 8000412:	1c63      	adds	r3, r4, #1
 8000414:	4a0b      	ldr	r2, [pc, #44]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	480b      	ldr	r0, [pc, #44]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800041a:	f006 fd4d 	bl	8006eb8 <USBD_HID_GetPollingInterval>
 800041e:	4603      	mov	r3, r0
 8000420:	429c      	cmp	r4, r3
 8000422:	d10a      	bne.n	800043a <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
      GetPointerData(HID_Buffer);
 8000424:	4809      	ldr	r0, [pc, #36]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000426:	f7ff fe91 	bl	800014c <GetPointerData>
        
      /* send data though IN endpoint*/
      USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 800042a:	2204      	movs	r2, #4
 800042c:	4907      	ldr	r1, [pc, #28]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800042e:	4806      	ldr	r0, [pc, #24]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000430:	f006 fd20 	bl	8006e74 <USBD_HID_SendReport>

      /* 重置counter */
      counter = 0;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
      }
    }
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bd90      	pop	{r4, r7, pc}
 8000442:	bf00      	nop
 8000444:	20000208 	.word	0x20000208
 8000448:	20000214 	.word	0x20000214
 800044c:	20000204 	.word	0x20000204

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <Error_Handler+0x8>

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	@ (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004d0:	d113      	bne.n	80004fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <HAL_TIM_Base_MspInit+0x44>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000504 <HAL_TIM_Base_MspInit+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <HAL_TIM_Base_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	201c      	movs	r0, #28
 80004f0:	f000 fa0d 	bl	800090e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004f4:	201c      	movs	r0, #28
 80004f6:	f000 fa26 	bl	8000946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a20      	ldr	r2, [pc, #128]	@ (80005a4 <HAL_UART_MspInit+0x9c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d139      	bne.n	800059c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000528:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <HAL_UART_MspInit+0xa0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a1e      	ldr	r2, [pc, #120]	@ (80005a8 <HAL_UART_MspInit+0xa0>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <HAL_UART_MspInit+0xa0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <HAL_UART_MspInit+0xa0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <HAL_UART_MspInit+0xa0>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <HAL_UART_MspInit+0xa0>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800055c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	2302      	movs	r3, #2
 8000560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4619      	mov	r1, r3
 800056c:	480f      	ldr	r0, [pc, #60]	@ (80005ac <HAL_UART_MspInit+0xa4>)
 800056e:	f000 fab7 	bl	8000ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	4809      	ldr	r0, [pc, #36]	@ (80005ac <HAL_UART_MspInit+0xa4>)
 8000588:	f000 faaa 	bl	8000ae0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2100      	movs	r1, #0
 8000590:	2025      	movs	r0, #37	@ 0x25
 8000592:	f000 f9bc 	bl	800090e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000596:	2025      	movs	r0, #37	@ 0x25
 8000598:	f000 f9d5 	bl	8000946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40013800 	.word	0x40013800
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <NMI_Handler+0x4>

080005b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <MemManage_Handler+0x4>

080005c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f892 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800060e:	f000 fd27 	bl	8001060 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200006d8 	.word	0x200006d8

0800061c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000620:	4802      	ldr	r0, [pc, #8]	@ (800062c <TIM2_IRQHandler+0x10>)
 8000622:	f002 feb7 	bl	8003394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000174 	.word	0x20000174

08000630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000634:	4802      	ldr	r0, [pc, #8]	@ (8000640 <USART1_IRQHandler+0x10>)
 8000636:	f003 fa59 	bl	8003aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200001bc 	.word	0x200001bc

08000644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000650:	f7ff fff8 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000656:	490c      	ldr	r1, [pc, #48]	@ (8000688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <LoopFillZerobss+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a09      	ldr	r2, [pc, #36]	@ (8000690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800066c:	4c09      	ldr	r4, [pc, #36]	@ (8000694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067a:	f008 f8af 	bl	80087dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fda1 	bl	80001c4 <main>
  bx lr
 8000682:	4770      	bx	lr
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800068c:	080088bc 	.word	0x080088bc
  ldr r2, =_sbss
 8000690:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000694:	200009dc 	.word	0x200009dc

08000698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_2_IRQHandler>
	...

0800069c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <HAL_Init+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <HAL_Init+0x28>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f923 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	200f      	movs	r0, #15
 80006b4:	f000 f808 	bl	80006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff fed0 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_InitTick+0x54>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_InitTick+0x58>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f93b 	bl	8000962 <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00e      	b.n	8000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d80a      	bhi.n	8000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 f903 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <HAL_InitTick+0x5c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_IncTick+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a03      	ldr	r2, [pc, #12]	@ (8000748 <HAL_IncTick+0x20>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000008 	.word	0x20000008
 8000748:	2000020c 	.word	0x2000020c

0800074c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b02      	ldr	r3, [pc, #8]	@ (800075c <HAL_GetTick+0x10>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	2000020c 	.word	0x2000020c

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800078c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000792:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db0b      	blt.n	80007ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	4906      	ldr	r1, [pc, #24]	@ (80007f8 <__NVIC_EnableIRQ+0x34>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	@ (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	@ (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	@ 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff90 	bl	80007fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff2d 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff42 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff90 	bl	8000850 <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5f 	bl	80007fc <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff35 	bl	80007c4 <__NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffa2 	bl	80008b4 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b02      	cmp	r3, #2
 8000990:	d008      	beq.n	80009a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2204      	movs	r2, #4
 8000996:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e020      	b.n	80009e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 020e 	bic.w	r2, r2, #14
 80009b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f022 0201 	bic.w	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009cc:	2101      	movs	r1, #1
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d005      	beq.n	8000a14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e051      	b.n	8000ab8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 020e 	bic.w	r2, r2, #14
 8000a22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0201 	bic.w	r2, r2, #1
 8000a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <HAL_DMA_Abort_IT+0xd4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d029      	beq.n	8000a92 <HAL_DMA_Abort_IT+0xa2>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a21      	ldr	r2, [pc, #132]	@ (8000ac8 <HAL_DMA_Abort_IT+0xd8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d022      	beq.n	8000a8e <HAL_DMA_Abort_IT+0x9e>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <HAL_DMA_Abort_IT+0xdc>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d01a      	beq.n	8000a88 <HAL_DMA_Abort_IT+0x98>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <HAL_DMA_Abort_IT+0xe0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d012      	beq.n	8000a82 <HAL_DMA_Abort_IT+0x92>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <HAL_DMA_Abort_IT+0xe4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00a      	beq.n	8000a7c <HAL_DMA_Abort_IT+0x8c>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <HAL_DMA_Abort_IT+0xe8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d102      	bne.n	8000a76 <HAL_DMA_Abort_IT+0x86>
 8000a70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a74:	e00e      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a7a:	e00b      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a80:	e008      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	e005      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a8c:	e002      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a8e:	2310      	movs	r3, #16
 8000a90:	e000      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a92:	2301      	movs	r3, #1
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <HAL_DMA_Abort_IT+0xec>)
 8000a96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	4798      	blx	r3
    } 
  }
  return status;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020008 	.word	0x40020008
 8000ac8:	4002001c 	.word	0x4002001c
 8000acc:	40020030 	.word	0x40020030
 8000ad0:	40020044 	.word	0x40020044
 8000ad4:	40020058 	.word	0x40020058
 8000ad8:	4002006c 	.word	0x4002006c
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08b      	sub	sp, #44	@ 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	e169      	b.n	8000dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af4:	2201      	movs	r2, #1
 8000af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	f040 8158 	bne.w	8000dc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	4a9a      	ldr	r2, [pc, #616]	@ (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d05e      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b1c:	4a98      	ldr	r2, [pc, #608]	@ (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d875      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b22:	4a98      	ldr	r2, [pc, #608]	@ (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d058      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b28:	4a96      	ldr	r2, [pc, #600]	@ (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d86f      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b2e:	4a96      	ldr	r2, [pc, #600]	@ (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d052      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b34:	4a94      	ldr	r2, [pc, #592]	@ (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d869      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b3a:	4a94      	ldr	r2, [pc, #592]	@ (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d04c      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b40:	4a92      	ldr	r2, [pc, #584]	@ (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d863      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b46:	4a92      	ldr	r2, [pc, #584]	@ (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d046      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b4c:	4a90      	ldr	r2, [pc, #576]	@ (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d85d      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d82a      	bhi.n	8000bac <HAL_GPIO_Init+0xcc>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d859      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b60 <HAL_GPIO_Init+0x80>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000bdb 	.word	0x08000bdb
 8000b64:	08000bb5 	.word	0x08000bb5
 8000b68:	08000bc7 	.word	0x08000bc7
 8000b6c:	08000c09 	.word	0x08000c09
 8000b70:	08000c0f 	.word	0x08000c0f
 8000b74:	08000c0f 	.word	0x08000c0f
 8000b78:	08000c0f 	.word	0x08000c0f
 8000b7c:	08000c0f 	.word	0x08000c0f
 8000b80:	08000c0f 	.word	0x08000c0f
 8000b84:	08000c0f 	.word	0x08000c0f
 8000b88:	08000c0f 	.word	0x08000c0f
 8000b8c:	08000c0f 	.word	0x08000c0f
 8000b90:	08000c0f 	.word	0x08000c0f
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000c0f 	.word	0x08000c0f
 8000b9c:	08000c0f 	.word	0x08000c0f
 8000ba0:	08000c0f 	.word	0x08000c0f
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bd1 	.word	0x08000bd1
 8000bac:	4a79      	ldr	r2, [pc, #484]	@ (8000d94 <HAL_GPIO_Init+0x2b4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d013      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb2:	e02c      	b.n	8000c0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e029      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e024      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	3308      	adds	r3, #8
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e01f      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e01a      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be2:	2304      	movs	r3, #4
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e013      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d105      	bne.n	8000bfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	611a      	str	r2, [r3, #16]
          break;
 8000bfa:	e009      	b.n	8000c10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	615a      	str	r2, [r3, #20]
          break;
 8000c06:	e003      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          break;
 8000c0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d801      	bhi.n	8000c1a <HAL_GPIO_Init+0x13a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	e001      	b.n	8000c1e <HAL_GPIO_Init+0x13e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2bff      	cmp	r3, #255	@ 0xff
 8000c24:	d802      	bhi.n	8000c2c <HAL_GPIO_Init+0x14c>
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0x152>
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	3b08      	subs	r3, #8
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	210f      	movs	r1, #15
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	401a      	ands	r2, r3
 8000c44:	6a39      	ldr	r1, [r7, #32]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80b1 	beq.w	8000dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c60:	4b4d      	ldr	r3, [pc, #308]	@ (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a4c      	ldr	r2, [pc, #304]	@ (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c78:	4a48      	ldr	r2, [pc, #288]	@ (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a40      	ldr	r2, [pc, #256]	@ (8000da0 <HAL_GPIO_Init+0x2c0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d013      	beq.n	8000ccc <HAL_GPIO_Init+0x1ec>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00d      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3e      	ldr	r2, [pc, #248]	@ (8000da8 <HAL_GPIO_Init+0x2c8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x1e4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000dac <HAL_GPIO_Init+0x2cc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d101      	bne.n	8000cc0 <HAL_GPIO_Init+0x1e0>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e004      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e002      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cde:	492f      	ldr	r1, [pc, #188]	@ (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	492c      	ldr	r1, [pc, #176]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d06:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4928      	ldr	r1, [pc, #160]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d20:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	4922      	ldr	r1, [pc, #136]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60cb      	str	r3, [r1, #12]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d2e:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	491e      	ldr	r1, [pc, #120]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4918      	ldr	r1, [pc, #96]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d56:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4914      	ldr	r1, [pc, #80]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d021      	beq.n	8000db4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	490e      	ldr	r1, [pc, #56]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
 8000d7c:	e021      	b.n	8000dc2 <HAL_GPIO_Init+0x2e2>
 8000d7e:	bf00      	nop
 8000d80:	10320000 	.word	0x10320000
 8000d84:	10310000 	.word	0x10310000
 8000d88:	10220000 	.word	0x10220000
 8000d8c:	10210000 	.word	0x10210000
 8000d90:	10120000 	.word	0x10120000
 8000d94:	10110000 	.word	0x10110000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40011400 	.word	0x40011400
 8000db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4909      	ldr	r1, [pc, #36]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dce:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f47f ae8e 	bne.w	8000af4 <HAL_GPIO_Init+0x14>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	372c      	adds	r7, #44	@ 0x2c
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e001      	b.n	8000e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e18:	b08b      	sub	sp, #44	@ 0x2c
 8000e1a:	af06      	add	r7, sp, #24
 8000e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d101      	bne.n	8000e28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e0f1      	b.n	800100c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d106      	bne.n	8000e42 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f007 fa3f 	bl	80082c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fb54 	bl	80044fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	687e      	ldr	r6, [r7, #4]
 8000e5c:	466d      	mov	r5, sp
 8000e5e:	f106 0410 	add.w	r4, r6, #16
 8000e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	602b      	str	r3, [r5, #0]
 8000e6a:	1d33      	adds	r3, r6, #4
 8000e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e6e:	6838      	ldr	r0, [r7, #0]
 8000e70:	f003 fb1e 	bl	80044b0 <USB_CoreInit>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0c2      	b.n	800100c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fb4f 	bl	8004530 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	e040      	b.n	8000f1a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3303      	adds	r3, #3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3338      	adds	r3, #56	@ 0x38
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eec:	7bfa      	ldrb	r2, [r7, #15]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	440b      	add	r3, r1
 8000efa:	333c      	adds	r3, #60	@ 0x3c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3340      	adds	r3, #64	@ 0x40
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	3301      	adds	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3b9      	bcc.n	8000e98 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e044      	b.n	8000fb4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3b5      	bcc.n	8000f2a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	687e      	ldr	r6, [r7, #4]
 8000fc6:	466d      	mov	r5, sp
 8000fc8:	f106 0410 	add.w	r4, r6, #16
 8000fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	602b      	str	r3, [r5, #0]
 8000fd4:	1d33      	adds	r3, r6, #4
 8000fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd8:	6838      	ldr	r0, [r7, #0]
 8000fda:	f003 fab5 	bl	8004548 <USB_DevInit>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e00d      	b.n	800100c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fd36 	bl	8006a76 <USB_DevDisconnect>

  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001014 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <HAL_PCD_Start+0x16>
 8001026:	2302      	movs	r3, #2
 8001028:	e016      	b.n	8001058 <HAL_PCD_Start+0x44>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fa4a 	bl	80044d0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800103c:	2101      	movs	r1, #1
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f007 fb8d 	bl	800875e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f005 fd0a 	bl	8006a62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fd0c 	bl	8006a8a <USB_ReadInterrupts>
 8001072:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fb04 	bl	800168c <PCD_EP_ISR_Handler>

    return;
 8001084:	e119      	b.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010a2:	b292      	uxth	r2, r2
 80010a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f007 f984 	bl	80083b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010ae:	2100      	movs	r1, #0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f905 	bl	80012c0 <HAL_PCD_SetAddress>

    return;
 80010b6:	e100      	b.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00c      	beq.n	80010dc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010d4:	b292      	uxth	r2, r2
 80010d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010da:	e0ee      	b.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00c      	beq.n	8001100 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010f8:	b292      	uxth	r2, r2
 80010fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010fe:	e0dc      	b.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d027      	beq.n	800115a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0204 	bic.w	r2, r2, #4
 800111c:	b292      	uxth	r2, r2
 800111e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0208 	bic.w	r2, r2, #8
 8001134:	b292      	uxth	r2, r2
 8001136:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f007 f974 	bl	8008428 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001148:	b29a      	uxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001152:	b292      	uxth	r2, r2
 8001154:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001158:	e0af      	b.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8083 	beq.w	800126c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	77fb      	strb	r3, [r7, #31]
 800116a:	e010      	b.n	800118e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	441a      	add	r2, r3
 8001178:	7ffb      	ldrb	r3, [r7, #31]
 800117a:	8812      	ldrh	r2, [r2, #0]
 800117c:	b292      	uxth	r2, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	3320      	adds	r3, #32
 8001182:	443b      	add	r3, r7
 8001184:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	3301      	adds	r3, #1
 800118c:	77fb      	strb	r3, [r7, #31]
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	2b07      	cmp	r3, #7
 8001192:	d9eb      	bls.n	800116c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	b292      	uxth	r2, r2
 80011a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	b292      	uxth	r2, r2
 80011c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011c4:	bf00      	nop
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f6      	beq.n	80011c6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	77fb      	strb	r3, [r7, #31]
 80011f4:	e00f      	b.n	8001216 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	4611      	mov	r1, r2
 80011fe:	7ffa      	ldrb	r2, [r7, #31]
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	440a      	add	r2, r1
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	3320      	adds	r3, #32
 8001208:	443b      	add	r3, r7
 800120a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800120e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	3301      	adds	r3, #1
 8001214:	77fb      	strb	r3, [r7, #31]
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	2b07      	cmp	r3, #7
 800121a:	d9ec      	bls.n	80011f6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0208 	orr.w	r2, r2, #8
 800122e:	b292      	uxth	r2, r2
 8001230:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001246:	b292      	uxth	r2, r2
 8001248:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0204 	orr.w	r2, r2, #4
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f007 f8c5 	bl	80083f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800126a:	e026      	b.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00f      	beq.n	8001296 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001288:	b292      	uxth	r2, r2
 800128a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f007 f883 	bl	800839a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001294:	e011      	b.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00c      	beq.n	80012ba <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012b2:	b292      	uxth	r2, r2
 80012b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012b8:	bf00      	nop
  }
}
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_PCD_SetAddress+0x1a>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e013      	b.n	8001302 <HAL_PCD_SetAddress+0x42>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	78fa      	ldrb	r2, [r7, #3]
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 fba2 	bl	8006a3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	4608      	mov	r0, r1
 8001314:	4611      	mov	r1, r2
 8001316:	461a      	mov	r2, r3
 8001318:	4603      	mov	r3, r0
 800131a:	70fb      	strb	r3, [r7, #3]
 800131c:	460b      	mov	r3, r1
 800131e:	803b      	strh	r3, [r7, #0]
 8001320:	4613      	mov	r3, r2
 8001322:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800132c:	2b00      	cmp	r3, #0
 800132e:	da0e      	bge.n	800134e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	705a      	strb	r2, [r3, #1]
 800134c:	e00e      	b.n	800136c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0207 	and.w	r2, r3, #7
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001378:	883a      	ldrh	r2, [r7, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	78ba      	ldrb	r2, [r7, #2]
 8001382:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001384:	78bb      	ldrb	r3, [r7, #2]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d102      	bne.n	8001390 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_PCD_EP_Open+0x94>
 800139a:	2302      	movs	r3, #2
 800139c:	e00e      	b.n	80013bc <HAL_PCD_EP_Open+0xb2>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68f9      	ldr	r1, [r7, #12]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 f8eb 	bl	8004588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80013ba:	7afb      	ldrb	r3, [r7, #11]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da0e      	bge.n	80013f6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2201      	movs	r2, #1
 80013f2:	705a      	strb	r2, [r3, #1]
 80013f4:	e00e      	b.n	8001414 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f003 0207 	and.w	r2, r3, #7
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	b2da      	uxtb	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_PCD_EP_Close+0x6a>
 800142a:	2302      	movs	r3, #2
 800142c:	e00e      	b.n	800144c <HAL_PCD_EP_Close+0x88>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	f003 fc63 	bl	8004d08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	460b      	mov	r3, r1
 8001462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001464:	7afb      	ldrb	r3, [r7, #11]
 8001466:	f003 0207 	and.w	r2, r3, #7
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	b2da      	uxtb	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6979      	ldr	r1, [r7, #20]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fe1a 	bl	80050e0 <USB_EPStartXfer>

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	460b      	mov	r3, r1
 80014c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c6:	7afb      	ldrb	r3, [r7, #11]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2201      	movs	r2, #1
 8001500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	b2da      	uxtb	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6979      	ldr	r1, [r7, #20]
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fde3 	bl	80050e0 <USB_EPStartXfer>

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d901      	bls.n	8001542 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e04c      	b.n	80015dc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	da0e      	bge.n	8001568 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2201      	movs	r2, #1
 8001564:	705a      	strb	r2, [r3, #1]
 8001566:	e00c      	b.n	8001582 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001568:	78fa      	ldrb	r2, [r7, #3]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	b2da      	uxtb	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_PCD_EP_SetStall+0x7e>
 800159e:	2302      	movs	r3, #2
 80015a0:	e01c      	b.n	80015dc <HAL_PCD_EP_SetStall+0xb8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68f9      	ldr	r1, [r7, #12]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 f946 	bl	8006842 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d108      	bne.n	80015d2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f005 fa6b 	bl	8006aa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	f003 020f 	and.w	r2, r3, #15
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d901      	bls.n	8001602 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e040      	b.n	8001684 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001606:	2b00      	cmp	r3, #0
 8001608:	da0e      	bge.n	8001628 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2201      	movs	r2, #1
 8001624:	705a      	strb	r2, [r3, #1]
 8001626:	e00e      	b.n	8001646 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 0207 	and.w	r2, r3, #7
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	b2da      	uxtb	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_PCD_EP_ClrStall+0x82>
 8001662:	2302      	movs	r3, #2
 8001664:	e00e      	b.n	8001684 <HAL_PCD_EP_ClrStall+0xa0>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	4618      	mov	r0, r3
 8001676:	f005 f934 	bl	80068e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b096      	sub	sp, #88	@ 0x58
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001694:	e3be      	b.n	8001e14 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800169e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80016b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 8178 	bne.w	80019aa <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d151      	bne.n	800176a <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80016d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016d6:	81fb      	strh	r3, [r7, #14]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3328      	adds	r3, #40	@ 0x28
 80016ee:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4413      	add	r3, r2
 8001704:	3302      	adds	r3, #2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	4413      	add	r3, r2
 800170e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800171a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800171c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	441a      	add	r2, r3
 8001726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001728:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800172a:	2100      	movs	r1, #0
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f006 fe1a 	bl	8008366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 836a 	beq.w	8001e14 <PCD_EP_ISR_Handler+0x788>
 8001740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f040 8365 	bne.w	8001e14 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001756:	b2da      	uxtb	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001768:	e354      	b.n	8001e14 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001770:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800177c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001784:	2b00      	cmp	r3, #0
 8001786:	d034      	beq.n	80017f2 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001790:	b29b      	uxth	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	3306      	adds	r3, #6
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80017be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f005 f9be 	bl	8006b48 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017d8:	4013      	ands	r3, r2
 80017da:	823b      	strh	r3, [r7, #16]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	8a3a      	ldrh	r2, [r7, #16]
 80017e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017e6:	b292      	uxth	r2, r2
 80017e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f006 fd8e 	bl	800830c <HAL_PCD_SetupStageCallback>
 80017f0:	e310      	b.n	8001e14 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017f2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f280 830c 	bge.w	8001e14 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29a      	uxth	r2, r3
 8001804:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001808:	4013      	ands	r3, r2
 800180a:	83fb      	strh	r3, [r7, #30]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	8bfa      	ldrh	r2, [r7, #30]
 8001812:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001816:	b292      	uxth	r2, r2
 8001818:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	3306      	adds	r3, #6
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001844:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d019      	beq.n	8001882 <PCD_EP_ISR_Handler+0x1f6>
 800184e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d015      	beq.n	8001882 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185c:	6959      	ldr	r1, [r3, #20]
 800185e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001860:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001864:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001866:	b29b      	uxth	r3, r3
 8001868:	f005 f96e 	bl	8006b48 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800186c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	441a      	add	r2, r3
 8001876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001878:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800187a:	2100      	movs	r1, #0
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f006 fd57 	bl	8008330 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800188c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 82bd 	bne.w	8001e14 <PCD_EP_ISR_Handler+0x788>
 800189a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800189e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80018a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80018a6:	f000 82b5 	beq.w	8001e14 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	4413      	add	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b3e      	cmp	r3, #62	@ 0x3e
 80018e0:	d91d      	bls.n	800191e <PCD_EP_ISR_Handler+0x292>
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80018ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <PCD_EP_ISR_Handler+0x270>
 80018f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f8:	3b01      	subs	r3, #1
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29a      	uxth	r2, r3
 8001902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001904:	b29b      	uxth	r3, r3
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	b29b      	uxth	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001916:	b29a      	uxth	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	e026      	b.n	800196c <PCD_EP_ISR_Handler+0x2e0>
 800191e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <PCD_EP_ISR_Handler+0x2b0>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001934:	b29a      	uxth	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	e017      	b.n	800196c <PCD_EP_ISR_Handler+0x2e0>
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	647b      	str	r3, [r7, #68]	@ 0x44
 8001944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <PCD_EP_ISR_Handler+0x2ca>
 8001950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001952:	3301      	adds	r3, #1
 8001954:	647b      	str	r3, [r7, #68]	@ 0x44
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29a      	uxth	r2, r3
 800195c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195e:	b29b      	uxth	r3, r3
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	b29b      	uxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b29a      	uxth	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800197c:	827b      	strh	r3, [r7, #18]
 800197e:	8a7b      	ldrh	r3, [r7, #18]
 8001980:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001984:	827b      	strh	r3, [r7, #18]
 8001986:	8a7b      	ldrh	r3, [r7, #18]
 8001988:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800198c:	827b      	strh	r3, [r7, #18]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	8a7b      	ldrh	r3, [r7, #18]
 8001994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800199c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	8013      	strh	r3, [r2, #0]
 80019a8:	e234      	b.n	8001e14 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019be:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f280 80fc 	bge.w	8001bc0 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019de:	4013      	ands	r3, r2
 80019e0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80019f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019fa:	b292      	uxth	r2, r2
 80019fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019fe:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a16:	7b1b      	ldrb	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d125      	bne.n	8001a68 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3306      	adds	r3, #6
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a44:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001a48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8092 	beq.w	8001b76 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a58:	6959      	ldr	r1, [r3, #20]
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5c:	88da      	ldrh	r2, [r3, #6]
 8001a5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a62:	f005 f871 	bl	8006b48 <USB_ReadPMA>
 8001a66:	e086      	b.n	8001b76 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6a:	78db      	ldrb	r3, [r3, #3]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d10a      	bne.n	8001a86 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a74:	461a      	mov	r2, r3
 8001a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f9d9 	bl	8001e30 <HAL_PCD_EP_DB_Receive>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001a84:	e077      	b.n	8001b76 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001aa0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	441a      	add	r2, r3
 8001ab2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d024      	beq.n	8001b2e <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	3302      	adds	r3, #2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b0c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d02e      	beq.n	8001b76 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	6959      	ldr	r1, [r3, #20]
 8001b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b22:	891a      	ldrh	r2, [r3, #8]
 8001b24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b28:	f005 f80e 	bl	8006b48 <USB_ReadPMA>
 8001b2c:	e023      	b.n	8001b76 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	3306      	adds	r3, #6
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b68:	6959      	ldr	r1, [r3, #20]
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6c:	895a      	ldrh	r2, [r3, #10]
 8001b6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b72:	f004 ffe9 	bl	8006b48 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b7e:	441a      	add	r2, r3
 8001b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b8c:	441a      	add	r2, r3
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b90:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <PCD_EP_ISR_Handler+0x51a>
 8001b9a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d206      	bcs.n	8001bb4 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f006 fbbf 	bl	8008330 <HAL_PCD_DataOutStageCallback>
 8001bb2:	e005      	b.n	8001bc0 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fa90 	bl	80050e0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8123 	beq.w	8001e14 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bfc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	441a      	add	r2, r3
 8001c0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c20:	78db      	ldrb	r3, [r3, #3]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	f040 80a2 	bne.w	8001d6c <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c30:	7b1b      	ldrb	r3, [r3, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8093 	beq.w	8001d5e <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d046      	beq.n	8001cd2 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d126      	bne.n	8001c9a <PCD_EP_ISR_Handler+0x60e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	4413      	add	r3, r2
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	011a      	lsls	r2, r3, #4
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	801a      	strh	r2, [r3, #0]
 8001c98:	e061      	b.n	8001d5e <PCD_EP_ISR_Handler+0x6d2>
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d15d      	bne.n	8001d5e <PCD_EP_ISR_Handler+0x6d2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb6:	4413      	add	r3, r2
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	011a      	lsls	r2, r3, #4
 8001cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e045      	b.n	8001d5e <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d126      	bne.n	8001d2e <PCD_EP_ISR_Handler+0x6a2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf4:	4413      	add	r3, r2
 8001cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	011a      	lsls	r2, r3, #4
 8001cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d00:	4413      	add	r3, r2
 8001d02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	e017      	b.n	8001d5e <PCD_EP_ISR_Handler+0x6d2>
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d113      	bne.n	8001d5e <PCD_EP_ISR_Handler+0x6d2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d44:	4413      	add	r3, r2
 8001d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	011a      	lsls	r2, r3, #4
 8001d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d50:	4413      	add	r3, r2
 8001d52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f006 fafe 	bl	8008366 <HAL_PCD_DataInStageCallback>
 8001d6a:	e053      	b.n	8001e14 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d146      	bne.n	8001e06 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d907      	bls.n	8001dc0 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	e002      	b.n	8001dc6 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f006 fac6 	bl	8008366 <HAL_PCD_DataInStageCallback>
 8001dda:	e01b      	b.n	8001e14 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001de4:	441a      	add	r2, r3
 8001de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001df2:	441a      	add	r2, r3
 8001df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f96e 	bl	80050e0 <USB_EPStartXfer>
 8001e04:	e006      	b.n	8001e14 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f91b 	bl	800204a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f6ff ac38 	blt.w	8001696 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3758      	adds	r7, #88	@ 0x58
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d07e      	beq.n	8001f46 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	8b7b      	ldrh	r3, [r7, #26]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d306      	bcc.n	8001e8a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	8b7b      	ldrh	r3, [r7, #26]
 8001e82:	1ad2      	subs	r2, r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	619a      	str	r2, [r3, #24]
 8001e88:	e002      	b.n	8001e90 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d123      	bne.n	8001ee0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eb2:	833b      	strh	r3, [r7, #24]
 8001eb4:	8b3b      	ldrh	r3, [r7, #24]
 8001eb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001eba:	833b      	strh	r3, [r7, #24]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	441a      	add	r2, r3
 8001eca:	8b3b      	ldrh	r3, [r7, #24]
 8001ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01f      	beq.n	8001f2a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f04:	82fb      	strh	r3, [r7, #22]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	441a      	add	r2, r3
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f2a:	8b7b      	ldrh	r3, [r7, #26]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8087 	beq.w	8002040 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	6959      	ldr	r1, [r3, #20]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	891a      	ldrh	r2, [r3, #8]
 8001f3e:	8b7b      	ldrh	r3, [r7, #26]
 8001f40:	f004 fe02 	bl	8006b48 <USB_ReadPMA>
 8001f44:	e07c      	b.n	8002040 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3306      	adds	r3, #6
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d306      	bcc.n	8001f88 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	8b7b      	ldrh	r3, [r7, #26]
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	e002      	b.n	8001f8e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d123      	bne.n	8001fde <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fb0:	83fb      	strh	r3, [r7, #30]
 8001fb2:	8bfb      	ldrh	r3, [r7, #30]
 8001fb4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fb8:	83fb      	strh	r3, [r7, #30]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	441a      	add	r2, r3
 8001fc8:	8bfb      	ldrh	r3, [r7, #30]
 8001fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11f      	bne.n	8002028 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002002:	83bb      	strh	r3, [r7, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	441a      	add	r2, r3
 8002012:	8bbb      	ldrh	r3, [r7, #28]
 8002014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800201c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002020:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002024:	b29b      	uxth	r3, r3
 8002026:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002028:	8b7b      	ldrh	r3, [r7, #26]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	6959      	ldr	r1, [r3, #20]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	895a      	ldrh	r2, [r3, #10]
 800203a:	8b7b      	ldrh	r3, [r7, #26]
 800203c:	f004 fd84 	bl	8006b48 <USB_ReadPMA>
    }
  }

  return count;
 8002040:	8b7b      	ldrh	r3, [r7, #26]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b0a4      	sub	sp, #144	@ 0x90
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	4613      	mov	r3, r2
 8002056:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 81dd 	beq.w	800241e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800206c:	b29b      	uxth	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	3302      	adds	r3, #2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002098:	429a      	cmp	r2, r3
 800209a:	d907      	bls.n	80020ac <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020a4:	1ad2      	subs	r2, r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	619a      	str	r2, [r3, #24]
 80020aa:	e002      	b.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 80b9 	bne.w	800222e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d126      	bne.n	8002112 <HAL_PCD_EP_DB_Transmit+0xc8>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	4413      	add	r3, r2
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	011a      	lsls	r2, r3, #4
 80020e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e4:	4413      	add	r3, r2
 80020e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210a:	b29a      	uxth	r2, r3
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	801a      	strh	r2, [r3, #0]
 8002110:	e01a      	b.n	8002148 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d116      	bne.n	8002148 <HAL_PCD_EP_DB_Transmit+0xfe>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002128:	b29b      	uxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800212e:	4413      	add	r3, r2
 8002130:	637b      	str	r3, [r7, #52]	@ 0x34
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	011a      	lsls	r2, r3, #4
 8002138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213a:	4413      	add	r3, r2
 800213c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002140:	633b      	str	r3, [r7, #48]	@ 0x30
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	2200      	movs	r2, #0
 8002146:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d126      	bne.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	4413      	add	r3, r2
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	011a      	lsls	r2, r3, #4
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002188:	b29a      	uxth	r2, r3
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219c:	b29a      	uxth	r2, r3
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	e017      	b.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	785b      	ldrb	r3, [r3, #1]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d113      	bne.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	4413      	add	r3, r2
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	011a      	lsls	r2, r3, #4
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	4413      	add	r3, r2
 80021c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021cc:	623b      	str	r3, [r7, #32]
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2200      	movs	r2, #0
 80021d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f006 f8c3 	bl	8008366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 82fc 	beq.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002206:	82fb      	strh	r3, [r7, #22]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	441a      	add	r2, r3
 8002216:	8afb      	ldrh	r3, [r7, #22]
 8002218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800221c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002228:	b29b      	uxth	r3, r3
 800222a:	8013      	strh	r3, [r2, #0]
 800222c:	e2da      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d021      	beq.n	800227c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800224e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002252:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 82ae 	bne.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002290:	441a      	add	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800229e:	441a      	add	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d30b      	bcc.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	621a      	str	r2, [r3, #32]
 80022c6:	e017      	b.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80022d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022e0:	e00a      	b.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2200      	movs	r2, #0
 80022f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d165      	bne.n	80023cc <HAL_PCD_EP_DB_Transmit+0x382>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002314:	4413      	add	r3, r2
 8002316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	011a      	lsls	r2, r3, #4
 800231e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002320:	4413      	add	r3, r2
 8002322:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002332:	b29a      	uxth	r2, r3
 8002334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800233c:	2b3e      	cmp	r3, #62	@ 0x3e
 800233e:	d91d      	bls.n	800237c <HAL_PCD_EP_DB_Transmit+0x332>
 8002340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002348:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <HAL_PCD_EP_DB_Transmit+0x310>
 8002354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002356:	3b01      	subs	r3, #1
 8002358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800235a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29a      	uxth	r2, r3
 8002360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002362:	b29b      	uxth	r3, r3
 8002364:	029b      	lsls	r3, r3, #10
 8002366:	b29b      	uxth	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002374:	b29a      	uxth	r2, r3
 8002376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	e044      	b.n	8002406 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800237c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_PCD_EP_DB_Transmit+0x350>
 8002384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800238e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002392:	b29a      	uxth	r2, r3
 8002394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	e035      	b.n	8002406 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800239a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80023ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b0:	3301      	adds	r3, #1
 80023b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023bc:	b29b      	uxth	r3, r3
 80023be:	029b      	lsls	r3, r3, #10
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	e01c      	b.n	8002406 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d118      	bne.n	8002406 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e8:	4413      	add	r3, r2
 80023ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	011a      	lsls	r2, r3, #4
 80023f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f4:	4413      	add	r3, r2
 80023f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80023fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002400:	b29a      	uxth	r2, r3
 8002402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002404:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6959      	ldr	r1, [r3, #20]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	891a      	ldrh	r2, [r3, #8]
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002416:	b29b      	uxth	r3, r3
 8002418:	f004 fb51 	bl	8006abe <USB_WritePMA>
 800241c:	e1e2      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	3306      	adds	r3, #6
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002446:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002452:	429a      	cmp	r2, r3
 8002454:	d307      	bcc.n	8002466 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	e002      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 80c0 	bne.w	80025f6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d126      	bne.n	80024cc <HAL_PCD_EP_DB_Transmit+0x482>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002492:	4413      	add	r3, r2
 8002494:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	011a      	lsls	r2, r3, #4
 800249c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800249e:	4413      	add	r3, r2
 80024a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	e01a      	b.n	8002502 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d116      	bne.n	8002502 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024e8:	4413      	add	r3, r2
 80024ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	011a      	lsls	r2, r3, #4
 80024f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80024fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	677b      	str	r3, [r7, #116]	@ 0x74
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12b      	bne.n	8002568 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002524:	4413      	add	r3, r2
 8002526:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	011a      	lsls	r2, r3, #4
 800252e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002530:	4413      	add	r3, r2
 8002532:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002536:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800253a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002546:	b29a      	uxth	r2, r3
 8002548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255e:	b29a      	uxth	r2, r3
 8002560:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	e017      	b.n	8002598 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d113      	bne.n	8002598 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800257e:	4413      	add	r3, r2
 8002580:	677b      	str	r3, [r7, #116]	@ 0x74
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	011a      	lsls	r2, r3, #4
 8002588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800258a:	4413      	add	r3, r2
 800258c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002590:	673b      	str	r3, [r7, #112]	@ 0x70
 8002592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002594:	2200      	movs	r2, #0
 8002596:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f005 fee1 	bl	8008366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 811a 	bne.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ca:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	441a      	add	r2, r3
 80025dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	8013      	strh	r3, [r2, #0]
 80025f4:	e0f6      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d121      	bne.n	8002644 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800261a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800263c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002640:	b29b      	uxth	r3, r3
 8002642:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800264a:	2b01      	cmp	r3, #1
 800264c:	f040 80ca 	bne.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002658:	441a      	add	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002666:	441a      	add	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d30b      	bcc.n	8002690 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002688:	1ad2      	subs	r2, r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	621a      	str	r2, [r3, #32]
 800268e:	e017      	b.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d108      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002698:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800269c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80026a8:	e00a      	b.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d165      	bne.n	800279a <HAL_PCD_EP_DB_Transmit+0x750>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026e2:	4413      	add	r3, r2
 80026e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	011a      	lsls	r2, r3, #4
 80026ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ee:	4413      	add	r3, r2
 80026f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002700:	b29a      	uxth	r2, r3
 8002702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	2b3e      	cmp	r3, #62	@ 0x3e
 800270c:	d91d      	bls.n	800274a <HAL_PCD_EP_DB_Transmit+0x700>
 800270e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002722:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002724:	3b01      	subs	r3, #1
 8002726:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29a      	uxth	r2, r3
 800272e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002730:	b29b      	uxth	r3, r3
 8002732:	029b      	lsls	r3, r3, #10
 8002734:	b29b      	uxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800273e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002742:	b29a      	uxth	r2, r3
 8002744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002746:	801a      	strh	r2, [r3, #0]
 8002748:	e041      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x784>
 800274a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800275c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002760:	b29a      	uxth	r2, r3
 8002762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	e032      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x784>
 8002768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_PCD_EP_DB_Transmit+0x738>
 800277c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800277e:	3301      	adds	r3, #1
 8002780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29a      	uxth	r2, r3
 8002788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800278a:	b29b      	uxth	r3, r3
 800278c:	029b      	lsls	r3, r3, #10
 800278e:	b29b      	uxth	r3, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	b29a      	uxth	r2, r3
 8002794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	e019      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x784>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	785b      	ldrb	r3, [r3, #1]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d115      	bne.n	80027ce <HAL_PCD_EP_DB_Transmit+0x784>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b0:	4413      	add	r3, r2
 80027b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	011a      	lsls	r2, r3, #4
 80027ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027bc:	4413      	add	r3, r2
 80027be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80027c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6959      	ldr	r1, [r3, #20]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	895a      	ldrh	r2, [r3, #10]
 80027da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f004 f96d 	bl	8006abe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027fe:	82bb      	strh	r3, [r7, #20]
 8002800:	8abb      	ldrh	r3, [r7, #20]
 8002802:	f083 0310 	eor.w	r3, r3, #16
 8002806:	82bb      	strh	r3, [r7, #20]
 8002808:	8abb      	ldrh	r3, [r7, #20]
 800280a:	f083 0320 	eor.w	r3, r3, #32
 800280e:	82bb      	strh	r3, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	8abb      	ldrh	r3, [r7, #20]
 8002820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002830:	b29b      	uxth	r3, r3
 8002832:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3790      	adds	r7, #144	@ 0x90
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800283e:	b480      	push	{r7}
 8002840:	b087      	sub	sp, #28
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	817b      	strh	r3, [r7, #10]
 800284c:	4613      	mov	r3, r2
 800284e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002850:	897b      	ldrh	r3, [r7, #10]
 8002852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285c:	897b      	ldrh	r3, [r7, #10]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e009      	b.n	8002888 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002874:	897a      	ldrh	r2, [r7, #10]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002888:	893b      	ldrh	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	b29a      	uxth	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	80da      	strh	r2, [r3, #6]
 800289c:	e00b      	b.n	80028b6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2201      	movs	r2, #1
 80028a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e272      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8087 	beq.w	80029f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e4:	4b92      	ldr	r3, [pc, #584]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d00c      	beq.n	800290a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d112      	bne.n	8002922 <HAL_RCC_OscConfig+0x5e>
 80028fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002908:	d10b      	bne.n	8002922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	4b89      	ldr	r3, [pc, #548]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d06c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x12c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d168      	bne.n	80029f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e24c      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x76>
 800292c:	4b80      	ldr	r3, [pc, #512]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7f      	ldr	r2, [pc, #508]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e02e      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x98>
 8002942:	4b7b      	ldr	r3, [pc, #492]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7a      	ldr	r2, [pc, #488]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b78      	ldr	r3, [pc, #480]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a77      	ldr	r2, [pc, #476]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002954:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0xbc>
 8002966:	4b72      	ldr	r3, [pc, #456]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a71      	ldr	r2, [pc, #452]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6e      	ldr	r2, [pc, #440]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xd4>
 8002980:	4b6b      	ldr	r3, [pc, #428]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6a      	ldr	r2, [pc, #424]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b68      	ldr	r3, [pc, #416]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a67      	ldr	r2, [pc, #412]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fd fed4 	bl	800074c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fd fed0 	bl	800074c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e200      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe4>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fd fec0 	bl	800074c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fd febc 	bl	800074c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	@ 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1ec      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x10c>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a0a:	4b49      	ldr	r3, [pc, #292]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d11c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x18c>
 8002a16:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x176>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1c0      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4939      	ldr	r1, [pc, #228]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	e03a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4b36      	ldr	r3, [pc, #216]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fd fe75 	bl	800074c <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fd fe71 	bl	800074c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1a1      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4927      	ldr	r1, [pc, #156]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fd fe54 	bl	800074c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa8:	f7fd fe50 	bl	800074c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e180      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03a      	beq.n	8002b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ada:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <HAL_RCC_OscConfig+0x274>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7fd fe34 	bl	800074c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fd fe30 	bl	800074c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e160      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f000 face 	bl	80030a8 <RCC_Delay>
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_RCC_OscConfig+0x274>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fd fe1a 	bl	800074c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1a:	e00f      	b.n	8002b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7fd fe16 	bl	800074c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d908      	bls.n	8002b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e146      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	42420000 	.word	0x42420000
 8002b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b92      	ldr	r3, [pc, #584]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e9      	bne.n	8002b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a6 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	4b88      	ldr	r3, [pc, #544]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a87      	ldr	r2, [pc, #540]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b85      	ldr	r3, [pc, #532]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b82      	ldr	r3, [pc, #520]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d118      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7e      	ldr	r2, [pc, #504]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9a:	f7fd fdd7 	bl	800074c <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba2:	f7fd fdd3 	bl	800074c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	@ 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e103      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	4b75      	ldr	r3, [pc, #468]	@ (8002d8c <HAL_RCC_OscConfig+0x4c8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x312>
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	e02d      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x334>
 8002bde:	4b6a      	ldr	r3, [pc, #424]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4a69      	ldr	r2, [pc, #420]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6213      	str	r3, [r2, #32]
 8002bea:	4b67      	ldr	r3, [pc, #412]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a66      	ldr	r2, [pc, #408]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	e01c      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x356>
 8002c00:	4b61      	ldr	r3, [pc, #388]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a60      	ldr	r2, [pc, #384]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a5d      	ldr	r2, [pc, #372]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0x36e>
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6213      	str	r3, [r2, #32]
 8002c26:	4b58      	ldr	r3, [pc, #352]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a57      	ldr	r2, [pc, #348]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fd fd87 	bl	800074c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fd fd83 	bl	800074c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0b1      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	4b4b      	ldr	r3, [pc, #300]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ee      	beq.n	8002c42 <HAL_RCC_OscConfig+0x37e>
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fd fd71 	bl	800074c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fd fd6d 	bl	800074c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e09b      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	4b40      	ldr	r3, [pc, #256]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b3c      	ldr	r3, [pc, #240]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8087 	beq.w	8002dba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cac:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d061      	beq.n	8002d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d146      	bne.n	8002d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b33      	ldr	r3, [pc, #204]	@ (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fd fd41 	bl	800074c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fd fd3d 	bl	800074c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e06d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce0:	4b29      	ldr	r3, [pc, #164]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf4:	d108      	bne.n	8002d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cf6:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4921      	ldr	r1, [pc, #132]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d08:	4b1f      	ldr	r3, [pc, #124]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a19      	ldr	r1, [r3, #32]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	491b      	ldr	r1, [pc, #108]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d20:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fd fd11 	bl	800074c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fd fd0d 	bl	800074c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e03d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x46a>
 8002d4c:	e035      	b.n	8002dba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd fcfa 	bl	800074c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fd fcf6 	bl	800074c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e026      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x498>
 8002d7a:	e01e      	b.n	8002dba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e019      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_OscConfig+0x500>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d0      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b67      	ldr	r3, [pc, #412]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4965      	ldr	r1, [pc, #404]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a52      	ldr	r2, [pc, #328]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d040      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e073      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3d      	ldr	r3, [pc, #244]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06b      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4936      	ldr	r1, [pc, #216]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fd fc48 	bl	800074c <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fd fc44 	bl	800074c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e053      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d210      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	4922      	ldr	r1, [pc, #136]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	@ (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <HAL_RCC_ClockConfig+0x1cc>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_RCC_ClockConfig+0x1d0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fba6 	bl	80006c8 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08008888 	.word	0x08008888
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x30>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002fca:	e027      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fce:	613b      	str	r3, [r7, #16]
      break;
 8002fd0:	e027      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0c9b      	lsrs	r3, r3, #18
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a17      	ldr	r2, [pc, #92]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fea:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0c5b      	lsrs	r3, r3, #17
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	4a11      	ldr	r2, [pc, #68]	@ (800303c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffe:	fb03 f202 	mul.w	r2, r3, r2
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e004      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0c      	ldr	r2, [pc, #48]	@ (8003040 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	613b      	str	r3, [r7, #16]
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 800301e:	613b      	str	r3, [r7, #16]
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	693b      	ldr	r3, [r7, #16]
}
 8003024:	4618      	mov	r0, r3
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	007a1200 	.word	0x007a1200
 8003038:	080088a0 	.word	0x080088a0
 800303c:	080088b0 	.word	0x080088b0
 8003040:	003d0900 	.word	0x003d0900

08003044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b02      	ldr	r3, [pc, #8]	@ (8003054 <HAL_RCC_GetHCLKFreq+0x10>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	20000000 	.word	0x20000000

08003058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800305c:	f7ff fff2 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4903      	ldr	r1, [pc, #12]	@ (800307c <HAL_RCC_GetPCLK1Freq+0x24>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	08008898 	.word	0x08008898

08003080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003084:	f7ff ffde 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0adb      	lsrs	r3, r3, #11
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4903      	ldr	r1, [pc, #12]	@ (80030a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08008898 	.word	0x08008898

080030a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <RCC_Delay+0x34>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <RCC_Delay+0x38>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0a5b      	lsrs	r3, r3, #9
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030c4:	bf00      	nop
  }
  while (Delay --);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	60fa      	str	r2, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f9      	bne.n	80030c4 <RCC_Delay+0x1c>
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000000 	.word	0x20000000
 80030e0:	10624dd3 	.word	0x10624dd3

080030e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d07d      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003100:	2300      	movs	r3, #0
 8003102:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003104:	4b4f      	ldr	r3, [pc, #316]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003110:	4b4c      	ldr	r3, [pc, #304]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4a4b      	ldr	r2, [pc, #300]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800311a:	61d3      	str	r3, [r2, #28]
 800311c:	4b49      	ldr	r3, [pc, #292]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003128:	2301      	movs	r3, #1
 800312a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b46      	ldr	r3, [pc, #280]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d118      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003138:	4b43      	ldr	r3, [pc, #268]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a42      	ldr	r2, [pc, #264]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003144:	f7fd fb02 	bl	800074c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	e008      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fd fafe 	bl	800074c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	@ 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e06d      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b3a      	ldr	r3, [pc, #232]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800316a:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003172:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02e      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d027      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003188:	4b2e      	ldr	r3, [pc, #184]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003190:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003192:	4b2e      	ldr	r3, [pc, #184]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003198:	4b2c      	ldr	r3, [pc, #176]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800319e:	4a29      	ldr	r2, [pc, #164]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d014      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fd facd 	bl	800074c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fac9 	bl	800074c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e036      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ee      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4917      	ldr	r1, [pc, #92]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f0:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4a13      	ldr	r2, [pc, #76]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003208:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	490b      	ldr	r1, [pc, #44]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4904      	ldr	r1, [pc, #16]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	40007000 	.word	0x40007000
 800324c:	42420440 	.word	0x42420440

08003250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e041      	b.n	80032e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd f922 	bl	80004c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fa74 	bl	800377c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e03a      	b.n	800337e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a18      	ldr	r2, [pc, #96]	@ (8003388 <HAL_TIM_Base_Start_IT+0x98>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00e      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x58>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d009      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x58>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a14      	ldr	r2, [pc, #80]	@ (800338c <HAL_TIM_Base_Start_IT+0x9c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x58>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a13      	ldr	r2, [pc, #76]	@ (8003390 <HAL_TIM_Base_Start_IT+0xa0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d111      	bne.n	800336c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d010      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	e007      	b.n	800337c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800

08003394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0202 	mvn.w	r2, #2
 80033c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f9b4 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9a7 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f9b6 	bl	8003756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d122      	bne.n	8003444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b04      	cmp	r3, #4
 800340a:	d11b      	bne.n	8003444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0204 	mvn.w	r2, #4
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f98a 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f97d 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f98c 	bl	8003756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b08      	cmp	r3, #8
 8003450:	d122      	bne.n	8003498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b08      	cmp	r3, #8
 800345e:	d11b      	bne.n	8003498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0208 	mvn.w	r2, #8
 8003468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2204      	movs	r2, #4
 800346e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f960 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 8003484:	e005      	b.n	8003492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f953 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f962 	bl	8003756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d122      	bne.n	80034ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d11b      	bne.n	80034ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0210 	mvn.w	r2, #16
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2208      	movs	r2, #8
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f936 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f929 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f938 	bl	8003756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0201 	mvn.w	r2, #1
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fc ff72 	bl	80003fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003522:	2b80      	cmp	r3, #128	@ 0x80
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003530:	2b80      	cmp	r3, #128	@ 0x80
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fa7b 	bl	8003a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b40      	cmp	r3, #64	@ 0x40
 800355e:	d107      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8fc 	bl	8003768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d10e      	bne.n	800359c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b20      	cmp	r3, #32
 800358a:	d107      	bne.n	800359c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0220 	mvn.w	r2, #32
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa46 	bl	8003a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_ConfigClockSource+0x1c>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0b4      	b.n	800372a <HAL_TIM_ConfigClockSource+0x186>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f8:	d03e      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0xd4>
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fe:	f200 8087 	bhi.w	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003606:	f000 8086 	beq.w	8003716 <HAL_TIM_ConfigClockSource+0x172>
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360e:	d87f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b70      	cmp	r3, #112	@ 0x70
 8003612:	d01a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0xa6>
 8003614:	2b70      	cmp	r3, #112	@ 0x70
 8003616:	d87b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b60      	cmp	r3, #96	@ 0x60
 800361a:	d050      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x11a>
 800361c:	2b60      	cmp	r3, #96	@ 0x60
 800361e:	d877      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b50      	cmp	r3, #80	@ 0x50
 8003622:	d03c      	beq.n	800369e <HAL_TIM_ConfigClockSource+0xfa>
 8003624:	2b50      	cmp	r3, #80	@ 0x50
 8003626:	d873      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b40      	cmp	r3, #64	@ 0x40
 800362a:	d058      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x13a>
 800362c:	2b40      	cmp	r3, #64	@ 0x40
 800362e:	d86f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b30      	cmp	r3, #48	@ 0x30
 8003632:	d064      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 8003634:	2b30      	cmp	r3, #48	@ 0x30
 8003636:	d86b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d060      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d867      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05c      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 8003644:	2b10      	cmp	r3, #16
 8003646:	d05a      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 8003648:	e062      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800365a:	f000 f968 	bl	800392e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800366c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	609a      	str	r2, [r3, #8]
      break;
 8003676:	e04f      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	f000 f951 	bl	800392e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800369a:	609a      	str	r2, [r3, #8]
      break;
 800369c:	e03c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 f8c8 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2150      	movs	r1, #80	@ 0x50
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f91f 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036bc:	e02c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 f8e6 	bl	800389c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2160      	movs	r1, #96	@ 0x60
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f90f 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036dc:	e01c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 f8a8 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2140      	movs	r1, #64	@ 0x40
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f8ff 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036fc:	e00c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f000 f8f6 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 800370e:	e003      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      break;
 8003714:	e000      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
	...

0800377c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a29      	ldr	r2, [pc, #164]	@ (8003834 <TIM_Base_SetConfig+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00b      	beq.n	80037ac <TIM_Base_SetConfig+0x30>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379a:	d007      	beq.n	80037ac <TIM_Base_SetConfig+0x30>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a26      	ldr	r2, [pc, #152]	@ (8003838 <TIM_Base_SetConfig+0xbc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_Base_SetConfig+0x30>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a25      	ldr	r2, [pc, #148]	@ (800383c <TIM_Base_SetConfig+0xc0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <TIM_Base_SetConfig+0xb8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0x62>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0x62>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <TIM_Base_SetConfig+0xbc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0x62>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <TIM_Base_SetConfig+0xc0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a07      	ldr	r2, [pc, #28]	@ (8003834 <TIM_Base_SetConfig+0xb8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d103      	bne.n	8003824 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	615a      	str	r2, [r3, #20]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800

08003840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 030a 	bic.w	r3, r3, #10
 800387c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0210 	bic.w	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	031b      	lsls	r3, r3, #12
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	f043 0307 	orr.w	r3, r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003980:	2302      	movs	r3, #2
 8003982:	e046      	b.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a16      	ldr	r2, [pc, #88]	@ (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d0:	d009      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a10      	ldr	r2, [pc, #64]	@ (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10c      	bne.n	8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800

08003a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e042      	b.n	8003ae4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fc fd48 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	@ 0x24
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fc7f 	bl	8004394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0ba      	sub	sp, #232	@ 0xe8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_UART_IRQHandler+0x66>
 8003b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fb63 	bl	8004216 <UART_Receive_IT>
      return;
 8003b50:	e25b      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80de 	beq.w	8003d18 <HAL_UART_IRQHandler+0x22c>
 8003b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80d1 	beq.w	8003d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_UART_IRQHandler+0xae>
 8003b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0201 	orr.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
 8003ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f043 0202 	orr.w	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_UART_IRQHandler+0xf6>
 8003bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_UART_IRQHandler+0x126>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f043 0208 	orr.w	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 81f2 	beq.w	8004000 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_UART_IRQHandler+0x14e>
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 faee 	bl	8004216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf14      	ite	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	2300      	moveq	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_UART_IRQHandler+0x17a>
 8003c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d04f      	beq.n	8003d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9f8 	bl	800405c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d041      	beq.n	8003cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d013      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ecc <HAL_UART_IRQHandler+0x3e0>)
 8003cd4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fe88 	bl	80009f0 <HAL_DMA_Abort_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d016      	beq.n	8003d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e00e      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f99c 	bl	8004034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e00a      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f998 	bl	8004034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	e006      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f994 	bl	8004034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d12:	e175      	b.n	8004000 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	bf00      	nop
    return;
 8003d16:	e173      	b.n	8004000 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	f040 814f 	bne.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8148 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8141 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80b6 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8145 	beq.w	8004004 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d82:	429a      	cmp	r2, r3
 8003d84:	f080 813e 	bcs.w	8004004 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	f000 8088 	beq.w	8003eac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003db6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dc8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1d9      	bne.n	8003d9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3314      	adds	r3, #20
 8003dee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003df8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e1      	bne.n	8003de8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3314      	adds	r3, #20
 8003e44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e3      	bne.n	8003e24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7c:	f023 0310 	bic.w	r3, r3, #16
 8003e80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fd67 	bl	800097a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8bf 	bl	8004046 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec8:	e09c      	b.n	8004004 <HAL_UART_IRQHandler+0x518>
 8003eca:	bf00      	nop
 8003ecc:	08004121 	.word	0x08004121
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 808e 	beq.w	8004008 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8089 	beq.w	8004008 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f98:	61fa      	str	r2, [r7, #28]
 8003f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	69b9      	ldr	r1, [r7, #24]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e3      	bne.n	8003f74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f844 	bl	8004046 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fbe:	e023      	b.n	8004008 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x4f4>
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8b5 	bl	8004148 <UART_Transmit_IT>
    return;
 8003fde:	e014      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <HAL_UART_IRQHandler+0x51e>
 8003fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8f4 	bl	80041e6 <UART_EndTransmit_IT>
    return;
 8003ffe:	e004      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
    return;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
      return;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
      return;
 8004008:	bf00      	nop
  }
}
 800400a:	37e8      	adds	r7, #232	@ 0xe8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b095      	sub	sp, #84	@ 0x54
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800407a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004084:	643a      	str	r2, [r7, #64]	@ 0x40
 8004086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800408a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d119      	bne.n	8004108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f023 0310 	bic.w	r3, r3, #16
 80040ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f4:	61ba      	str	r2, [r7, #24]
 80040f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	613b      	str	r3, [r7, #16]
   return(result);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004116:	bf00      	nop
 8004118:	3754      	adds	r7, #84	@ 0x54
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ff7a 	bl	8004034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b21      	cmp	r3, #33	@ 0x21
 800415a:	d13e      	bne.n	80041da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004164:	d114      	bne.n	8004190 <UART_Transmit_IT+0x48>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d110      	bne.n	8004190 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004182:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]
 800418e:	e008      	b.n	80041a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	1c59      	adds	r1, r3, #1
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6211      	str	r1, [r2, #32]
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4619      	mov	r1, r3
 80041b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff ff02 	bl	8004010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08c      	sub	sp, #48	@ 0x30
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b22      	cmp	r3, #34	@ 0x22
 8004228:	f040 80ae 	bne.w	8004388 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004234:	d117      	bne.n	8004266 <UART_Receive_IT+0x50>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004254:	b29a      	uxth	r2, r3
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	@ 0x28
 8004264:	e026      	b.n	80042b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004278:	d007      	beq.n	800428a <UART_Receive_IT+0x74>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <UART_Receive_IT+0x82>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e008      	b.n	80042aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d15d      	bne.n	8004384 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0220 	bic.w	r2, r2, #32
 80042d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	2b01      	cmp	r3, #1
 800430c:	d135      	bne.n	800437a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	613b      	str	r3, [r7, #16]
   return(result);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f023 0310 	bic.w	r3, r3, #16
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	623a      	str	r2, [r7, #32]
 8004336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	69f9      	ldr	r1, [r7, #28]
 800433a:	6a3a      	ldr	r2, [r7, #32]
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	61bb      	str	r3, [r7, #24]
   return(result);
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e5      	bne.n	8004314 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	d10a      	bne.n	800436c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fe67 	bl	8004046 <HAL_UARTEx_RxEventCallback>
 8004378:	e002      	b.n	8004380 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fe51 	bl	8004022 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e002      	b.n	800438a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3730      	adds	r7, #48	@ 0x30
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043ce:	f023 030c 	bic.w	r3, r3, #12
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	430b      	orrs	r3, r1
 80043da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2c      	ldr	r2, [pc, #176]	@ (80044a8 <UART_SetConfig+0x114>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7fe fe40 	bl	8003080 <HAL_RCC_GetPCLK2Freq>
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	e002      	b.n	800440a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe fe28 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8004408:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	4a22      	ldr	r2, [pc, #136]	@ (80044ac <UART_SetConfig+0x118>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	0119      	lsls	r1, r3, #4
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004440:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <UART_SetConfig+0x118>)
 8004442:	fba3 0302 	umull	r0, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2064      	movs	r0, #100	@ 0x64
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	@ 0x32
 8004454:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004460:	4419      	add	r1, r3
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009a      	lsls	r2, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	fbb2 f2f3 	udiv	r2, r2, r3
 8004478:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <UART_SetConfig+0x118>)
 800447a:	fba3 0302 	umull	r0, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2064      	movs	r0, #100	@ 0x64
 8004482:	fb00 f303 	mul.w	r3, r0, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	3332      	adds	r3, #50	@ 0x32
 800448c:	4a07      	ldr	r2, [pc, #28]	@ (80044ac <UART_SetConfig+0x118>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	440a      	add	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013800 	.word	0x40013800
 80044ac:	51eb851f 	.word	0x51eb851f

080044b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044b0:	b084      	sub	sp, #16
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	f107 0014 	add.w	r0, r7, #20
 80044be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	b004      	add	sp, #16
 80044ce:	4770      	bx	lr

080044d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044e0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004504:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004508:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	b29b      	uxth	r3, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	4013      	ands	r3, r2
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004548:	b084      	sub	sp, #16
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	f107 0014 	add.w	r0, r7, #20
 8004556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	b004      	add	sp, #16
 8004586:	4770      	bx	lr

08004588 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004588:	b480      	push	{r7}
 800458a:	b09d      	sub	sp, #116	@ 0x74
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	78db      	ldrb	r3, [r3, #3]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d81f      	bhi.n	80045fa <USB_ActivateEndpoint+0x72>
 80045ba:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <USB_ActivateEndpoint+0x38>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	08004603 	.word	0x08004603
 80045cc:	080045df 	.word	0x080045df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045dc:	e012      	b.n	8004604 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045e2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80045e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045ea:	e00b      	b.n	8004604 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045f8:	e004      	b.n	8004604 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004600:	e000      	b.n	8004604 <USB_ActivateEndpoint+0x7c>
      break;
 8004602:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800461e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463c:	b29b      	uxth	r3, r3
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	4313      	orrs	r3, r2
 8004644:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	7b1b      	ldrb	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 8178 	bne.w	8004964 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8084 	beq.w	8004786 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004688:	b29b      	uxth	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	4413      	add	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	011a      	lsls	r2, r3, #4
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	88db      	ldrh	r3, [r3, #6]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	827b      	strh	r3, [r7, #18]
 80046c0:	8a7b      	ldrh	r3, [r7, #18]
 80046c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01b      	beq.n	8004702 <USB_ActivateEndpoint+0x17a>
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e0:	823b      	strh	r3, [r7, #16]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	441a      	add	r2, r3
 80046ec:	8a3b      	ldrh	r3, [r7, #16]
 80046ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	78db      	ldrb	r3, [r3, #3]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d020      	beq.n	800474c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004720:	81bb      	strh	r3, [r7, #12]
 8004722:	89bb      	ldrh	r3, [r7, #12]
 8004724:	f083 0320 	eor.w	r3, r3, #32
 8004728:	81bb      	strh	r3, [r7, #12]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	89bb      	ldrh	r3, [r7, #12]
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]
 800474a:	e2d5      	b.n	8004cf8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004762:	81fb      	strh	r3, [r7, #14]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	89fb      	ldrh	r3, [r7, #14]
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
 8004784:	e2b8      	b.n	8004cf8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	633b      	str	r3, [r7, #48]	@ 0x30
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004790:	b29b      	uxth	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	4413      	add	r3, r2
 8004798:	633b      	str	r3, [r7, #48]	@ 0x30
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	011a      	lsls	r2, r3, #4
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80047a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	88db      	ldrh	r3, [r3, #6]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	4413      	add	r3, r2
 80047cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	011a      	lsls	r2, r3, #4
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	4413      	add	r3, r2
 80047d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	801a      	strh	r2, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80047f4:	d91d      	bls.n	8004832 <USB_ActivateEndpoint+0x2aa>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <USB_ActivateEndpoint+0x288>
 800480a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800480c:	3b01      	subs	r3, #1
 800480e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29a      	uxth	r2, r3
 8004816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004818:	b29b      	uxth	r3, r3
 800481a:	029b      	lsls	r3, r3, #10
 800481c:	b29b      	uxth	r3, r3
 800481e:	4313      	orrs	r3, r2
 8004820:	b29b      	uxth	r3, r3
 8004822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482a:	b29a      	uxth	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	e026      	b.n	8004880 <USB_ActivateEndpoint+0x2f8>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <USB_ActivateEndpoint+0x2c8>
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004848:	b29a      	uxth	r2, r3
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	e017      	b.n	8004880 <USB_ActivateEndpoint+0x2f8>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <USB_ActivateEndpoint+0x2e2>
 8004864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004866:	3301      	adds	r3, #1
 8004868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29a      	uxth	r2, r3
 8004870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004872:	b29b      	uxth	r3, r3
 8004874:	029b      	lsls	r3, r3, #10
 8004876:	b29b      	uxth	r3, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	b29a      	uxth	r2, r3
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800488e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <USB_ActivateEndpoint+0x348>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	843b      	strh	r3, [r7, #32]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	8c3b      	ldrh	r3, [r7, #32]
 80048bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d124      	bne.n	8004922 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ee:	83bb      	strh	r3, [r7, #28]
 80048f0:	8bbb      	ldrh	r3, [r7, #28]
 80048f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048f6:	83bb      	strh	r3, [r7, #28]
 80048f8:	8bbb      	ldrh	r3, [r7, #28]
 80048fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048fe:	83bb      	strh	r3, [r7, #28]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	8bbb      	ldrh	r3, [r7, #28]
 800490c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]
 8004920:	e1ea      	b.n	8004cf8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004938:	83fb      	strh	r3, [r7, #30]
 800493a:	8bfb      	ldrh	r3, [r7, #30]
 800493c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004940:	83fb      	strh	r3, [r7, #30]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8bfb      	ldrh	r3, [r7, #30]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
 8004962:	e1c9      	b.n	8004cf8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	78db      	ldrb	r3, [r3, #3]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d11e      	bne.n	80049aa <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	441a      	add	r2, r3
 8004990:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800499c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80049a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
 80049a8:	e01d      	b.n	80049e6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80049bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80049d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f6:	4413      	add	r3, r2
 80049f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	011a      	lsls	r2, r3, #4
 8004a00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	891b      	ldrh	r3, [r3, #8]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a2a:	4413      	add	r3, r2
 8004a2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	011a      	lsls	r2, r3, #4
 8004a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004a3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	895b      	ldrh	r3, [r3, #10]
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a4c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f040 8093 	bne.w	8004b7e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004a68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01b      	beq.n	8004aac <USB_ActivateEndpoint+0x524>
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004aba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <USB_ActivateEndpoint+0x574>
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b12:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b1a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b22:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	8013      	strh	r3, [r2, #0]
 8004b7c:	e0bc      	b.n	8004cf8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01d      	beq.n	8004bd6 <USB_ActivateEndpoint+0x64e>
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01d      	beq.n	8004c2e <USB_ActivateEndpoint+0x6a6>
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c08:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	78db      	ldrb	r3, [r3, #3]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d024      	beq.n	8004c80 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c54:	f083 0320 	eor.w	r3, r3, #32
 8004c58:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8013      	strh	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cf8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3774      	adds	r7, #116	@ 0x74
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop

08004d08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b08d      	sub	sp, #52	@ 0x34
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	7b1b      	ldrb	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 808e 	bne.w	8004e38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d044      	beq.n	8004dae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	81bb      	strh	r3, [r7, #12]
 8004d32:	89bb      	ldrh	r3, [r7, #12]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <USB_DeactivateEndpoint+0x6c>
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	817b      	strh	r3, [r7, #10]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	897b      	ldrh	r3, [r7, #10]
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d8a:	813b      	strh	r3, [r7, #8]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
 8004dac:	e192      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	827b      	strh	r3, [r7, #18]
 8004dbc:	8a7b      	ldrh	r3, [r7, #18]
 8004dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01b      	beq.n	8004dfe <USB_DeactivateEndpoint+0xf6>
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ddc:	823b      	strh	r3, [r7, #16]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	8a3b      	ldrh	r3, [r7, #16]
 8004dea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e14:	81fb      	strh	r3, [r7, #14]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]
 8004e36:	e14d      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 80a5 	bne.w	8004f8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	843b      	strh	r3, [r7, #32]
 8004e50:	8c3b      	ldrh	r3, [r7, #32]
 8004e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01b      	beq.n	8004e92 <USB_DeactivateEndpoint+0x18a>
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e70:	83fb      	strh	r3, [r7, #30]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	8bfb      	ldrh	r3, [r7, #30]
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	83bb      	strh	r3, [r7, #28]
 8004ea0:	8bbb      	ldrh	r3, [r7, #28]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01b      	beq.n	8004ee2 <USB_DeactivateEndpoint+0x1da>
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec0:	837b      	strh	r3, [r7, #26]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	8b7b      	ldrh	r3, [r7, #26]
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef8:	833b      	strh	r3, [r7, #24]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	8b3b      	ldrh	r3, [r7, #24]
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f30:	82fb      	strh	r3, [r7, #22]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	8afb      	ldrh	r3, [r7, #22]
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f68:	82bb      	strh	r3, [r7, #20]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	441a      	add	r2, r3
 8004f74:	8abb      	ldrh	r3, [r7, #20]
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]
 8004f8a:	e0a3      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01b      	beq.n	8004fdc <USB_DeactivateEndpoint+0x2d4>
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004fea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01b      	beq.n	800502c <USB_DeactivateEndpoint+0x324>
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005042:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800505c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800507a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3734      	adds	r7, #52	@ 0x34
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b0c2      	sub	sp, #264	@ 0x108
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ee:	6018      	str	r0, [r3, #0]
 80050f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	2b01      	cmp	r3, #1
 8005108:	f040 86b7 	bne.w	8005e7a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800510c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699a      	ldr	r2, [r3, #24]
 8005118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	429a      	cmp	r2, r3
 8005126:	d908      	bls.n	800513a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005138:	e007      	b.n	800514a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800513a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800514a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	7b1b      	ldrb	r3, [r3, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d13a      	bne.n	80051d0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800515a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6959      	ldr	r1, [r3, #20]
 8005166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800516a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	88da      	ldrh	r2, [r3, #6]
 8005172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005176:	b29b      	uxth	r3, r3
 8005178:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800517c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005180:	6800      	ldr	r0, [r0, #0]
 8005182:	f001 fc9c 	bl	8006abe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	011a      	lsls	r2, r3, #4
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4413      	add	r3, r2
 80051bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	f000 be1f 	b.w	8005e0e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	78db      	ldrb	r3, [r3, #3]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	f040 8462 	bne.w	8005aa6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	f240 83df 	bls.w	80059be <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005226:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800522a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	441a      	add	r2, r3
 8005244:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800524c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005250:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800525c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526c:	1ad2      	subs	r2, r2, r3
 800526e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800527a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 81c7 	beq.w	8005630 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d177      	bne.n	80053ae <USB_EPStartXfer+0x2ce>
 80052be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	4413      	add	r3, r2
 80052e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	011a      	lsls	r2, r3, #4
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	4413      	add	r3, r2
 80052f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005304:	b29a      	uxth	r2, r3
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005310:	d921      	bls.n	8005356 <USB_EPStartXfer+0x276>
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <USB_EPStartXfer+0x252>
 8005328:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800532c:	3b01      	subs	r3, #1
 800532e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29a      	uxth	r2, r3
 8005338:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800533c:	b29b      	uxth	r3, r3
 800533e:	029b      	lsls	r3, r3, #10
 8005340:	b29b      	uxth	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	b29b      	uxth	r3, r3
 8005346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534e:	b29a      	uxth	r2, r3
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e050      	b.n	80053f8 <USB_EPStartXfer+0x318>
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <USB_EPStartXfer+0x294>
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536c:	b29a      	uxth	r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	e041      	b.n	80053f8 <USB_EPStartXfer+0x318>
 8005374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800537e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <USB_EPStartXfer+0x2b4>
 800538a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800538e:	3301      	adds	r3, #1
 8005390:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29a      	uxth	r2, r3
 800539a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4313      	orrs	r3, r2
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e024      	b.n	80053f8 <USB_EPStartXfer+0x318>
 80053ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d11c      	bne.n	80053f8 <USB_EPStartXfer+0x318>
 80053be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	4413      	add	r3, r2
 80053d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	011a      	lsls	r2, r3, #4
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	4413      	add	r3, r2
 80053e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	895b      	ldrh	r3, [r3, #10]
 8005404:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6959      	ldr	r1, [r3, #20]
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005418:	b29b      	uxth	r3, r3
 800541a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800541e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005422:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	f001 fb49 	bl	8006abe <USB_WritePMA>
            ep->xfer_buff += len;
 800542c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543c:	441a      	add	r2, r3
 800543e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800544a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a1a      	ldr	r2, [r3, #32]
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	429a      	cmp	r2, r3
 8005464:	d90f      	bls.n	8005486 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	621a      	str	r2, [r3, #32]
 8005484:	e00e      	b.n	80054a4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2200      	movs	r2, #0
 80054a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d177      	bne.n	80055a4 <USB_EPStartXfer+0x4c4>
 80054b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	4413      	add	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	011a      	lsls	r2, r3, #4
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	4413      	add	r3, r2
 80054ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005504:	2b3e      	cmp	r3, #62	@ 0x3e
 8005506:	d921      	bls.n	800554c <USB_EPStartXfer+0x46c>
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <USB_EPStartXfer+0x448>
 800551e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005522:	3b01      	subs	r3, #1
 8005524:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29a      	uxth	r2, r3
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005532:	b29b      	uxth	r3, r3
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	b29b      	uxth	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005544:	b29a      	uxth	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	e056      	b.n	80055fa <USB_EPStartXfer+0x51a>
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <USB_EPStartXfer+0x48a>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005562:	b29a      	uxth	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	e047      	b.n	80055fa <USB_EPStartXfer+0x51a>
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <USB_EPStartXfer+0x4aa>
 8005580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005584:	3301      	adds	r3, #1
 8005586:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29a      	uxth	r2, r3
 8005590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005594:	b29b      	uxth	r3, r3
 8005596:	029b      	lsls	r3, r3, #10
 8005598:	b29b      	uxth	r3, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	e02a      	b.n	80055fa <USB_EPStartXfer+0x51a>
 80055a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d122      	bne.n	80055fa <USB_EPStartXfer+0x51a>
 80055b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	623b      	str	r3, [r7, #32]
 80055c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	4413      	add	r3, r2
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	011a      	lsls	r2, r3, #4
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	4413      	add	r3, r2
 80055ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	891b      	ldrh	r3, [r3, #8]
 8005606:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800560a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6959      	ldr	r1, [r3, #20]
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561a:	b29b      	uxth	r3, r3
 800561c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005620:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005624:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005628:	6800      	ldr	r0, [r0, #0]
 800562a:	f001 fa48 	bl	8006abe <USB_WritePMA>
 800562e:	e3ee      	b.n	8005e0e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d177      	bne.n	8005730 <USB_EPStartXfer+0x650>
 8005640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800564c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005660:	4413      	add	r3, r2
 8005662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	011a      	lsls	r2, r3, #4
 8005672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005674:	4413      	add	r3, r2
 8005676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800567a:	647b      	str	r3, [r7, #68]	@ 0x44
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005686:	b29a      	uxth	r2, r3
 8005688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005690:	2b3e      	cmp	r3, #62	@ 0x3e
 8005692:	d921      	bls.n	80056d8 <USB_EPStartXfer+0x5f8>
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800569e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <USB_EPStartXfer+0x5d4>
 80056aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056ae:	3b01      	subs	r3, #1
 80056b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056be:	b29b      	uxth	r3, r3
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	4313      	orrs	r3, r2
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e056      	b.n	8005786 <USB_EPStartXfer+0x6a6>
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <USB_EPStartXfer+0x616>
 80056e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e047      	b.n	8005786 <USB_EPStartXfer+0x6a6>
 80056f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <USB_EPStartXfer+0x636>
 800570c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005710:	3301      	adds	r3, #1
 8005712:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29a      	uxth	r2, r3
 800571c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005720:	b29b      	uxth	r3, r3
 8005722:	029b      	lsls	r3, r3, #10
 8005724:	b29b      	uxth	r3, r3
 8005726:	4313      	orrs	r3, r2
 8005728:	b29a      	uxth	r2, r3
 800572a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e02a      	b.n	8005786 <USB_EPStartXfer+0x6a6>
 8005730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d122      	bne.n	8005786 <USB_EPStartXfer+0x6a6>
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	653b      	str	r3, [r7, #80]	@ 0x50
 800574c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005760:	4413      	add	r3, r2
 8005762:	653b      	str	r3, [r7, #80]	@ 0x50
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	011a      	lsls	r2, r3, #4
 8005772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005774:	4413      	add	r3, r2
 8005776:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800577a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800577c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005780:	b29a      	uxth	r2, r3
 8005782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005784:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	891b      	ldrh	r3, [r3, #8]
 8005792:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6959      	ldr	r1, [r3, #20]
 80057a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057b4:	6800      	ldr	r0, [r0, #0]
 80057b6:	f001 f982 	bl	8006abe <USB_WritePMA>
            ep->xfer_buff += len;
 80057ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ca:	441a      	add	r2, r3
 80057cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d90f      	bls.n	8005814 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a1a      	ldr	r2, [r3, #32]
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005804:	1ad2      	subs	r2, r2, r3
 8005806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	621a      	str	r2, [r3, #32]
 8005812:	e00e      	b.n	8005832 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	643b      	str	r3, [r7, #64]	@ 0x40
 800583e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d177      	bne.n	800593e <USB_EPStartXfer+0x85e>
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	63bb      	str	r3, [r7, #56]	@ 0x38
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	4413      	add	r3, r2
 8005870:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	4413      	add	r3, r2
 8005884:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
 800588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005894:	b29a      	uxth	r2, r3
 8005896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	2b3e      	cmp	r3, #62	@ 0x3e
 80058a0:	d921      	bls.n	80058e6 <USB_EPStartXfer+0x806>
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <USB_EPStartXfer+0x7e2>
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	3b01      	subs	r3, #1
 80058be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	029b      	lsls	r3, r3, #10
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e050      	b.n	8005988 <USB_EPStartXfer+0x8a8>
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <USB_EPStartXfer+0x824>
 80058ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e041      	b.n	8005988 <USB_EPStartXfer+0x8a8>
 8005904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <USB_EPStartXfer+0x844>
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591e:	3301      	adds	r3, #1
 8005920:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29a      	uxth	r2, r3
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	b29b      	uxth	r3, r3
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	b29b      	uxth	r3, r3
 8005934:	4313      	orrs	r3, r2
 8005936:	b29a      	uxth	r2, r3
 8005938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e024      	b.n	8005988 <USB_EPStartXfer+0x8a8>
 800593e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d11c      	bne.n	8005988 <USB_EPStartXfer+0x8a8>
 800594e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800595c:	b29b      	uxth	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005962:	4413      	add	r3, r2
 8005964:	643b      	str	r3, [r7, #64]	@ 0x40
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	011a      	lsls	r2, r3, #4
 8005974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005976:	4413      	add	r3, r2
 8005978:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800597c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005982:	b29a      	uxth	r2, r3
 8005984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005986:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	895b      	ldrh	r3, [r3, #10]
 8005994:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6959      	ldr	r1, [r3, #20]
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059b6:	6800      	ldr	r0, [r0, #0]
 80059b8:	f001 f881 	bl	8006abe <USB_WritePMA>
 80059bc:	e227      	b.n	8005e0e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80059f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80059f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a4a:	4413      	add	r3, r2
 8005a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	011a      	lsls	r2, r3, #4
 8005a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a5e:	4413      	add	r3, r2
 8005a60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	891b      	ldrh	r3, [r3, #8]
 8005a7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6959      	ldr	r1, [r3, #20]
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a9e:	6800      	ldr	r0, [r0, #0]
 8005aa0:	f001 f80d 	bl	8006abe <USB_WritePMA>
 8005aa4:	e1b3      	b.n	8005e0e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 80c6 	beq.w	8005c78 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d177      	bne.n	8005bf8 <USB_EPStartXfer+0xb18>
 8005b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b28:	4413      	add	r3, r2
 8005b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b58:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b5a:	d921      	bls.n	8005ba0 <USB_EPStartXfer+0xac0>
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <USB_EPStartXfer+0xa9c>
 8005b72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	029b      	lsls	r3, r3, #10
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	e050      	b.n	8005c42 <USB_EPStartXfer+0xb62>
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <USB_EPStartXfer+0xade>
 8005ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	e041      	b.n	8005c42 <USB_EPStartXfer+0xb62>
 8005bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <USB_EPStartXfer+0xafe>
 8005bd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	029b      	lsls	r3, r3, #10
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	e024      	b.n	8005c42 <USB_EPStartXfer+0xb62>
 8005bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d11c      	bne.n	8005c42 <USB_EPStartXfer+0xb62>
 8005c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c1c:	4413      	add	r3, r2
 8005c1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	011a      	lsls	r2, r3, #4
 8005c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c30:	4413      	add	r3, r2
 8005c32:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	895b      	ldrh	r3, [r3, #10]
 8005c4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6959      	ldr	r1, [r3, #20]
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c70:	6800      	ldr	r0, [r0, #0]
 8005c72:	f000 ff24 	bl	8006abe <USB_WritePMA>
 8005c76:	e0ca      	b.n	8005e0e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d177      	bne.n	8005d78 <USB_EPStartXfer+0xc98>
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ca8:	4413      	add	r3, r2
 8005caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	011a      	lsls	r2, r3, #4
 8005cba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cda:	d921      	bls.n	8005d20 <USB_EPStartXfer+0xc40>
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <USB_EPStartXfer+0xc1c>
 8005cf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	e05c      	b.n	8005dda <USB_EPStartXfer+0xcfa>
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <USB_EPStartXfer+0xc5e>
 8005d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e04d      	b.n	8005dda <USB_EPStartXfer+0xcfa>
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <USB_EPStartXfer+0xc7e>
 8005d54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e030      	b.n	8005dda <USB_EPStartXfer+0xcfa>
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d128      	bne.n	8005dda <USB_EPStartXfer+0xcfa>
 8005d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dac:	4413      	add	r3, r2
 8005dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	011a      	lsls	r2, r3, #4
 8005dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	891b      	ldrh	r3, [r3, #8]
 8005de6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6959      	ldr	r1, [r3, #20]
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e08:	6800      	ldr	r0, [r0, #0]
 8005e0a:	f000 fe58 	bl	8006abe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	897b      	ldrh	r3, [r7, #10]
 8005e38:	f083 0310 	eor.w	r3, r3, #16
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	897b      	ldrh	r3, [r7, #10]
 8005e40:	f083 0320 	eor.w	r3, r3, #32
 8005e44:	817b      	strh	r3, [r7, #10]
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	441a      	add	r2, r3
 8005e60:	897b      	ldrh	r3, [r7, #10]
 8005e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]
 8005e76:	f000 bcde 	b.w	8006836 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	7b1b      	ldrb	r3, [r3, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 80bb 	bne.w	8006002 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d917      	bls.n	8005ed8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	1ad2      	subs	r2, r2, r3
 8005eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	619a      	str	r2, [r3, #24]
 8005ed6:	e00e      	b.n	8005ef6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	011a      	lsls	r2, r3, #4
 8005f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f32:	4413      	add	r3, r2
 8005f34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f56:	d924      	bls.n	8005fa2 <USB_EPStartXfer+0xec2>
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <USB_EPStartXfer+0xe98>
 8005f6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f72:	3b01      	subs	r3, #1
 8005f74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	029b      	lsls	r3, r3, #10
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	f000 bc10 	b.w	80067c2 <USB_EPStartXfer+0x16e2>
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10c      	bne.n	8005fc4 <USB_EPStartXfer+0xee4>
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e3fe      	b.n	80067c2 <USB_EPStartXfer+0x16e2>
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <USB_EPStartXfer+0xf04>
 8005fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fde:	3301      	adds	r3, #1
 8005fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	029b      	lsls	r3, r3, #10
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e3df      	b.n	80067c2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	78db      	ldrb	r3, [r3, #3]
 800600e:	2b02      	cmp	r3, #2
 8006010:	f040 8218 	bne.w	8006444 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 809d 	bne.w	8006160 <USB_EPStartXfer+0x1080>
 8006026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800604a:	4413      	add	r3, r2
 800604c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	011a      	lsls	r2, r3, #4
 800605e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006062:	4413      	add	r3, r2
 8006064:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006068:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800606c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006078:	b29a      	uxth	r2, r3
 800607a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b3e      	cmp	r3, #62	@ 0x3e
 800608e:	d92b      	bls.n	80060e8 <USB_EPStartXfer+0x1008>
 8006090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <USB_EPStartXfer+0xfe0>
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ba:	3b01      	subs	r3, #1
 80060bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	029b      	lsls	r3, r3, #10
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4313      	orrs	r3, r2
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e070      	b.n	80061ca <USB_EPStartXfer+0x10ea>
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10c      	bne.n	8006112 <USB_EPStartXfer+0x1032>
 80060f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006108:	b29a      	uxth	r2, r3
 800610a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	e05b      	b.n	80061ca <USB_EPStartXfer+0x10ea>
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <USB_EPStartXfer+0x1062>
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	3301      	adds	r3, #1
 800613e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29a      	uxth	r2, r3
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614e:	b29b      	uxth	r3, r3
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	b29b      	uxth	r3, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e034      	b.n	80061ca <USB_EPStartXfer+0x10ea>
 8006160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d12c      	bne.n	80061ca <USB_EPStartXfer+0x10ea>
 8006170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006194:	4413      	add	r3, r2
 8006196:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800619a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	011a      	lsls	r2, r3, #4
 80061a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 809d 	bne.w	8006324 <USB_EPStartXfer+0x1244>
 80061ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800620e:	4413      	add	r3, r2
 8006210:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	011a      	lsls	r2, r3, #4
 8006222:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006226:	4413      	add	r3, r2
 8006228:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800622c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b3e      	cmp	r3, #62	@ 0x3e
 8006252:	d92b      	bls.n	80062ac <USB_EPStartXfer+0x11cc>
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <USB_EPStartXfer+0x11a4>
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627e:	3b01      	subs	r3, #1
 8006280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006290:	b29b      	uxth	r3, r3
 8006292:	029b      	lsls	r3, r3, #10
 8006294:	b29b      	uxth	r3, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	b29b      	uxth	r3, r3
 800629a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	e069      	b.n	8006380 <USB_EPStartXfer+0x12a0>
 80062ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10c      	bne.n	80062d6 <USB_EPStartXfer+0x11f6>
 80062bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	e054      	b.n	8006380 <USB_EPStartXfer+0x12a0>
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <USB_EPStartXfer+0x1226>
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	3301      	adds	r3, #1
 8006302:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006306:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006312:	b29b      	uxth	r3, r3
 8006314:	029b      	lsls	r3, r3, #10
 8006316:	b29b      	uxth	r3, r3
 8006318:	4313      	orrs	r3, r2
 800631a:	b29a      	uxth	r2, r3
 800631c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	e02d      	b.n	8006380 <USB_EPStartXfer+0x12a0>
 8006324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d125      	bne.n	8006380 <USB_EPStartXfer+0x12a0>
 8006334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800634a:	4413      	add	r3, r2
 800634c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	011a      	lsls	r2, r3, #4
 800635e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006362:	4413      	add	r3, r2
 8006364:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006368:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800636c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800637e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8218 	beq.w	80067c2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <USB_EPStartXfer+0x12ea>
 80063be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10d      	bne.n	80063e6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 81f5 	bne.w	80067c2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 81ee 	bne.w	80067c2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	441a      	add	r2, r3
 800642a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]
 8006442:	e1be      	b.n	80067c2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	78db      	ldrb	r3, [r3, #3]
 8006450:	2b01      	cmp	r3, #1
 8006452:	f040 81b4 	bne.w	80067be <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	429a      	cmp	r2, r3
 8006470:	d917      	bls.n	80064a2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	619a      	str	r2, [r3, #24]
 80064a0:	e00e      	b.n	80064c0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2200      	movs	r2, #0
 80064be:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f040 8085 	bne.w	80065dc <USB_EPStartXfer+0x14fc>
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f6:	4413      	add	r3, r2
 80064f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	011a      	lsls	r2, r3, #4
 800650a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800650e:	4413      	add	r3, r2
 8006510:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006514:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006524:	b29a      	uxth	r2, r3
 8006526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	2b3e      	cmp	r3, #62	@ 0x3e
 8006532:	d923      	bls.n	800657c <USB_EPStartXfer+0x149c>
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <USB_EPStartXfer+0x1474>
 800654a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800654e:	3b01      	subs	r3, #1
 8006550:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006554:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006560:	b29b      	uxth	r3, r3
 8006562:	029b      	lsls	r3, r3, #10
 8006564:	b29b      	uxth	r3, r3
 8006566:	4313      	orrs	r3, r2
 8006568:	b29b      	uxth	r3, r3
 800656a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006572:	b29a      	uxth	r2, r3
 8006574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e060      	b.n	800663e <USB_EPStartXfer+0x155e>
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10c      	bne.n	800659e <USB_EPStartXfer+0x14be>
 8006584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	e04f      	b.n	800663e <USB_EPStartXfer+0x155e>
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <USB_EPStartXfer+0x14de>
 80065b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b8:	3301      	adds	r3, #1
 80065ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	029b      	lsls	r3, r3, #10
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	4313      	orrs	r3, r2
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e030      	b.n	800663e <USB_EPStartXfer+0x155e>
 80065dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d128      	bne.n	800663e <USB_EPStartXfer+0x155e>
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006608:	b29b      	uxth	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006610:	4413      	add	r3, r2
 8006612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	011a      	lsls	r2, r3, #4
 8006624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006628:	4413      	add	r3, r2
 800662a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800662e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f040 8085 	bne.w	8006768 <USB_EPStartXfer+0x1688>
 800665e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800667a:	b29b      	uxth	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006682:	4413      	add	r3, r2
 8006684:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	011a      	lsls	r2, r3, #4
 8006696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800669a:	4413      	add	r3, r2
 800669c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066b6:	801a      	strh	r2, [r3, #0]
 80066b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80066be:	d923      	bls.n	8006708 <USB_EPStartXfer+0x1628>
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <USB_EPStartXfer+0x1600>
 80066d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066da:	3b01      	subs	r3, #1
 80066dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	029b      	lsls	r3, r3, #10
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e05c      	b.n	80067c2 <USB_EPStartXfer+0x16e2>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10c      	bne.n	800672a <USB_EPStartXfer+0x164a>
 8006710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e04b      	b.n	80067c2 <USB_EPStartXfer+0x16e2>
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <USB_EPStartXfer+0x166a>
 8006740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006744:	3301      	adds	r3, #1
 8006746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800674a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e02c      	b.n	80067c2 <USB_EPStartXfer+0x16e2>
 8006768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d124      	bne.n	80067c2 <USB_EPStartXfer+0x16e2>
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800678e:	4413      	add	r3, r2
 8006790:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067a6:	4413      	add	r3, r2
 80067a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e001      	b.n	80067c2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e03a      	b.n	8006838 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006800:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	441a      	add	r2, r3
 800681e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800682a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800682e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d020      	beq.n	8006896 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800686a:	81bb      	strh	r3, [r7, #12]
 800686c:	89bb      	ldrh	r3, [r7, #12]
 800686e:	f083 0310 	eor.w	r3, r3, #16
 8006872:	81bb      	strh	r3, [r7, #12]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	89bb      	ldrh	r3, [r7, #12]
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]
 8006894:	e01f      	b.n	80068d6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ac:	81fb      	strh	r3, [r7, #14]
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068b4:	81fb      	strh	r3, [r7, #14]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	441a      	add	r2, r3
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b087      	sub	sp, #28
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	7b1b      	ldrb	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f040 809d 	bne.w	8006a30 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	785b      	ldrb	r3, [r3, #1]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04c      	beq.n	8006998 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	823b      	strh	r3, [r7, #16]
 800690c:	8a3b      	ldrh	r3, [r7, #16]
 800690e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01b      	beq.n	800694e <USB_EPClearStall+0x6c>
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692c:	81fb      	strh	r3, [r7, #14]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006946:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	78db      	ldrb	r3, [r3, #3]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d06c      	beq.n	8006a30 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800696c:	81bb      	strh	r3, [r7, #12]
 800696e:	89bb      	ldrh	r3, [r7, #12]
 8006970:	f083 0320 	eor.w	r3, r3, #32
 8006974:	81bb      	strh	r3, [r7, #12]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	89bb      	ldrh	r3, [r7, #12]
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]
 8006996:	e04b      	b.n	8006a30 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	82fb      	strh	r3, [r7, #22]
 80069a6:	8afb      	ldrh	r3, [r7, #22]
 80069a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01b      	beq.n	80069e8 <USB_EPClearStall+0x106>
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	82bb      	strh	r3, [r7, #20]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	441a      	add	r2, r3
 80069d2:	8abb      	ldrh	r3, [r7, #20]
 80069d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fe:	827b      	strh	r3, [r7, #18]
 8006a00:	8a7b      	ldrh	r3, [r7, #18]
 8006a02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a06:	827b      	strh	r3, [r7, #18]
 8006a08:	8a7b      	ldrh	r3, [r7, #18]
 8006a0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a0e:	827b      	strh	r3, [r7, #18]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	8a7b      	ldrh	r3, [r7, #18]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2280      	movs	r2, #128	@ 0x80
 8006a52:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr

08006a62 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b08b      	sub	sp, #44	@ 0x2c
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	4611      	mov	r1, r2
 8006aca:	461a      	mov	r2, r3
 8006acc:	460b      	mov	r3, r1
 8006ace:	80fb      	strh	r3, [r7, #6]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ad4:	88bb      	ldrh	r3, [r7, #4]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ae4:	88fb      	ldrh	r3, [r7, #6]
 8006ae6:	005a      	lsls	r2, r3, #1
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006af0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af6:	e01e      	b.n	8006b36 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	3301      	adds	r3, #1
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	b21a      	sxth	r2, r3
 8006b08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	b21b      	sxth	r3, r3
 8006b10:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	8a7a      	ldrh	r2, [r7, #18]
 8006b16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	3302      	adds	r3, #2
 8006b22:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b32:	3b01      	subs	r3, #1
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1dd      	bne.n	8006af8 <USB_WritePMA+0x3a>
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	372c      	adds	r7, #44	@ 0x2c
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b08b      	sub	sp, #44	@ 0x2c
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	4611      	mov	r1, r2
 8006b54:	461a      	mov	r2, r3
 8006b56:	460b      	mov	r3, r1
 8006b58:	80fb      	strh	r3, [r7, #6]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b5e:	88bb      	ldrh	r3, [r7, #4]
 8006b60:	085b      	lsrs	r3, r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	005a      	lsls	r2, r3, #1
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b7a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b80:	e01b      	b.n	8006bba <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	3301      	adds	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e0      	bne.n	8006b82 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bc0:	88bb      	ldrh	r3, [r7, #4]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	701a      	strb	r2, [r3, #0]
  }
}
 8006bdc:	bf00      	nop
 8006bde:	372c      	adds	r7, #44	@ 0x2c
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr

08006be6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	2181      	movs	r1, #129	@ 0x81
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fc86 	bl	800850a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006c04:	2010      	movs	r0, #16
 8006c06:	f001 fd95 	bl	8008734 <USBD_static_malloc>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e005      	b.n	8006c2c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c26:	2200      	movs	r2, #0
 8006c28:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006c40:	2181      	movs	r1, #129	@ 0x81
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fc87 	bl	8008556 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d009      	beq.n	8006c6c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fd74 	bl	800874c <USBD_static_free>
    pdev->pClassData = NULL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c88:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d045      	beq.n	8006d32 <USBD_HID_Setup+0xba>
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	f040 80d3 	bne.w	8006e52 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	3b02      	subs	r3, #2
 8006cb2:	2b09      	cmp	r3, #9
 8006cb4:	d835      	bhi.n	8006d22 <USBD_HID_Setup+0xaa>
 8006cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cbc <USBD_HID_Setup+0x44>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006d13 	.word	0x08006d13
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006d23 	.word	0x08006d23
 8006cc8:	08006d23 	.word	0x08006d23
 8006ccc:	08006d23 	.word	0x08006d23
 8006cd0:	08006d23 	.word	0x08006d23
 8006cd4:	08006d23 	.word	0x08006d23
 8006cd8:	08006d23 	.word	0x08006d23
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006ce5 	.word	0x08006ce5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	885b      	ldrh	r3, [r3, #2]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	601a      	str	r2, [r3, #0]
          break;
 8006cf0:	e01e      	b.n	8006d30 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 f957 	bl	8007fac <USBD_CtlSendData>
          break;
 8006cfe:	e017      	b.n	8006d30 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	885b      	ldrh	r3, [r3, #2]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]
          break;
 8006d10:	e00e      	b.n	8006d30 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	3304      	adds	r3, #4
 8006d16:	2201      	movs	r2, #1
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f946 	bl	8007fac <USBD_CtlSendData>
          break;
 8006d20:	e006      	b.n	8006d30 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 f8d7 	bl	8007ed8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2e:	bf00      	nop
      }
      break;
 8006d30:	e096      	b.n	8006e60 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	2b0b      	cmp	r3, #11
 8006d38:	f200 8083 	bhi.w	8006e42 <USBD_HID_Setup+0x1ca>
 8006d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <USBD_HID_Setup+0xcc>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d75 	.word	0x08006d75
 8006d48:	08006e43 	.word	0x08006e43
 8006d4c:	08006e43 	.word	0x08006e43
 8006d50:	08006e43 	.word	0x08006e43
 8006d54:	08006e43 	.word	0x08006e43
 8006d58:	08006e43 	.word	0x08006e43
 8006d5c:	08006d9d 	.word	0x08006d9d
 8006d60:	08006e43 	.word	0x08006e43
 8006d64:	08006e43 	.word	0x08006e43
 8006d68:	08006e43 	.word	0x08006e43
 8006d6c:	08006df5 	.word	0x08006df5
 8006d70:	08006e1d 	.word	0x08006e1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d107      	bne.n	8006d8e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d7e:	f107 030e 	add.w	r3, r7, #14
 8006d82:	2202      	movs	r2, #2
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f910 	bl	8007fac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d8c:	e060      	b.n	8006e50 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f8a1 	bl	8007ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d96:	2302      	movs	r3, #2
 8006d98:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9a:	e059      	b.n	8006e50 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	885b      	ldrh	r3, [r3, #2]
 8006da0:	0a1b      	lsrs	r3, r3, #8
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b22      	cmp	r3, #34	@ 0x22
 8006da6:	d108      	bne.n	8006dba <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	88db      	ldrh	r3, [r3, #6]
 8006dac:	2b3f      	cmp	r3, #63	@ 0x3f
 8006dae:	bf28      	it	cs
 8006db0:	233f      	movcs	r3, #63	@ 0x3f
 8006db2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006db4:	4b2d      	ldr	r3, [pc, #180]	@ (8006e6c <USBD_HID_Setup+0x1f4>)
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	e015      	b.n	8006de6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	885b      	ldrh	r3, [r3, #2]
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b21      	cmp	r3, #33	@ 0x21
 8006dc4:	d108      	bne.n	8006dd8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8006e70 <USBD_HID_Setup+0x1f8>)
 8006dc8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	88db      	ldrh	r3, [r3, #6]
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	bf28      	it	cs
 8006dd2:	2309      	movcs	r3, #9
 8006dd4:	83fb      	strh	r3, [r7, #30]
 8006dd6:	e006      	b.n	8006de6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f87c 	bl	8007ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006de0:	2302      	movs	r3, #2
 8006de2:	75fb      	strb	r3, [r7, #23]
            break;
 8006de4:	e034      	b.n	8006e50 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006de6:	8bfb      	ldrh	r3, [r7, #30]
 8006de8:	461a      	mov	r2, r3
 8006dea:	69b9      	ldr	r1, [r7, #24]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 f8dd 	bl	8007fac <USBD_CtlSendData>
          break;
 8006df2:	e02d      	b.n	8006e50 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d107      	bne.n	8006e0e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3308      	adds	r3, #8
 8006e02:	2201      	movs	r2, #1
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f8d0 	bl	8007fac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e0c:	e020      	b.n	8006e50 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f861 	bl	8007ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	75fb      	strb	r3, [r7, #23]
          break;
 8006e1a:	e019      	b.n	8006e50 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d106      	bne.n	8006e34 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	885b      	ldrh	r3, [r3, #2]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e32:	e00d      	b.n	8006e50 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 f84e 	bl	8007ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e40:	e006      	b.n	8006e50 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f847 	bl	8007ed8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e4e:	bf00      	nop
      }
      break;
 8006e50:	e006      	b.n	8006e60 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 f83f 	bl	8007ed8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5e:	bf00      	nop
  }

  return ret;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200000c8 	.word	0x200000c8
 8006e70:	200000b0 	.word	0x200000b0

08006e74 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e88:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d10c      	bne.n	8006eae <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	7b1b      	ldrb	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d108      	bne.n	8006eae <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	2181      	movs	r1, #129	@ 0x81
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f001 fbfc 	bl	80086a6 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7c1b      	ldrb	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8006ecc:	2308      	movs	r3, #8
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e001      	b.n	8006ed6 <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8006ed2:	230a      	movs	r3, #10
 8006ed4:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
	...

08006ee4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2222      	movs	r2, #34	@ 0x22
 8006ef0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006ef2:	4b03      	ldr	r3, [pc, #12]	@ (8006f00 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000044 	.word	0x20000044

08006f04 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2222      	movs	r2, #34	@ 0x22
 8006f10:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006f12:	4b03      	ldr	r3, [pc, #12]	@ (8006f20 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20000068 	.word	0x20000068

08006f24 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2222      	movs	r2, #34	@ 0x22
 8006f30:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	@ (8006f40 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	2000008c 	.word	0x2000008c

08006f44 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f56:	2200      	movs	r2, #0
 8006f58:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
	...

08006f68 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	220a      	movs	r2, #10
 8006f74:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006f76:	4b03      	ldr	r3, [pc, #12]	@ (8006f84 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	200000bc 	.word	0x200000bc

08006f88 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e01a      	b.n	8006fd6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	79fa      	ldrb	r2, [r7, #7]
 8006fcc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f001 fa38 	bl	8008444 <USBD_LL_Init>

  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d006      	beq.n	8007000 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	e001      	b.n	8007004 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007000:	2302      	movs	r3, #2
 8007002:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fa5b 	bl	80084d4 <USBD_LL_Start>

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr

0800703c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007048:	2302      	movs	r3, #2
 800704a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	4611      	mov	r1, r2
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	4611      	mov	r1, r2
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fed7 	bl	8007e66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d016      	beq.n	800710a <USBD_LL_SetupStage+0x6a>
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d81c      	bhi.n	800711a <USBD_LL_SetupStage+0x7a>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <USBD_LL_SetupStage+0x4a>
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d008      	beq.n	80070fa <USBD_LL_SetupStage+0x5a>
 80070e8:	e017      	b.n	800711a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9ca 	bl	800748c <USBD_StdDevReq>
      break;
 80070f8:	e01a      	b.n	8007130 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa2c 	bl	8007560 <USBD_StdItfReq>
      break;
 8007108:	e012      	b.n	8007130 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa6c 	bl	80075f0 <USBD_StdEPReq>
      break;
 8007118:	e00a      	b.n	8007130 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007120:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007124:	b2db      	uxtb	r3, r3
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fa33 	bl	8008594 <USBD_LL_StallEP>
      break;
 800712e:	bf00      	nop
  }

  return USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b086      	sub	sp, #24
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	460b      	mov	r3, r1
 8007144:	607a      	str	r2, [r7, #4]
 8007146:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d14b      	bne.n	80071e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007154:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800715c:	2b03      	cmp	r3, #3
 800715e:	d134      	bne.n	80071ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	429a      	cmp	r2, r3
 800716a:	d919      	bls.n	80071a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007182:	429a      	cmp	r2, r3
 8007184:	d203      	bcs.n	800718e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800718a:	b29b      	uxth	r3, r3
 800718c:	e002      	b.n	8007194 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 ff35 	bl	8008008 <USBD_CtlContinueRx>
 800719e:	e038      	b.n	8007212 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d105      	bne.n	80071c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 ff32 	bl	800802c <USBD_CtlSendStatus>
 80071c8:	e023      	b.n	8007212 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071d0:	2b05      	cmp	r3, #5
 80071d2:	d11e      	bne.n	8007212 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071dc:	2100      	movs	r1, #0
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f001 f9d8 	bl	8008594 <USBD_LL_StallEP>
 80071e4:	e015      	b.n	8007212 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00d      	beq.n	800720e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d108      	bne.n	800720e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	7afa      	ldrb	r2, [r7, #11]
 8007206:	4611      	mov	r1, r2
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	4798      	blx	r3
 800720c:	e001      	b.n	8007212 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800720e:	2302      	movs	r3, #2
 8007210:	e000      	b.n	8007214 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	460b      	mov	r3, r1
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d17f      	bne.n	8007330 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3314      	adds	r3, #20
 8007234:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800723c:	2b02      	cmp	r3, #2
 800723e:	d15c      	bne.n	80072fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	429a      	cmp	r2, r3
 800724a:	d915      	bls.n	8007278 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	1ad2      	subs	r2, r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 febd 	bl	8007fe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800726a:	2300      	movs	r3, #0
 800726c:	2200      	movs	r2, #0
 800726e:	2100      	movs	r1, #0
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f001 fa3b 	bl	80086ec <USBD_LL_PrepareReceive>
 8007276:	e04e      	b.n	8007316 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	6912      	ldr	r2, [r2, #16]
 8007280:	fbb3 f1f2 	udiv	r1, r3, r2
 8007284:	fb01 f202 	mul.w	r2, r1, r2
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d11c      	bne.n	80072c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007296:	429a      	cmp	r2, r3
 8007298:	d316      	bcc.n	80072c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d20f      	bcs.n	80072c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072a8:	2200      	movs	r2, #0
 80072aa:	2100      	movs	r1, #0
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fe99 	bl	8007fe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ba:	2300      	movs	r3, #0
 80072bc:	2200      	movs	r2, #0
 80072be:	2100      	movs	r1, #0
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f001 fa13 	bl	80086ec <USBD_LL_PrepareReceive>
 80072c6:	e026      	b.n	8007316 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d105      	bne.n	80072ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072ea:	2180      	movs	r1, #128	@ 0x80
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f001 f951 	bl	8008594 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fead 	bl	8008052 <USBD_CtlReceiveStatus>
 80072f8:	e00d      	b.n	8007316 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007300:	2b04      	cmp	r3, #4
 8007302:	d004      	beq.n	800730e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800730a:	2b00      	cmp	r3, #0
 800730c:	d103      	bne.n	8007316 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800730e:	2180      	movs	r1, #128	@ 0x80
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f001 f93f 	bl	8008594 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800731c:	2b01      	cmp	r3, #1
 800731e:	d11d      	bne.n	800735c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff fe81 	bl	8007028 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800732e:	e015      	b.n	800735c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00d      	beq.n	8007358 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007342:	2b03      	cmp	r3, #3
 8007344:	d108      	bne.n	8007358 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	7afa      	ldrb	r2, [r7, #11]
 8007350:	4611      	mov	r1, r2
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	4798      	blx	r3
 8007356:	e001      	b.n	800735c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007358:	2302      	movs	r3, #2
 800735a:	e000      	b.n	800735e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800736e:	2340      	movs	r3, #64	@ 0x40
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f8c8 	bl	800850a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2240      	movs	r2, #64	@ 0x40
 8007386:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800738a:	2340      	movs	r3, #64	@ 0x40
 800738c:	2200      	movs	r2, #0
 800738e:	2180      	movs	r1, #128	@ 0x80
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f8ba 	bl	800850a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2240      	movs	r2, #64	@ 0x40
 80073a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6852      	ldr	r2, [r2, #4]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	4611      	mov	r1, r2
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
  }

  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr

08007406 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2204      	movs	r2, #4
 800741e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr

0800742e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800743c:	2b04      	cmp	r3, #4
 800743e:	d105      	bne.n	800744c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007466:	2b03      	cmp	r3, #3
 8007468:	d10b      	bne.n	8007482 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074a2:	2b40      	cmp	r3, #64	@ 0x40
 80074a4:	d005      	beq.n	80074b2 <USBD_StdDevReq+0x26>
 80074a6:	2b40      	cmp	r3, #64	@ 0x40
 80074a8:	d84f      	bhi.n	800754a <USBD_StdDevReq+0xbe>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <USBD_StdDevReq+0x36>
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d14b      	bne.n	800754a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
      break;
 80074c0:	e048      	b.n	8007554 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d839      	bhi.n	800753e <USBD_StdDevReq+0xb2>
 80074ca:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <USBD_StdDevReq+0x44>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	08007521 	.word	0x08007521
 80074d4:	08007535 	.word	0x08007535
 80074d8:	0800753f 	.word	0x0800753f
 80074dc:	0800752b 	.word	0x0800752b
 80074e0:	0800753f 	.word	0x0800753f
 80074e4:	08007503 	.word	0x08007503
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	0800753f 	.word	0x0800753f
 80074f0:	08007517 	.word	0x08007517
 80074f4:	0800750d 	.word	0x0800750d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9dc 	bl	80078b8 <USBD_GetDescriptor>
          break;
 8007500:	e022      	b.n	8007548 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fb3f 	bl	8007b88 <USBD_SetAddress>
          break;
 800750a:	e01d      	b.n	8007548 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb7e 	bl	8007c10 <USBD_SetConfig>
          break;
 8007514:	e018      	b.n	8007548 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc07 	bl	8007d2c <USBD_GetConfig>
          break;
 800751e:	e013      	b.n	8007548 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc37 	bl	8007d96 <USBD_GetStatus>
          break;
 8007528:	e00e      	b.n	8007548 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fc65 	bl	8007dfc <USBD_SetFeature>
          break;
 8007532:	e009      	b.n	8007548 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fc74 	bl	8007e24 <USBD_ClrFeature>
          break;
 800753c:	e004      	b.n	8007548 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fcc9 	bl	8007ed8 <USBD_CtlError>
          break;
 8007546:	bf00      	nop
      }
      break;
 8007548:	e004      	b.n	8007554 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fcc3 	bl	8007ed8 <USBD_CtlError>
      break;
 8007552:	bf00      	nop
  }

  return ret;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop

08007560 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d005      	beq.n	8007586 <USBD_StdItfReq+0x26>
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d82e      	bhi.n	80075dc <USBD_StdItfReq+0x7c>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <USBD_StdItfReq+0x26>
 8007582:	2b20      	cmp	r3, #32
 8007584:	d12a      	bne.n	80075dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758c:	3b01      	subs	r3, #1
 800758e:	2b02      	cmp	r3, #2
 8007590:	d81d      	bhi.n	80075ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	889b      	ldrh	r3, [r3, #4]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	d813      	bhi.n	80075c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	88db      	ldrh	r3, [r3, #6]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d110      	bne.n	80075d8 <USBD_StdItfReq+0x78>
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fd35 	bl	800802c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075c2:	e009      	b.n	80075d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fc86 	bl	8007ed8 <USBD_CtlError>
          break;
 80075cc:	e004      	b.n	80075d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc81 	bl	8007ed8 <USBD_CtlError>
          break;
 80075d6:	e000      	b.n	80075da <USBD_StdItfReq+0x7a>
          break;
 80075d8:	bf00      	nop
      }
      break;
 80075da:	e004      	b.n	80075e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fc7a 	bl	8007ed8 <USBD_CtlError>
      break;
 80075e4:	bf00      	nop
  }

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	889b      	ldrh	r3, [r3, #4]
 8007602:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800760c:	2b40      	cmp	r3, #64	@ 0x40
 800760e:	d007      	beq.n	8007620 <USBD_StdEPReq+0x30>
 8007610:	2b40      	cmp	r3, #64	@ 0x40
 8007612:	f200 8146 	bhi.w	80078a2 <USBD_StdEPReq+0x2b2>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <USBD_StdEPReq+0x40>
 800761a:	2b20      	cmp	r3, #32
 800761c:	f040 8141 	bne.w	80078a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
      break;
 800762e:	e13d      	b.n	80078ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007638:	2b20      	cmp	r3, #32
 800763a:	d10a      	bne.n	8007652 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	e12d      	b.n	80078ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	2b03      	cmp	r3, #3
 8007658:	d007      	beq.n	800766a <USBD_StdEPReq+0x7a>
 800765a:	2b03      	cmp	r3, #3
 800765c:	f300 811b 	bgt.w	8007896 <USBD_StdEPReq+0x2a6>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d072      	beq.n	800774a <USBD_StdEPReq+0x15a>
 8007664:	2b01      	cmp	r3, #1
 8007666:	d03a      	beq.n	80076de <USBD_StdEPReq+0xee>
 8007668:	e115      	b.n	8007896 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007670:	2b02      	cmp	r3, #2
 8007672:	d002      	beq.n	800767a <USBD_StdEPReq+0x8a>
 8007674:	2b03      	cmp	r3, #3
 8007676:	d015      	beq.n	80076a4 <USBD_StdEPReq+0xb4>
 8007678:	e02b      	b.n	80076d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00c      	beq.n	800769a <USBD_StdEPReq+0xaa>
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b80      	cmp	r3, #128	@ 0x80
 8007684:	d009      	beq.n	800769a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 ff82 	bl	8008594 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007690:	2180      	movs	r1, #128	@ 0x80
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 ff7e 	bl	8008594 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007698:	e020      	b.n	80076dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fc1b 	bl	8007ed8 <USBD_CtlError>
              break;
 80076a2:	e01b      	b.n	80076dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	885b      	ldrh	r3, [r3, #2]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10e      	bne.n	80076ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <USBD_StdEPReq+0xda>
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b80      	cmp	r3, #128	@ 0x80
 80076b6:	d008      	beq.n	80076ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	88db      	ldrh	r3, [r3, #6]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 ff65 	bl	8008594 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fcae 	bl	800802c <USBD_CtlSendStatus>

              break;
 80076d0:	e004      	b.n	80076dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fbff 	bl	8007ed8 <USBD_CtlError>
              break;
 80076da:	bf00      	nop
          }
          break;
 80076dc:	e0e0      	b.n	80078a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d002      	beq.n	80076ee <USBD_StdEPReq+0xfe>
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d015      	beq.n	8007718 <USBD_StdEPReq+0x128>
 80076ec:	e026      	b.n	800773c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00c      	beq.n	800770e <USBD_StdEPReq+0x11e>
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b80      	cmp	r3, #128	@ 0x80
 80076f8:	d009      	beq.n	800770e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 ff48 	bl	8008594 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007704:	2180      	movs	r1, #128	@ 0x80
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 ff44 	bl	8008594 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800770c:	e01c      	b.n	8007748 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fbe1 	bl	8007ed8 <USBD_CtlError>
              break;
 8007716:	e017      	b.n	8007748 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	885b      	ldrh	r3, [r3, #2]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d112      	bne.n	8007746 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 ff4f 	bl	80085d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fc79 	bl	800802c <USBD_CtlSendStatus>
              }
              break;
 800773a:	e004      	b.n	8007746 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fbca 	bl	8007ed8 <USBD_CtlError>
              break;
 8007744:	e000      	b.n	8007748 <USBD_StdEPReq+0x158>
              break;
 8007746:	bf00      	nop
          }
          break;
 8007748:	e0aa      	b.n	80078a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007750:	2b02      	cmp	r3, #2
 8007752:	d002      	beq.n	800775a <USBD_StdEPReq+0x16a>
 8007754:	2b03      	cmp	r3, #3
 8007756:	d032      	beq.n	80077be <USBD_StdEPReq+0x1ce>
 8007758:	e097      	b.n	800788a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <USBD_StdEPReq+0x180>
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b80      	cmp	r3, #128	@ 0x80
 8007764:	d004      	beq.n	8007770 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fbb5 	bl	8007ed8 <USBD_CtlError>
                break;
 800776e:	e091      	b.n	8007894 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007774:	2b00      	cmp	r3, #0
 8007776:	da0b      	bge.n	8007790 <USBD_StdEPReq+0x1a0>
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	3310      	adds	r3, #16
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	3304      	adds	r3, #4
 800778e:	e00b      	b.n	80077a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	3304      	adds	r3, #4
 80077a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2202      	movs	r2, #2
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fbf8 	bl	8007fac <USBD_CtlSendData>
              break;
 80077bc:	e06a      	b.n	8007894 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	da11      	bge.n	80077ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	f003 020f 	and.w	r2, r3, #15
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	3318      	adds	r3, #24
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d117      	bne.n	8007810 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fb78 	bl	8007ed8 <USBD_CtlError>
                  break;
 80077e8:	e054      	b.n	8007894 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	f003 020f 	and.w	r2, r3, #15
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	440b      	add	r3, r1
 80077fc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fb65 	bl	8007ed8 <USBD_CtlError>
                  break;
 800780e:	e041      	b.n	8007894 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007814:	2b00      	cmp	r3, #0
 8007816:	da0b      	bge.n	8007830 <USBD_StdEPReq+0x240>
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	3310      	adds	r3, #16
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	3304      	adds	r3, #4
 800782e:	e00b      	b.n	8007848 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	3304      	adds	r3, #4
 8007848:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <USBD_StdEPReq+0x266>
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b80      	cmp	r3, #128	@ 0x80
 8007854:	d103      	bne.n	800785e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e00e      	b.n	800787c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fed4 	bl	8008610 <USBD_LL_IsStallEP>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e002      	b.n	800787c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2202      	movs	r2, #2
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb92 	bl	8007fac <USBD_CtlSendData>
              break;
 8007888:	e004      	b.n	8007894 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fb23 	bl	8007ed8 <USBD_CtlError>
              break;
 8007892:	bf00      	nop
          }
          break;
 8007894:	e004      	b.n	80078a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fb1d 	bl	8007ed8 <USBD_CtlError>
          break;
 800789e:	bf00      	nop
      }
      break;
 80078a0:	e004      	b.n	80078ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fb17 	bl	8007ed8 <USBD_CtlError>
      break;
 80078aa:	bf00      	nop
  }

  return ret;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2b06      	cmp	r3, #6
 80078da:	f200 8128 	bhi.w	8007b2e <USBD_GetDescriptor+0x276>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <USBD_GetDescriptor+0x2c>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007901 	.word	0x08007901
 80078e8:	08007919 	.word	0x08007919
 80078ec:	08007959 	.word	0x08007959
 80078f0:	08007b2f 	.word	0x08007b2f
 80078f4:	08007b2f 	.word	0x08007b2f
 80078f8:	08007acf 	.word	0x08007acf
 80078fc:	08007afb 	.word	0x08007afb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	7c12      	ldrb	r2, [r2, #16]
 800790c:	f107 0108 	add.w	r1, r7, #8
 8007910:	4610      	mov	r0, r2
 8007912:	4798      	blx	r3
 8007914:	60f8      	str	r0, [r7, #12]
      break;
 8007916:	e112      	b.n	8007b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	7c1b      	ldrb	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007928:	f107 0208 	add.w	r2, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3301      	adds	r3, #1
 8007936:	2202      	movs	r2, #2
 8007938:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800793a:	e100      	b.n	8007b3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	f107 0208 	add.w	r2, r7, #8
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3301      	adds	r3, #1
 8007952:	2202      	movs	r2, #2
 8007954:	701a      	strb	r2, [r3, #0]
      break;
 8007956:	e0f2      	b.n	8007b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	885b      	ldrh	r3, [r3, #2]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b05      	cmp	r3, #5
 8007960:	f200 80ac 	bhi.w	8007abc <USBD_GetDescriptor+0x204>
 8007964:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <USBD_GetDescriptor+0xb4>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	08007985 	.word	0x08007985
 8007970:	080079b9 	.word	0x080079b9
 8007974:	080079ed 	.word	0x080079ed
 8007978:	08007a21 	.word	0x08007a21
 800797c:	08007a55 	.word	0x08007a55
 8007980:	08007a89 	.word	0x08007a89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	7c12      	ldrb	r2, [r2, #16]
 800799c:	f107 0108 	add.w	r1, r7, #8
 80079a0:	4610      	mov	r0, r2
 80079a2:	4798      	blx	r3
 80079a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079a6:	e091      	b.n	8007acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa94 	bl	8007ed8 <USBD_CtlError>
            err++;
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	3301      	adds	r3, #1
 80079b4:	72fb      	strb	r3, [r7, #11]
          break;
 80079b6:	e089      	b.n	8007acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	7c12      	ldrb	r2, [r2, #16]
 80079d0:	f107 0108 	add.w	r1, r7, #8
 80079d4:	4610      	mov	r0, r2
 80079d6:	4798      	blx	r3
 80079d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079da:	e077      	b.n	8007acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fa7a 	bl	8007ed8 <USBD_CtlError>
            err++;
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	3301      	adds	r3, #1
 80079e8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ea:	e06f      	b.n	8007acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7c12      	ldrb	r2, [r2, #16]
 8007a04:	f107 0108 	add.w	r1, r7, #8
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a0e:	e05d      	b.n	8007acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa60 	bl	8007ed8 <USBD_CtlError>
            err++;
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a1e:	e055      	b.n	8007acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	7c12      	ldrb	r2, [r2, #16]
 8007a38:	f107 0108 	add.w	r1, r7, #8
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a42:	e043      	b.n	8007acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa46 	bl	8007ed8 <USBD_CtlError>
            err++;
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	72fb      	strb	r3, [r7, #11]
          break;
 8007a52:	e03b      	b.n	8007acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	7c12      	ldrb	r2, [r2, #16]
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	4610      	mov	r0, r2
 8007a72:	4798      	blx	r3
 8007a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a76:	e029      	b.n	8007acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa2c 	bl	8007ed8 <USBD_CtlError>
            err++;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	3301      	adds	r3, #1
 8007a84:	72fb      	strb	r3, [r7, #11]
          break;
 8007a86:	e021      	b.n	8007acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aaa:	e00f      	b.n	8007acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa12 	bl	8007ed8 <USBD_CtlError>
            err++;
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aba:	e007      	b.n	8007acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa0a 	bl	8007ed8 <USBD_CtlError>
          err++;
 8007ac4:	7afb      	ldrb	r3, [r7, #11]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007aca:	e038      	b.n	8007b3e <USBD_GetDescriptor+0x286>
 8007acc:	e037      	b.n	8007b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7c1b      	ldrb	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ade:	f107 0208 	add.w	r2, r7, #8
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	4798      	blx	r3
 8007ae6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ae8:	e029      	b.n	8007b3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f9f3 	bl	8007ed8 <USBD_CtlError>
        err++;
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	3301      	adds	r3, #1
 8007af6:	72fb      	strb	r3, [r7, #11]
      break;
 8007af8:	e021      	b.n	8007b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7c1b      	ldrb	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10d      	bne.n	8007b1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	f107 0208 	add.w	r2, r7, #8
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4798      	blx	r3
 8007b12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	2207      	movs	r2, #7
 8007b1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b1c:	e00f      	b.n	8007b3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9d9 	bl	8007ed8 <USBD_CtlError>
        err++;
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b2c:	e007      	b.n	8007b3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f9d1 	bl	8007ed8 <USBD_CtlError>
      err++;
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b3c:	bf00      	nop
  }

  if (err != 0U)
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d11c      	bne.n	8007b7e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b44:	893b      	ldrh	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d011      	beq.n	8007b6e <USBD_GetDescriptor+0x2b6>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	88db      	ldrh	r3, [r3, #6]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00d      	beq.n	8007b6e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	88da      	ldrh	r2, [r3, #6]
 8007b56:	893b      	ldrh	r3, [r7, #8]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	bf28      	it	cs
 8007b5c:	4613      	movcs	r3, r2
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b62:	893b      	ldrh	r3, [r7, #8]
 8007b64:	461a      	mov	r2, r3
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa1f 	bl	8007fac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa58 	bl	800802c <USBD_CtlSendStatus>
 8007b7c:	e000      	b.n	8007b80 <USBD_GetDescriptor+0x2c8>
    return;
 8007b7e:	bf00      	nop
    }
  }
}
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop

08007b88 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	889b      	ldrh	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d130      	bne.n	8007bfc <USBD_SetAddress+0x74>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	88db      	ldrh	r3, [r3, #6]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d12c      	bne.n	8007bfc <USBD_SetAddress+0x74>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ba8:	d828      	bhi.n	8007bfc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d104      	bne.n	8007bca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f988 	bl	8007ed8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc8:	e01d      	b.n	8007c06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7bfa      	ldrb	r2, [r7, #15]
 8007bce:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fd46 	bl	8008668 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fa25 	bl	800802c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf0:	e009      	b.n	8007c06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfa:	e004      	b.n	8007c06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f96a 	bl	8007ed8 <USBD_CtlError>
  }
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	4b41      	ldr	r3, [pc, #260]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007c22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c24:	4b40      	ldr	r3, [pc, #256]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d904      	bls.n	8007c36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f952 	bl	8007ed8 <USBD_CtlError>
 8007c34:	e075      	b.n	8007d22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d002      	beq.n	8007c46 <USBD_SetConfig+0x36>
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d023      	beq.n	8007c8c <USBD_SetConfig+0x7c>
 8007c44:	e062      	b.n	8007d0c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c46:	4b38      	ldr	r3, [pc, #224]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01a      	beq.n	8007c84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c4e:	4b36      	ldr	r3, [pc, #216]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c60:	4b31      	ldr	r3, [pc, #196]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff f9e8 	bl	800703c <USBD_SetClassConfig>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d104      	bne.n	8007c7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f92f 	bl	8007ed8 <USBD_CtlError>
            return;
 8007c7a:	e052      	b.n	8007d22 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f9d5 	bl	800802c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c82:	e04e      	b.n	8007d22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f9d1 	bl	800802c <USBD_CtlSendStatus>
        break;
 8007c8a:	e04a      	b.n	8007d22 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c8c:	4b26      	ldr	r3, [pc, #152]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d112      	bne.n	8007cba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c9c:	4b22      	ldr	r3, [pc, #136]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ca6:	4b20      	ldr	r3, [pc, #128]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff f9e4 	bl	800707a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9ba 	bl	800802c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cb8:	e033      	b.n	8007d22 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007cba:	4b1b      	ldr	r3, [pc, #108]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d01d      	beq.n	8007d04 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff f9d2 	bl	800707a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cd6:	4b14      	ldr	r3, [pc, #80]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ce0:	4b11      	ldr	r3, [pc, #68]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff f9a8 	bl	800703c <USBD_SetClassConfig>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d104      	bne.n	8007cfc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f8ef 	bl	8007ed8 <USBD_CtlError>
            return;
 8007cfa:	e012      	b.n	8007d22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f995 	bl	800802c <USBD_CtlSendStatus>
        break;
 8007d02:	e00e      	b.n	8007d22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f991 	bl	800802c <USBD_CtlSendStatus>
        break;
 8007d0a:	e00a      	b.n	8007d22 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f8e2 	bl	8007ed8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d14:	4b04      	ldr	r3, [pc, #16]	@ (8007d28 <USBD_SetConfig+0x118>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff f9ad 	bl	800707a <USBD_ClrClassConfig>
        break;
 8007d20:	bf00      	nop
    }
  }
}
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000210 	.word	0x20000210

08007d2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	88db      	ldrh	r3, [r3, #6]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d004      	beq.n	8007d48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8c9 	bl	8007ed8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d46:	e022      	b.n	8007d8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	dc02      	bgt.n	8007d58 <USBD_GetConfig+0x2c>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc03      	bgt.n	8007d5e <USBD_GetConfig+0x32>
 8007d56:	e015      	b.n	8007d84 <USBD_GetConfig+0x58>
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetConfig+0x48>
 8007d5c:	e012      	b.n	8007d84 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3308      	adds	r3, #8
 8007d68:	2201      	movs	r2, #1
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f91d 	bl	8007fac <USBD_CtlSendData>
        break;
 8007d72:	e00c      	b.n	8007d8e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	2201      	movs	r2, #1
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f915 	bl	8007fac <USBD_CtlSendData>
        break;
 8007d82:	e004      	b.n	8007d8e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f8a6 	bl	8007ed8 <USBD_CtlError>
        break;
 8007d8c:	bf00      	nop
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da6:	3b01      	subs	r3, #1
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d81e      	bhi.n	8007dea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	88db      	ldrh	r3, [r3, #6]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d004      	beq.n	8007dbe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f88e 	bl	8007ed8 <USBD_CtlError>
        break;
 8007dbc:	e01a      	b.n	8007df4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f043 0202 	orr.w	r2, r3, #2
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	2202      	movs	r2, #2
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f8e2 	bl	8007fac <USBD_CtlSendData>
      break;
 8007de8:	e004      	b.n	8007df4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f873 	bl	8007ed8 <USBD_CtlError>
      break;
 8007df2:	bf00      	nop
  }
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	885b      	ldrh	r3, [r3, #2]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d106      	bne.n	8007e1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f908 	bl	800802c <USBD_CtlSendStatus>
  }
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e34:	3b01      	subs	r3, #1
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d80b      	bhi.n	8007e52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d10c      	bne.n	8007e5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f8ee 	bl	800802c <USBD_CtlSendStatus>
      }
      break;
 8007e50:	e004      	b.n	8007e5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f83f 	bl	8007ed8 <USBD_CtlError>
      break;
 8007e5a:	e000      	b.n	8007e5e <USBD_ClrFeature+0x3a>
      break;
 8007e5c:	bf00      	nop
  }
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781a      	ldrb	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	785a      	ldrb	r2, [r3, #1]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	3302      	adds	r3, #2
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	3303      	adds	r3, #3
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	4413      	add	r3, r2
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	3305      	adds	r3, #5
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4413      	add	r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	3306      	adds	r3, #6
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	3307      	adds	r3, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	80da      	strh	r2, [r3, #6]

}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ee2:	2180      	movs	r1, #128	@ 0x80
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fb55 	bl	8008594 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007eea:	2100      	movs	r1, #0
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb51 	bl	8008594 <USBD_LL_StallEP>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b086      	sub	sp, #24
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d032      	beq.n	8007f76 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f834 	bl	8007f7e <USBD_GetLen>
 8007f16:	4603      	mov	r3, r0
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	75fa      	strb	r2, [r7, #23]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4413      	add	r3, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7812      	ldrb	r2, [r2, #0]
 8007f34:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	75fa      	strb	r2, [r7, #23]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	2203      	movs	r2, #3
 8007f44:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f46:	e012      	b.n	8007f6e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	60fa      	str	r2, [r7, #12]
 8007f4e:	7dfa      	ldrb	r2, [r7, #23]
 8007f50:	1c51      	adds	r1, r2, #1
 8007f52:	75f9      	strb	r1, [r7, #23]
 8007f54:	4611      	mov	r1, r2
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	440a      	add	r2, r1
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	75fa      	strb	r2, [r7, #23]
 8007f64:	461a      	mov	r2, r3
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	4413      	add	r3, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e8      	bne.n	8007f48 <USBD_GetString+0x4e>
    }
  }
}
 8007f76:	bf00      	nop
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f8a:	e005      	b.n	8007f98 <USBD_GetLen+0x1a>
  {
    len++;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3301      	adds	r3, #1
 8007f96:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f5      	bne.n	8007f8c <USBD_GetLen+0xe>
  }

  return len;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc80      	pop	{r7}
 8007faa:	4770      	bx	lr

08007fac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007fc2:	88fa      	ldrh	r2, [r7, #6]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fc8:	88fa      	ldrh	r2, [r7, #6]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 fb66 	bl	80086a6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ff2:	88fb      	ldrh	r3, [r7, #6]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 fb54 	bl	80086a6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	2100      	movs	r1, #0
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fb65 	bl	80086ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2204      	movs	r2, #4
 8008038:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800803c:	2300      	movs	r3, #0
 800803e:	2200      	movs	r2, #0
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fb2f 	bl	80086a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2205      	movs	r2, #5
 800805e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008062:	2300      	movs	r3, #0
 8008064:	2200      	movs	r2, #0
 8008066:	2100      	movs	r1, #0
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb3f 	bl	80086ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800807c:	2200      	movs	r2, #0
 800807e:	490e      	ldr	r1, [pc, #56]	@ (80080b8 <MX_USB_DEVICE_Init+0x40>)
 8008080:	480e      	ldr	r0, [pc, #56]	@ (80080bc <MX_USB_DEVICE_Init+0x44>)
 8008082:	f7fe ff81 	bl	8006f88 <USBD_Init>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800808c:	f7f8 f9e0 	bl	8000450 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008090:	490b      	ldr	r1, [pc, #44]	@ (80080c0 <MX_USB_DEVICE_Init+0x48>)
 8008092:	480a      	ldr	r0, [pc, #40]	@ (80080bc <MX_USB_DEVICE_Init+0x44>)
 8008094:	f7fe ffa3 	bl	8006fde <USBD_RegisterClass>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800809e:	f7f8 f9d7 	bl	8000450 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080a2:	4806      	ldr	r0, [pc, #24]	@ (80080bc <MX_USB_DEVICE_Init+0x44>)
 80080a4:	f7fe ffb4 	bl	8007010 <USBD_Start>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80080ae:	f7f8 f9cf 	bl	8000450 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080b2:	bf00      	nop
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000108 	.word	0x20000108
 80080bc:	20000214 	.word	0x20000214
 80080c0:	2000000c 	.word	0x2000000c

080080c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2212      	movs	r2, #18
 80080d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080d6:	4b03      	ldr	r3, [pc, #12]	@ (80080e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20000124 	.word	0x20000124

080080e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2204      	movs	r2, #4
 80080f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080fa:	4b03      	ldr	r3, [pc, #12]	@ (8008108 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20000138 	.word	0x20000138

0800810c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d105      	bne.n	800812a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	4907      	ldr	r1, [pc, #28]	@ (8008140 <USBD_FS_ProductStrDescriptor+0x34>)
 8008122:	4808      	ldr	r0, [pc, #32]	@ (8008144 <USBD_FS_ProductStrDescriptor+0x38>)
 8008124:	f7ff fee9 	bl	8007efa <USBD_GetString>
 8008128:	e004      	b.n	8008134 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4904      	ldr	r1, [pc, #16]	@ (8008140 <USBD_FS_ProductStrDescriptor+0x34>)
 800812e:	4805      	ldr	r0, [pc, #20]	@ (8008144 <USBD_FS_ProductStrDescriptor+0x38>)
 8008130:	f7ff fee3 	bl	8007efa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008134:	4b02      	ldr	r3, [pc, #8]	@ (8008140 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	200004d8 	.word	0x200004d8
 8008144:	0800883c 	.word	0x0800883c

08008148 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4904      	ldr	r1, [pc, #16]	@ (8008168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008158:	4804      	ldr	r0, [pc, #16]	@ (800816c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800815a:	f7ff fece 	bl	8007efa <USBD_GetString>
  return USBD_StrDesc;
 800815e:	4b02      	ldr	r3, [pc, #8]	@ (8008168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200004d8 	.word	0x200004d8
 800816c:	08008854 	.word	0x08008854

08008170 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	221a      	movs	r2, #26
 8008180:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008182:	f000 f843 	bl	800820c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008186:	4b02      	ldr	r3, [pc, #8]	@ (8008190 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	2000013c 	.word	0x2000013c

08008194 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	4907      	ldr	r1, [pc, #28]	@ (80081c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081aa:	4808      	ldr	r0, [pc, #32]	@ (80081cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80081ac:	f7ff fea5 	bl	8007efa <USBD_GetString>
 80081b0:	e004      	b.n	80081bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4904      	ldr	r1, [pc, #16]	@ (80081c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081b6:	4805      	ldr	r0, [pc, #20]	@ (80081cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80081b8:	f7ff fe9f 	bl	8007efa <USBD_GetString>
  }
  return USBD_StrDesc;
 80081bc:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200004d8 	.word	0x200004d8
 80081cc:	08008868 	.word	0x08008868

080081d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	4907      	ldr	r1, [pc, #28]	@ (8008204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081e6:	4808      	ldr	r0, [pc, #32]	@ (8008208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e8:	f7ff fe87 	bl	8007efa <USBD_GetString>
 80081ec:	e004      	b.n	80081f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4904      	ldr	r1, [pc, #16]	@ (8008204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081f2:	4805      	ldr	r0, [pc, #20]	@ (8008208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081f4:	f7ff fe81 	bl	8007efa <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f8:	4b02      	ldr	r3, [pc, #8]	@ (8008204 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200004d8 	.word	0x200004d8
 8008208:	08008878 	.word	0x08008878

0800820c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4413      	add	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008220:	2208      	movs	r2, #8
 8008222:	4906      	ldr	r1, [pc, #24]	@ (800823c <Get_SerialNum+0x30>)
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f80d 	bl	8008244 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800822a:	2204      	movs	r2, #4
 800822c:	4904      	ldr	r1, [pc, #16]	@ (8008240 <Get_SerialNum+0x34>)
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f808 	bl	8008244 <IntToUnicode>
  }
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	2000013e 	.word	0x2000013e
 8008240:	2000014e 	.word	0x2000014e

08008244 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
 800825a:	e027      	b.n	80082ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	0f1b      	lsrs	r3, r3, #28
 8008260:	2b09      	cmp	r3, #9
 8008262:	d80b      	bhi.n	800827c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	0f1b      	lsrs	r3, r3, #28
 8008268:	b2da      	uxtb	r2, r3
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	4619      	mov	r1, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	440b      	add	r3, r1
 8008274:	3230      	adds	r2, #48	@ 0x30
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	e00a      	b.n	8008292 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	0f1b      	lsrs	r3, r3, #28
 8008280:	b2da      	uxtb	r2, r3
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4619      	mov	r1, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	440b      	add	r3, r1
 800828c:	3237      	adds	r2, #55	@ 0x37
 800828e:	b2d2      	uxtb	r2, r2
 8008290:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	3301      	adds	r3, #1
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	3301      	adds	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
 80082ac:	7dfa      	ldrb	r2, [r7, #23]
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d3d3      	bcc.n	800825c <IntToUnicode+0x18>
  }
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008304 <HAL_PCD_MspInit+0x44>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d113      	bne.n	80082fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008308 <HAL_PCD_MspInit+0x48>)
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008308 <HAL_PCD_MspInit+0x48>)
 80082d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082dc:	61d3      	str	r3, [r2, #28]
 80082de:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <HAL_PCD_MspInit+0x48>)
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	2014      	movs	r0, #20
 80082f0:	f7f8 fb0d 	bl	800090e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80082f4:	2014      	movs	r0, #20
 80082f6:	f7f8 fb26 	bl	8000946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	40005c00 	.word	0x40005c00
 8008308:	40021000 	.word	0x40021000

0800830c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe febc 	bl	80070a0 <USBD_LL_SetupStage>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008342:	78fa      	ldrb	r2, [r7, #3]
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	440b      	add	r3, r1
 8008350:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	4619      	mov	r1, r3
 800835a:	f7fe feee 	bl	800713a <USBD_LL_DataOutStage>
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008378:	78fa      	ldrb	r2, [r7, #3]
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	440b      	add	r3, r1
 8008386:	333c      	adds	r3, #60	@ 0x3c
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	4619      	mov	r1, r3
 800838e:	f7fe ff45 	bl	800721c <USBD_LL_DataInStage>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff f855 	bl	8007458 <USBD_LL_SOF>
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d001      	beq.n	80083ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083ca:	f7f8 f841 	bl	8000450 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083d4:	7bfa      	ldrb	r2, [r7, #15]
 80083d6:	4611      	mov	r1, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff f805 	bl	80073e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe ffbe 	bl	8007366 <USBD_LL_Reset>
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe ffff 	bl	8007406 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008410:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <HAL_PCD_SuspendCallback+0x30>)
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	4a03      	ldr	r2, [pc, #12]	@ (8008424 <HAL_PCD_SuspendCallback+0x30>)
 8008416:	f043 0306 	orr.w	r3, r3, #6
 800841a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	e000ed00 	.word	0xe000ed00

08008428 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fff9 	bl	800742e <USBD_LL_Resume>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800844c:	4a1f      	ldr	r2, [pc, #124]	@ (80084cc <USBD_LL_Init+0x88>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a1d      	ldr	r2, [pc, #116]	@ (80084cc <USBD_LL_Init+0x88>)
 8008458:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800845c:	4b1b      	ldr	r3, [pc, #108]	@ (80084cc <USBD_LL_Init+0x88>)
 800845e:	4a1c      	ldr	r2, [pc, #112]	@ (80084d0 <USBD_LL_Init+0x8c>)
 8008460:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008462:	4b1a      	ldr	r3, [pc, #104]	@ (80084cc <USBD_LL_Init+0x88>)
 8008464:	2208      	movs	r2, #8
 8008466:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008468:	4b18      	ldr	r3, [pc, #96]	@ (80084cc <USBD_LL_Init+0x88>)
 800846a:	2202      	movs	r2, #2
 800846c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800846e:	4b17      	ldr	r3, [pc, #92]	@ (80084cc <USBD_LL_Init+0x88>)
 8008470:	2200      	movs	r2, #0
 8008472:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008474:	4b15      	ldr	r3, [pc, #84]	@ (80084cc <USBD_LL_Init+0x88>)
 8008476:	2200      	movs	r2, #0
 8008478:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800847a:	4b14      	ldr	r3, [pc, #80]	@ (80084cc <USBD_LL_Init+0x88>)
 800847c:	2200      	movs	r2, #0
 800847e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008480:	4812      	ldr	r0, [pc, #72]	@ (80084cc <USBD_LL_Init+0x88>)
 8008482:	f7f8 fcc8 	bl	8000e16 <HAL_PCD_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800848c:	f7f7 ffe0 	bl	8000450 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008496:	2318      	movs	r3, #24
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	f7fa f9cf 	bl	800283e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084a6:	2358      	movs	r3, #88	@ 0x58
 80084a8:	2200      	movs	r2, #0
 80084aa:	2180      	movs	r1, #128	@ 0x80
 80084ac:	f7fa f9c7 	bl	800283e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084ba:	2200      	movs	r2, #0
 80084bc:	2181      	movs	r1, #129	@ 0x81
 80084be:	f7fa f9be 	bl	800283e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	200006d8 	.word	0x200006d8
 80084d0:	40005c00 	.word	0x40005c00

080084d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f8 fd92 	bl	8001014 <HAL_PCD_Start>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f93c 	bl	8008774 <USBD_Get_USB_Status>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008500:	7bbb      	ldrb	r3, [r7, #14]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	4608      	mov	r0, r1
 8008514:	4611      	mov	r1, r2
 8008516:	461a      	mov	r2, r3
 8008518:	4603      	mov	r3, r0
 800851a:	70fb      	strb	r3, [r7, #3]
 800851c:	460b      	mov	r3, r1
 800851e:	70bb      	strb	r3, [r7, #2]
 8008520:	4613      	mov	r3, r2
 8008522:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008532:	78bb      	ldrb	r3, [r7, #2]
 8008534:	883a      	ldrh	r2, [r7, #0]
 8008536:	78f9      	ldrb	r1, [r7, #3]
 8008538:	f7f8 fee7 	bl	800130a <HAL_PCD_EP_Open>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f916 	bl	8008774 <USBD_Get_USB_Status>
 8008548:	4603      	mov	r3, r0
 800854a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800854c:	7bbb      	ldrb	r3, [r7, #14]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008570:	78fa      	ldrb	r2, [r7, #3]
 8008572:	4611      	mov	r1, r2
 8008574:	4618      	mov	r0, r3
 8008576:	f7f8 ff25 	bl	80013c4 <HAL_PCD_EP_Close>
 800857a:	4603      	mov	r3, r0
 800857c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f8f7 	bl	8008774 <USBD_Get_USB_Status>
 8008586:	4603      	mov	r3, r0
 8008588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800858a:	7bbb      	ldrb	r3, [r7, #14]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f8 ffb6 	bl	8001524 <HAL_PCD_EP_SetStall>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f8d8 	bl	8008774 <USBD_Get_USB_Status>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7f8 fff7 	bl	80015e4 <HAL_PCD_EP_ClrStall>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 f8b9 	bl	8008774 <USBD_Get_USB_Status>
 8008602:	4603      	mov	r3, r0
 8008604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008606:	7bbb      	ldrb	r3, [r7, #14]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008622:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008628:	2b00      	cmp	r3, #0
 800862a:	da0c      	bge.n	8008646 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	440b      	add	r3, r1
 8008640:	3302      	adds	r3, #2
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	e00b      	b.n	800865e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800864c:	68f9      	ldr	r1, [r7, #12]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	440b      	add	r3, r1
 8008658:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800865c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr

08008668 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f7f8 fe1a 	bl	80012c0 <HAL_PCD_SetAddress>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f86e 	bl	8008774 <USBD_Get_USB_Status>
 8008698:	4603      	mov	r3, r0
 800869a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869c:	7bbb      	ldrb	r3, [r7, #14]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	461a      	mov	r2, r3
 80086b2:	460b      	mov	r3, r1
 80086b4:	72fb      	strb	r3, [r7, #11]
 80086b6:	4613      	mov	r3, r2
 80086b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086c8:	893b      	ldrh	r3, [r7, #8]
 80086ca:	7af9      	ldrb	r1, [r7, #11]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	f7f8 fef2 	bl	80014b6 <HAL_PCD_EP_Transmit>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f84b 	bl	8008774 <USBD_Get_USB_Status>
 80086de:	4603      	mov	r3, r0
 80086e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	461a      	mov	r2, r3
 80086f8:	460b      	mov	r3, r1
 80086fa:	72fb      	strb	r3, [r7, #11]
 80086fc:	4613      	mov	r3, r2
 80086fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800870e:	893b      	ldrh	r3, [r7, #8]
 8008710:	7af9      	ldrb	r1, [r7, #11]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	f7f8 fe9e 	bl	8001454 <HAL_PCD_EP_Receive>
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f828 	bl	8008774 <USBD_Get_USB_Status>
 8008724:	4603      	mov	r3, r0
 8008726:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008728:	7dbb      	ldrb	r3, [r7, #22]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800873c:	4b02      	ldr	r3, [pc, #8]	@ (8008748 <USBD_static_malloc+0x14>)
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	200009c8 	.word	0x200009c8

0800874c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]

}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	2b03      	cmp	r3, #3
 8008786:	d817      	bhi.n	80087b8 <USBD_Get_USB_Status+0x44>
 8008788:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <USBD_Get_USB_Status+0x1c>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a7 	.word	0x080087a7
 8008798:	080087ad 	.word	0x080087ad
 800879c:	080087b3 	.word	0x080087b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
    break;
 80087a4:	e00b      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087a6:	2302      	movs	r3, #2
 80087a8:	73fb      	strb	r3, [r7, #15]
    break;
 80087aa:	e008      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
    break;
 80087b0:	e005      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087b2:	2302      	movs	r3, #2
 80087b4:	73fb      	strb	r3, [r7, #15]
    break;
 80087b6:	e002      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087b8:	2302      	movs	r3, #2
 80087ba:	73fb      	strb	r3, [r7, #15]
    break;
 80087bc:	bf00      	nop
  }
  return usb_status;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop

080087cc <memset>:
 80087cc:	4603      	mov	r3, r0
 80087ce:	4402      	add	r2, r0
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d100      	bne.n	80087d6 <memset+0xa>
 80087d4:	4770      	bx	lr
 80087d6:	f803 1b01 	strb.w	r1, [r3], #1
 80087da:	e7f9      	b.n	80087d0 <memset+0x4>

080087dc <__libc_init_array>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	2600      	movs	r6, #0
 80087e0:	4d0c      	ldr	r5, [pc, #48]	@ (8008814 <__libc_init_array+0x38>)
 80087e2:	4c0d      	ldr	r4, [pc, #52]	@ (8008818 <__libc_init_array+0x3c>)
 80087e4:	1b64      	subs	r4, r4, r5
 80087e6:	10a4      	asrs	r4, r4, #2
 80087e8:	42a6      	cmp	r6, r4
 80087ea:	d109      	bne.n	8008800 <__libc_init_array+0x24>
 80087ec:	f000 f81a 	bl	8008824 <_init>
 80087f0:	2600      	movs	r6, #0
 80087f2:	4d0a      	ldr	r5, [pc, #40]	@ (800881c <__libc_init_array+0x40>)
 80087f4:	4c0a      	ldr	r4, [pc, #40]	@ (8008820 <__libc_init_array+0x44>)
 80087f6:	1b64      	subs	r4, r4, r5
 80087f8:	10a4      	asrs	r4, r4, #2
 80087fa:	42a6      	cmp	r6, r4
 80087fc:	d105      	bne.n	800880a <__libc_init_array+0x2e>
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f855 3b04 	ldr.w	r3, [r5], #4
 8008804:	4798      	blx	r3
 8008806:	3601      	adds	r6, #1
 8008808:	e7ee      	b.n	80087e8 <__libc_init_array+0xc>
 800880a:	f855 3b04 	ldr.w	r3, [r5], #4
 800880e:	4798      	blx	r3
 8008810:	3601      	adds	r6, #1
 8008812:	e7f2      	b.n	80087fa <__libc_init_array+0x1e>
 8008814:	080088b4 	.word	0x080088b4
 8008818:	080088b4 	.word	0x080088b4
 800881c:	080088b4 	.word	0x080088b4
 8008820:	080088b8 	.word	0x080088b8

08008824 <_init>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr

08008830 <_fini>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr
