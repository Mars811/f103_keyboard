
f103_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008828  08008828  00009828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a0  080088a0  0000a158  2**0
                  CONTENTS
  4 .ARM          00000000  080088a0  080088a0  0000a158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088a0  080088a0  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088a4  080088a4  000098a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080088a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20000158  08008a00  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  08008a00  0000a9e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141ed  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003301  00000000  00000000  0001e36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00021670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dea  00000000  00000000  00022888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b9  00000000  00000000  00023672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d60  00000000  00000000  0003d82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee5d  00000000  00000000  0005558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e43e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b04  00000000  00000000  000e442c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e8f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08008810 	.word	0x08008810

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08008810 	.word	0x08008810

0800014c <GetPointerData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* 获取键位 */
static void GetPointerData(uint8_t *pbuf)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  // 清空报告缓冲区（8字节全0）
  memset(pbuf, 0, 8);
 8000154:	2208      	movs	r2, #8
 8000156:	2100      	movs	r1, #0
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f008 fb2d 	bl	80087b8 <memset>

  if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == 1) {
 800015e:	2102      	movs	r1, #2
 8000160:	480c      	ldr	r0, [pc, #48]	@ (8000194 <GetPointerData+0x48>)
 8000162:	f000 fe37 	bl	8000dd4 <HAL_GPIO_ReadPin>
 8000166:	4603      	mov	r3, r0
 8000168:	2b01      	cmp	r3, #1
 800016a:	d103      	bne.n	8000174 <GetPointerData+0x28>
    pbuf[2] = 0x1D;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3302      	adds	r3, #2
 8000170:	221d      	movs	r2, #29
 8000172:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 8000174:	2108      	movs	r1, #8
 8000176:	4807      	ldr	r0, [pc, #28]	@ (8000194 <GetPointerData+0x48>)
 8000178:	f000 fe2c 	bl	8000dd4 <HAL_GPIO_ReadPin>
 800017c:	4603      	mov	r3, r0
 800017e:	2b01      	cmp	r3, #1
 8000180:	d103      	bne.n	800018a <GetPointerData+0x3e>
    pbuf[2] = 0x1E;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	3302      	adds	r3, #2
 8000186:	221e      	movs	r2, #30
 8000188:	701a      	strb	r2, [r3, #0]
  }
}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800

08000198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019c:	f000 fa74 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a0:	f000 f810 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a4:	f000 f8de 	bl	8000364 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a8:	f000 f8b2 	bl	8000310 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001ac:	f007 ff5a 	bl	8008064 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001b0:	f000 f862 	bl	8000278 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001b4:	4802      	ldr	r0, [pc, #8]	@ (80001c0 <main+0x28>)
 80001b6:	f003 f891 	bl	80032dc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ba:	bf00      	nop
 80001bc:	e7fd      	b.n	80001ba <main+0x22>
 80001be:	bf00      	nop
 80001c0:	20000174 	.word	0x20000174

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	@ 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ce:	2228      	movs	r2, #40	@ 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f008 faf0 	bl	80087b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800020e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000210:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fb48 	bl	80028b0 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000226:	f000 f909 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800023a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fdb4 	bl	8002db4 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000252:	f000 f8f3 	bl	800043c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000256:	2310      	movs	r3, #16
 8000258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f002 ff35 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800026c:	f000 f8e6 	bl	800043c <Error_Handler>
  }
}
 8000270:	bf00      	nop
 8000272:	3750      	adds	r7, #80	@ 0x50
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000294:	4b1d      	ldr	r3, [pc, #116]	@ (800030c <MX_TIM2_Init+0x94>)
 8000296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800029c:	4b1b      	ldr	r3, [pc, #108]	@ (800030c <MX_TIM2_Init+0x94>)
 800029e:	2247      	movs	r2, #71	@ 0x47
 80002a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a2:	4b1a      	ldr	r3, [pc, #104]	@ (800030c <MX_TIM2_Init+0x94>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002a8:	4b18      	ldr	r3, [pc, #96]	@ (800030c <MX_TIM2_Init+0x94>)
 80002aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b0:	4b16      	ldr	r3, [pc, #88]	@ (800030c <MX_TIM2_Init+0x94>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b6:	4b15      	ldr	r3, [pc, #84]	@ (800030c <MX_TIM2_Init+0x94>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002bc:	4813      	ldr	r0, [pc, #76]	@ (800030c <MX_TIM2_Init+0x94>)
 80002be:	f002 ffbd 	bl	800323c <HAL_TIM_Base_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002c8:	f000 f8b8 	bl	800043c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	4619      	mov	r1, r3
 80002d8:	480c      	ldr	r0, [pc, #48]	@ (800030c <MX_TIM2_Init+0x94>)
 80002da:	f003 f959 	bl	8003590 <HAL_TIM_ConfigClockSource>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002e4:	f000 f8aa 	bl	800043c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e8:	2300      	movs	r3, #0
 80002ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ec:	2300      	movs	r3, #0
 80002ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002f0:	463b      	mov	r3, r7
 80002f2:	4619      	mov	r1, r3
 80002f4:	4805      	ldr	r0, [pc, #20]	@ (800030c <MX_TIM2_Init+0x94>)
 80002f6:	f003 fb2f 	bl	8003958 <HAL_TIMEx_MasterConfigSynchronization>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000300:	f000 f89c 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000174 	.word	0x20000174

08000310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <MX_USART1_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800031c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000348:	f003 fb76 	bl	8003a38 <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f873 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200001bc 	.word	0x200001bc
 8000360:	40013800 	.word	0x40013800

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <MX_GPIO_Init+0x7c>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <MX_GPIO_Init+0x7c>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <MX_GPIO_Init+0x7c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <MX_GPIO_Init+0x7c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a12      	ldr	r2, [pc, #72]	@ (80003e0 <MX_GPIO_Init+0x7c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <MX_GPIO_Init+0x7c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80003a8:	2302      	movs	r3, #2
 80003aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003b0:	2302      	movs	r3, #2
 80003b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80003b4:	f107 0308 	add.w	r3, r7, #8
 80003b8:	4619      	mov	r1, r3
 80003ba:	480a      	ldr	r0, [pc, #40]	@ (80003e4 <MX_GPIO_Init+0x80>)
 80003bc:	f000 fb86 	bl	8000acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* GPIO配置 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003c0:	2308      	movs	r3, #8
 80003c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003c8:	2302      	movs	r3, #2
 80003ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	4619      	mov	r1, r3
 80003d2:	4804      	ldr	r0, [pc, #16]	@ (80003e4 <MX_GPIO_Init+0x80>)
 80003d4:	f000 fb7a 	bl	8000acc <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 80003d8:	bf00      	nop
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010800 	.word	0x40010800

080003e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* 定时器中断回调函数 */
  static volatile uint32_t counter = 0;
    if (htim->Instance == TIM2)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003f8:	d115      	bne.n	8000426 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      // 每10ms执行一次PC的轮询回应
      if(counter++ == USBD_HID_GetPollingInterval(&hUsbDeviceFS))
 80003fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003fc:	681c      	ldr	r4, [r3, #0]
 80003fe:	1c63      	adds	r3, r4, #1
 8000400:	4a0b      	ldr	r2, [pc, #44]	@ (8000430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000402:	6013      	str	r3, [r2, #0]
 8000404:	480b      	ldr	r0, [pc, #44]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000406:	f006 fd4d 	bl	8006ea4 <USBD_HID_GetPollingInterval>
 800040a:	4603      	mov	r3, r0
 800040c:	429c      	cmp	r4, r3
 800040e:	d10a      	bne.n	8000426 <HAL_TIM_PeriodElapsedCallback+0x3e>
      {
        GetPointerData(HID_Buffer);
 8000410:	4809      	ldr	r0, [pc, #36]	@ (8000438 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000412:	f7ff fe9b 	bl	800014c <GetPointerData>
        USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000416:	2208      	movs	r2, #8
 8000418:	4907      	ldr	r1, [pc, #28]	@ (8000438 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800041a:	4806      	ldr	r0, [pc, #24]	@ (8000434 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800041c:	f006 fd20 	bl	8006e60 <USBD_HID_SendReport>
        counter = 0;
 8000420:	4b03      	ldr	r3, [pc, #12]	@ (8000430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
      }
    }
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bd90      	pop	{r4, r7, pc}
 800042e:	bf00      	nop
 8000430:	2000020c 	.word	0x2000020c
 8000434:	20000218 	.word	0x20000218
 8000438:	20000204 	.word	0x20000204

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <Error_Handler+0x8>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004bc:	d113      	bne.n	80004e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <HAL_TIM_Base_MspInit+0x44>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <HAL_TIM_Base_MspInit+0x44>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <HAL_TIM_Base_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	201c      	movs	r0, #28
 80004dc:	f000 fa0d 	bl	80008fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004e0:	201c      	movs	r0, #28
 80004e2:	f000 fa26 	bl	8000932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a20      	ldr	r2, [pc, #128]	@ (8000590 <HAL_UART_MspInit+0x9c>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d139      	bne.n	8000588 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000514:	4b1f      	ldr	r3, [pc, #124]	@ (8000594 <HAL_UART_MspInit+0xa0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a1e      	ldr	r2, [pc, #120]	@ (8000594 <HAL_UART_MspInit+0xa0>)
 800051a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b1c      	ldr	r3, [pc, #112]	@ (8000594 <HAL_UART_MspInit+0xa0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b19      	ldr	r3, [pc, #100]	@ (8000594 <HAL_UART_MspInit+0xa0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a18      	ldr	r2, [pc, #96]	@ (8000594 <HAL_UART_MspInit+0xa0>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <HAL_UART_MspInit+0xa0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	2303      	movs	r3, #3
 8000550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	480f      	ldr	r0, [pc, #60]	@ (8000598 <HAL_UART_MspInit+0xa4>)
 800055a:	f000 fab7 	bl	8000acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800055e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4809      	ldr	r0, [pc, #36]	@ (8000598 <HAL_UART_MspInit+0xa4>)
 8000574:	f000 faaa 	bl	8000acc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2100      	movs	r1, #0
 800057c:	2025      	movs	r0, #37	@ 0x25
 800057e:	f000 f9bc 	bl	80008fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000582:	2025      	movs	r0, #37	@ 0x25
 8000584:	f000 f9d5 	bl	8000932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40013800 	.word	0x40013800
 8000594:	40021000 	.word	0x40021000
 8000598:	40010800 	.word	0x40010800

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <NMI_Handler+0x4>

080005a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <MemManage_Handler+0x4>

080005b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f892 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005f8:	4802      	ldr	r0, [pc, #8]	@ (8000604 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005fa:	f000 fd27 	bl	800104c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200006dc 	.word	0x200006dc

08000608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <TIM2_IRQHandler+0x10>)
 800060e:	f002 feb7 	bl	8003380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000174 	.word	0x20000174

0800061c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000620:	4802      	ldr	r0, [pc, #8]	@ (800062c <USART1_IRQHandler+0x10>)
 8000622:	f003 fa59 	bl	8003ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200001bc 	.word	0x200001bc

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800063c:	f7ff fff8 	bl	8000630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480b      	ldr	r0, [pc, #44]	@ (8000670 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000642:	490c      	ldr	r1, [pc, #48]	@ (8000674 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a09      	ldr	r2, [pc, #36]	@ (800067c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000658:	4c09      	ldr	r4, [pc, #36]	@ (8000680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000666:	f008 f8af 	bl	80087c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fd95 	bl	8000198 <main>
  bx lr
 800066e:	4770      	bx	lr
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000678:	080088a8 	.word	0x080088a8
  ldr r2, =_sbss
 800067c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000680:	200009e0 	.word	0x200009e0

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <HAL_Init+0x28>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <HAL_Init+0x28>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f923 	bl	80008e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	200f      	movs	r0, #15
 80006a0:	f000 f808 	bl	80006b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff fed0 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <HAL_InitTick+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_InitTick+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f93b 	bl	800094e <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e00e      	b.n	8000700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d80a      	bhi.n	80006fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f000 f903 	bl	80008fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4a06      	ldr	r2, [pc, #24]	@ (8000710 <HAL_InitTick+0x5c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a03      	ldr	r2, [pc, #12]	@ (8000734 <HAL_IncTick+0x20>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	20000008 	.word	0x20000008
 8000734:	20000210 	.word	0x20000210

08000738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	@ (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000210 	.word	0x20000210

0800074c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <__NVIC_GetPriorityGrouping+0x18>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 0307 	and.w	r3, r3, #7
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db0b      	blt.n	80007da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 021f 	and.w	r2, r3, #31
 80007c8:	4906      	ldr	r1, [pc, #24]	@ (80007e4 <__NVIC_EnableIRQ+0x34>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db0a      	blt.n	8000812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	490c      	ldr	r1, [pc, #48]	@ (8000834 <__NVIC_SetPriority+0x4c>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	440b      	add	r3, r1
 800080c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000810:	e00a      	b.n	8000828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4908      	ldr	r1, [pc, #32]	@ (8000838 <__NVIC_SetPriority+0x50>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	3b04      	subs	r3, #4
 8000820:	0112      	lsls	r2, r2, #4
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	440b      	add	r3, r1
 8000826:	761a      	strb	r2, [r3, #24]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	@ 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f1c3 0307 	rsb	r3, r3, #7
 8000856:	2b04      	cmp	r3, #4
 8000858:	bf28      	it	cs
 800085a:	2304      	movcs	r3, #4
 800085c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3304      	adds	r3, #4
 8000862:	2b06      	cmp	r3, #6
 8000864:	d902      	bls.n	800086c <NVIC_EncodePriority+0x30>
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3b03      	subs	r3, #3
 800086a:	e000      	b.n	800086e <NVIC_EncodePriority+0x32>
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43da      	mvns	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	401a      	ands	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43d9      	mvns	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	4313      	orrs	r3, r2
         );
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	@ 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008b0:	d301      	bcc.n	80008b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00f      	b.n	80008d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <SysTick_Config+0x40>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008be:	210f      	movs	r1, #15
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f7ff ff90 	bl	80007e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <SysTick_Config+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <SysTick_Config+0x40>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff2d 	bl	800074c <__NVIC_SetPriorityGrouping>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800090c:	f7ff ff42 	bl	8000794 <__NVIC_GetPriorityGrouping>
 8000910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f7ff ff90 	bl	800083c <NVIC_EncodePriority>
 800091c:	4602      	mov	r2, r0
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff5f 	bl	80007e8 <__NVIC_SetPriority>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff35 	bl	80007b0 <__NVIC_EnableIRQ>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffa2 	bl	80008a0 <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b02      	cmp	r3, #2
 800097c:	d008      	beq.n	8000990 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2204      	movs	r2, #4
 8000982:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e020      	b.n	80009d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f022 020e 	bic.w	r2, r2, #14
 800099e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f022 0201 	bic.w	r2, r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2201      	movs	r2, #1
 80009c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d005      	beq.n	8000a00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2204      	movs	r2, #4
 80009f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e051      	b.n	8000aa4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 020e 	bic.w	r2, r2, #14
 8000a0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0201 	bic.w	r2, r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a22      	ldr	r2, [pc, #136]	@ (8000ab0 <HAL_DMA_Abort_IT+0xd4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d029      	beq.n	8000a7e <HAL_DMA_Abort_IT+0xa2>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <HAL_DMA_Abort_IT+0xd8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d022      	beq.n	8000a7a <HAL_DMA_Abort_IT+0x9e>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab8 <HAL_DMA_Abort_IT+0xdc>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d01a      	beq.n	8000a74 <HAL_DMA_Abort_IT+0x98>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a1e      	ldr	r2, [pc, #120]	@ (8000abc <HAL_DMA_Abort_IT+0xe0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d012      	beq.n	8000a6e <HAL_DMA_Abort_IT+0x92>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <HAL_DMA_Abort_IT+0xe4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00a      	beq.n	8000a68 <HAL_DMA_Abort_IT+0x8c>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac4 <HAL_DMA_Abort_IT+0xe8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d102      	bne.n	8000a62 <HAL_DMA_Abort_IT+0x86>
 8000a5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a60:	e00e      	b.n	8000a80 <HAL_DMA_Abort_IT+0xa4>
 8000a62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a66:	e00b      	b.n	8000a80 <HAL_DMA_Abort_IT+0xa4>
 8000a68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a6c:	e008      	b.n	8000a80 <HAL_DMA_Abort_IT+0xa4>
 8000a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a72:	e005      	b.n	8000a80 <HAL_DMA_Abort_IT+0xa4>
 8000a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a78:	e002      	b.n	8000a80 <HAL_DMA_Abort_IT+0xa4>
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	e000      	b.n	8000a80 <HAL_DMA_Abort_IT+0xa4>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	4a11      	ldr	r2, [pc, #68]	@ (8000ac8 <HAL_DMA_Abort_IT+0xec>)
 8000a82:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	4798      	blx	r3
    } 
  }
  return status;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020008 	.word	0x40020008
 8000ab4:	4002001c 	.word	0x4002001c
 8000ab8:	40020030 	.word	0x40020030
 8000abc:	40020044 	.word	0x40020044
 8000ac0:	40020058 	.word	0x40020058
 8000ac4:	4002006c 	.word	0x4002006c
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b08b      	sub	sp, #44	@ 0x2c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e169      	b.n	8000db4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f040 8158 	bne.w	8000dae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a9a      	ldr	r2, [pc, #616]	@ (8000d6c <HAL_GPIO_Init+0x2a0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d05e      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b08:	4a98      	ldr	r2, [pc, #608]	@ (8000d6c <HAL_GPIO_Init+0x2a0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d875      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b0e:	4a98      	ldr	r2, [pc, #608]	@ (8000d70 <HAL_GPIO_Init+0x2a4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d058      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b14:	4a96      	ldr	r2, [pc, #600]	@ (8000d70 <HAL_GPIO_Init+0x2a4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d86f      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b1a:	4a96      	ldr	r2, [pc, #600]	@ (8000d74 <HAL_GPIO_Init+0x2a8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d052      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b20:	4a94      	ldr	r2, [pc, #592]	@ (8000d74 <HAL_GPIO_Init+0x2a8>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d869      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b26:	4a94      	ldr	r2, [pc, #592]	@ (8000d78 <HAL_GPIO_Init+0x2ac>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d04c      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b2c:	4a92      	ldr	r2, [pc, #584]	@ (8000d78 <HAL_GPIO_Init+0x2ac>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d863      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b32:	4a92      	ldr	r2, [pc, #584]	@ (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d046      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b38:	4a90      	ldr	r2, [pc, #576]	@ (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d85d      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b3e:	2b12      	cmp	r3, #18
 8000b40:	d82a      	bhi.n	8000b98 <HAL_GPIO_Init+0xcc>
 8000b42:	2b12      	cmp	r3, #18
 8000b44:	d859      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b46:	a201      	add	r2, pc, #4	@ (adr r2, 8000b4c <HAL_GPIO_Init+0x80>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000bc7 	.word	0x08000bc7
 8000b50:	08000ba1 	.word	0x08000ba1
 8000b54:	08000bb3 	.word	0x08000bb3
 8000b58:	08000bf5 	.word	0x08000bf5
 8000b5c:	08000bfb 	.word	0x08000bfb
 8000b60:	08000bfb 	.word	0x08000bfb
 8000b64:	08000bfb 	.word	0x08000bfb
 8000b68:	08000bfb 	.word	0x08000bfb
 8000b6c:	08000bfb 	.word	0x08000bfb
 8000b70:	08000bfb 	.word	0x08000bfb
 8000b74:	08000bfb 	.word	0x08000bfb
 8000b78:	08000bfb 	.word	0x08000bfb
 8000b7c:	08000bfb 	.word	0x08000bfb
 8000b80:	08000bfb 	.word	0x08000bfb
 8000b84:	08000bfb 	.word	0x08000bfb
 8000b88:	08000bfb 	.word	0x08000bfb
 8000b8c:	08000bfb 	.word	0x08000bfb
 8000b90:	08000ba9 	.word	0x08000ba9
 8000b94:	08000bbd 	.word	0x08000bbd
 8000b98:	4a79      	ldr	r2, [pc, #484]	@ (8000d80 <HAL_GPIO_Init+0x2b4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d013      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b9e:	e02c      	b.n	8000bfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e029      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	3304      	adds	r3, #4
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	e024      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e01f      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	330c      	adds	r3, #12
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e01a      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e013      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d105      	bne.n	8000be8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	611a      	str	r2, [r3, #16]
          break;
 8000be6:	e009      	b.n	8000bfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	615a      	str	r2, [r3, #20]
          break;
 8000bf2:	e003      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          break;
 8000bfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2bff      	cmp	r3, #255	@ 0xff
 8000c00:	d801      	bhi.n	8000c06 <HAL_GPIO_Init+0x13a>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	e001      	b.n	8000c0a <HAL_GPIO_Init+0x13e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	2bff      	cmp	r3, #255	@ 0xff
 8000c10:	d802      	bhi.n	8000c18 <HAL_GPIO_Init+0x14c>
 8000c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	e002      	b.n	8000c1e <HAL_GPIO_Init+0x152>
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	3b08      	subs	r3, #8
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	210f      	movs	r1, #15
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	6a39      	ldr	r1, [r7, #32]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 80b1 	beq.w	8000dae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d84 <HAL_GPIO_Init+0x2b8>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a4c      	ldr	r2, [pc, #304]	@ (8000d84 <HAL_GPIO_Init+0x2b8>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b4a      	ldr	r3, [pc, #296]	@ (8000d84 <HAL_GPIO_Init+0x2b8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c64:	4a48      	ldr	r2, [pc, #288]	@ (8000d88 <HAL_GPIO_Init+0x2bc>)
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a40      	ldr	r2, [pc, #256]	@ (8000d8c <HAL_GPIO_Init+0x2c0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x1ec>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a3f      	ldr	r2, [pc, #252]	@ (8000d90 <HAL_GPIO_Init+0x2c4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e8>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d94 <HAL_GPIO_Init+0x2c8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1e4>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8000d98 <HAL_GPIO_Init+0x2cc>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1e0>
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e006      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e004      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cbc:	f002 0203 	and.w	r2, r2, #3
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cca:	492f      	ldr	r1, [pc, #188]	@ (8000d88 <HAL_GPIO_Init+0x2bc>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d006      	beq.n	8000cf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	492c      	ldr	r1, [pc, #176]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4928      	ldr	r1, [pc, #160]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	4922      	ldr	r1, [pc, #136]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	60cb      	str	r3, [r1, #12]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d1a:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	491e      	ldr	r1, [pc, #120]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4918      	ldr	r1, [pc, #96]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4914      	ldr	r1, [pc, #80]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d021      	beq.n	8000da0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	490e      	ldr	r1, [pc, #56]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e021      	b.n	8000dae <HAL_GPIO_Init+0x2e2>
 8000d6a:	bf00      	nop
 8000d6c:	10320000 	.word	0x10320000
 8000d70:	10310000 	.word	0x10310000
 8000d74:	10220000 	.word	0x10220000
 8000d78:	10210000 	.word	0x10210000
 8000d7c:	10120000 	.word	0x10120000
 8000d80:	10110000 	.word	0x10110000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40011400 	.word	0x40011400
 8000d9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_GPIO_Init+0x304>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4909      	ldr	r1, [pc, #36]	@ (8000dd0 <HAL_GPIO_Init+0x304>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dba:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f47f ae8e 	bne.w	8000ae0 <HAL_GPIO_Init+0x14>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	372c      	adds	r7, #44	@ 0x2c
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e001      	b.n	8000df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e04:	b08b      	sub	sp, #44	@ 0x2c
 8000e06:	af06      	add	r7, sp, #24
 8000e08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e0f1      	b.n	8000ff8 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d106      	bne.n	8000e2e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f007 fa3f 	bl	80082ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fb54 	bl	80044e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	687e      	ldr	r6, [r7, #4]
 8000e48:	466d      	mov	r5, sp
 8000e4a:	f106 0410 	add.w	r4, r6, #16
 8000e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	602b      	str	r3, [r5, #0]
 8000e56:	1d33      	adds	r3, r6, #4
 8000e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5a:	6838      	ldr	r0, [r7, #0]
 8000e5c:	f003 fb1e 	bl	800449c <USB_CoreInit>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0c2      	b.n	8000ff8 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fb4f 	bl	800451c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e040      	b.n	8000f06 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	440b      	add	r3, r1
 8000e94:	3301      	adds	r3, #1
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3303      	adds	r3, #3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3338      	adds	r3, #56	@ 0x38
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	440b      	add	r3, r1
 8000ee6:	333c      	adds	r3, #60	@ 0x3c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eec:	7bfa      	ldrb	r2, [r7, #15]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	440b      	add	r3, r1
 8000efa:	3340      	adds	r3, #64	@ 0x40
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	3301      	adds	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d3b9      	bcc.n	8000e84 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e044      	b.n	8000fa0 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	440b      	add	r3, r1
 8000f66:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3b5      	bcc.n	8000f16 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	687e      	ldr	r6, [r7, #4]
 8000fb2:	466d      	mov	r5, sp
 8000fb4:	f106 0410 	add.w	r4, r6, #16
 8000fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	1d33      	adds	r3, r6, #4
 8000fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f003 fab5 	bl	8004534 <USB_DevInit>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00d      	b.n	8000ff8 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f005 fd36 	bl	8006a62 <USB_DevDisconnect>

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001000 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_PCD_Start+0x16>
 8001012:	2302      	movs	r3, #2
 8001014:	e016      	b.n	8001044 <HAL_PCD_Start+0x44>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fa4a 	bl	80044bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001028:	2101      	movs	r1, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f007 fb8d 	bl	800874a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f005 fd0a 	bl	8006a4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f005 fd0c 	bl	8006a76 <USB_ReadInterrupts>
 800105e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fb04 	bl	8001678 <PCD_EP_ISR_Handler>

    return;
 8001070:	e119      	b.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800108e:	b292      	uxth	r2, r2
 8001090:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f007 f984 	bl	80083a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800109a:	2100      	movs	r1, #0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f905 	bl	80012ac <HAL_PCD_SetAddress>

    return;
 80010a2:	e100      	b.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010c0:	b292      	uxth	r2, r2
 80010c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010c6:	e0ee      	b.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00c      	beq.n	80010ec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010e4:	b292      	uxth	r2, r2
 80010e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010ea:	e0dc      	b.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d027      	beq.n	8001146 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0204 	bic.w	r2, r2, #4
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0208 	bic.w	r2, r2, #8
 8001120:	b292      	uxth	r2, r2
 8001122:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f007 f974 	bl	8008414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001134:	b29a      	uxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800113e:	b292      	uxth	r2, r2
 8001140:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001144:	e0af      	b.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 8083 	beq.w	8001258 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	77fb      	strb	r3, [r7, #31]
 8001156:	e010      	b.n	800117a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	441a      	add	r2, r3
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	8812      	ldrh	r2, [r2, #0]
 8001168:	b292      	uxth	r2, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	3320      	adds	r3, #32
 800116e:	443b      	add	r3, r7
 8001170:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001174:	7ffb      	ldrb	r3, [r7, #31]
 8001176:	3301      	adds	r3, #1
 8001178:	77fb      	strb	r3, [r7, #31]
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	2b07      	cmp	r3, #7
 800117e:	d9eb      	bls.n	8001158 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	b292      	uxth	r2, r2
 8001194:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	b292      	uxth	r2, r2
 80011ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011b0:	bf00      	nop
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f6      	beq.n	80011b2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011d6:	b292      	uxth	r2, r2
 80011d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	77fb      	strb	r3, [r7, #31]
 80011e0:	e00f      	b.n	8001202 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	4611      	mov	r1, r2
 80011ea:	7ffa      	ldrb	r2, [r7, #31]
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	440a      	add	r2, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	3320      	adds	r3, #32
 80011f4:	443b      	add	r3, r7
 80011f6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011fa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011fc:	7ffb      	ldrb	r3, [r7, #31]
 80011fe:	3301      	adds	r3, #1
 8001200:	77fb      	strb	r3, [r7, #31]
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d9ec      	bls.n	80011e2 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0208 	orr.w	r2, r2, #8
 800121a:	b292      	uxth	r2, r2
 800121c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001228:	b29a      	uxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001232:	b292      	uxth	r2, r2
 8001234:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0204 	orr.w	r2, r2, #4
 800124a:	b292      	uxth	r2, r2
 800124c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f007 f8c5 	bl	80083e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001256:	e026      	b.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00f      	beq.n	8001282 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001274:	b292      	uxth	r2, r2
 8001276:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f007 f883 	bl	8008386 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001280:	e011      	b.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00c      	beq.n	80012a6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800129e:	b292      	uxth	r2, r2
 80012a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012a4:	bf00      	nop
  }
}
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_PCD_SetAddress+0x1a>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e013      	b.n	80012ee <HAL_PCD_SetAddress+0x42>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f005 fba2 	bl	8006a28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	4608      	mov	r0, r1
 8001300:	4611      	mov	r1, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4603      	mov	r3, r0
 8001306:	70fb      	strb	r3, [r7, #3]
 8001308:	460b      	mov	r3, r1
 800130a:	803b      	strh	r3, [r7, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	da0e      	bge.n	800133a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2201      	movs	r2, #1
 8001336:	705a      	strb	r2, [r3, #1]
 8001338:	e00e      	b.n	8001358 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	f003 0207 	and.w	r2, r3, #7
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	b2da      	uxtb	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001364:	883a      	ldrh	r2, [r7, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	78ba      	ldrb	r2, [r7, #2]
 800136e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d102      	bne.n	800137c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_PCD_EP_Open+0x94>
 8001386:	2302      	movs	r3, #2
 8001388:	e00e      	b.n	80013a8 <HAL_PCD_EP_Open+0xb2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68f9      	ldr	r1, [r7, #12]
 8001398:	4618      	mov	r0, r3
 800139a:	f003 f8eb 	bl	8004574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80013a6:	7afb      	ldrb	r3, [r7, #11]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da0e      	bge.n	80013e2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2201      	movs	r2, #1
 80013de:	705a      	strb	r2, [r3, #1]
 80013e0:	e00e      	b.n	8001400 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	f003 0207 	and.w	r2, r3, #7
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <HAL_PCD_EP_Close+0x6a>
 8001416:	2302      	movs	r3, #2
 8001418:	e00e      	b.n	8001438 <HAL_PCD_EP_Close+0x88>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68f9      	ldr	r1, [r7, #12]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fc63 	bl	8004cf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	460b      	mov	r3, r1
 800144e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	f003 0207 	and.w	r2, r3, #7
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2200      	movs	r2, #0
 800147e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	b2da      	uxtb	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6979      	ldr	r1, [r7, #20]
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fe1a 	bl	80050cc <USB_EPStartXfer>

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	460b      	mov	r3, r1
 80014b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2201      	movs	r2, #1
 80014ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fde3 	bl	80050cc <USB_EPStartXfer>

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0207 	and.w	r2, r3, #7
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d901      	bls.n	800152e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e04c      	b.n	80015c8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800152e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da0e      	bge.n	8001554 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	705a      	strb	r2, [r3, #1]
 8001552:	e00c      	b.n	800156e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	b2da      	uxtb	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_PCD_EP_SetStall+0x7e>
 800158a:	2302      	movs	r3, #2
 800158c:	e01c      	b.n	80015c8 <HAL_PCD_EP_SetStall+0xb8>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	4618      	mov	r0, r3
 800159e:	f005 f946 	bl	800682e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d108      	bne.n	80015be <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f005 fa6b 	bl	8006a94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	f003 020f 	and.w	r2, r3, #15
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d901      	bls.n	80015ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e040      	b.n	8001670 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da0e      	bge.n	8001614 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	705a      	strb	r2, [r3, #1]
 8001612:	e00e      	b.n	8001632 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 0207 	and.w	r2, r3, #7
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_PCD_EP_ClrStall+0x82>
 800164e:	2302      	movs	r3, #2
 8001650:	e00e      	b.n	8001670 <HAL_PCD_EP_ClrStall+0xa0>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	4618      	mov	r0, r3
 8001662:	f005 f934 	bl	80068ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b096      	sub	sp, #88	@ 0x58
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001680:	e3be      	b.n	8001e00 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800168a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800168e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800169c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f040 8178 	bne.w	8001996 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d151      	bne.n	8001756 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80016be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016c2:	81fb      	strh	r3, [r7, #14]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3328      	adds	r3, #40	@ 0x28
 80016da:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	3302      	adds	r3, #2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001706:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	441a      	add	r2, r3
 8001712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001714:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f006 fe1a 	bl	8008352 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 836a 	beq.w	8001e00 <PCD_EP_ISR_Handler+0x788>
 800172c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 8365 	bne.w	8001e00 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001754:	e354      	b.n	8001e00 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800175c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001768:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800176c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001770:	2b00      	cmp	r3, #0
 8001772:	d034      	beq.n	80017de <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	3306      	adds	r3, #6
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800179c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800179e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80017aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f005 f9be 	bl	8006b34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017c4:	4013      	ands	r3, r2
 80017c6:	823b      	strh	r3, [r7, #16]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	8a3a      	ldrh	r2, [r7, #16]
 80017ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017d2:	b292      	uxth	r2, r2
 80017d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f006 fd8e 	bl	80082f8 <HAL_PCD_SetupStageCallback>
 80017dc:	e310      	b.n	8001e00 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017de:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f280 830c 	bge.w	8001e00 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017f4:	4013      	ands	r3, r2
 80017f6:	83fb      	strh	r3, [r7, #30]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	8bfa      	ldrh	r2, [r7, #30]
 80017fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001802:	b292      	uxth	r2, r2
 8001804:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	3306      	adds	r3, #6
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	4413      	add	r3, r2
 8001824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800182e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001830:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d019      	beq.n	800186e <PCD_EP_ISR_Handler+0x1f6>
 800183a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d015      	beq.n	800186e <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001848:	6959      	ldr	r1, [r3, #20]
 800184a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800184e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001850:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001852:	b29b      	uxth	r3, r3
 8001854:	f005 f96e 	bl	8006b34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	441a      	add	r2, r3
 8001862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001864:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001866:	2100      	movs	r1, #0
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f006 fd57 	bl	800831c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001878:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800187c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 82bd 	bne.w	8001e00 <PCD_EP_ISR_Handler+0x788>
 8001886:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800188a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800188e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001892:	f000 82b5 	beq.w	8001e00 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4413      	add	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	801a      	strh	r2, [r3, #0]
 80018c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80018cc:	d91d      	bls.n	800190a <PCD_EP_ISR_Handler+0x292>
 80018ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80018d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <PCD_EP_ISR_Handler+0x270>
 80018e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018e4:	3b01      	subs	r3, #1
 80018e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	029b      	lsls	r3, r3, #10
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001902:	b29a      	uxth	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	e026      	b.n	8001958 <PCD_EP_ISR_Handler+0x2e0>
 800190a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <PCD_EP_ISR_Handler+0x2b0>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800191c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001920:	b29a      	uxth	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	e017      	b.n	8001958 <PCD_EP_ISR_Handler+0x2e0>
 8001928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <PCD_EP_ISR_Handler+0x2ca>
 800193c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800193e:	3301      	adds	r3, #1
 8001940:	647b      	str	r3, [r7, #68]	@ 0x44
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29a      	uxth	r2, r3
 8001948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194a:	b29b      	uxth	r3, r3
 800194c:	029b      	lsls	r3, r3, #10
 800194e:	b29b      	uxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b29a      	uxth	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001968:	827b      	strh	r3, [r7, #18]
 800196a:	8a7b      	ldrh	r3, [r7, #18]
 800196c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001970:	827b      	strh	r3, [r7, #18]
 8001972:	8a7b      	ldrh	r3, [r7, #18]
 8001974:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001978:	827b      	strh	r3, [r7, #18]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	8a7b      	ldrh	r3, [r7, #18]
 8001980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800198c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001990:	b29b      	uxth	r3, r3
 8001992:	8013      	strh	r3, [r2, #0]
 8001994:	e234      	b.n	8001e00 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f280 80fc 	bge.w	8001bac <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019ca:	4013      	ands	r3, r2
 80019cc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80019e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019e6:	b292      	uxth	r2, r2
 80019e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019ea:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a02:	7b1b      	ldrb	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d125      	bne.n	8001a54 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3306      	adds	r3, #6
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8092 	beq.w	8001b62 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a44:	6959      	ldr	r1, [r3, #20]
 8001a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a48:	88da      	ldrh	r2, [r3, #6]
 8001a4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a4e:	f005 f871 	bl	8006b34 <USB_ReadPMA>
 8001a52:	e086      	b.n	8001b62 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a56:	78db      	ldrb	r3, [r3, #3]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d10a      	bne.n	8001a72 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a60:	461a      	mov	r2, r3
 8001a62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f9d9 	bl	8001e1c <HAL_PCD_EP_DB_Receive>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001a70:	e077      	b.n	8001b62 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a8c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	441a      	add	r2, r3
 8001a9e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d024      	beq.n	8001b1a <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d02e      	beq.n	8001b62 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0a:	6959      	ldr	r1, [r3, #20]
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0e:	891a      	ldrh	r2, [r3, #8]
 8001b10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b14:	f005 f80e 	bl	8006b34 <USB_ReadPMA>
 8001b18:	e023      	b.n	8001b62 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3306      	adds	r3, #6
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b42:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b54:	6959      	ldr	r1, [r3, #20]
 8001b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b58:	895a      	ldrh	r2, [r3, #10]
 8001b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b5e:	f004 ffe9 	bl	8006b34 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b6a:	441a      	add	r2, r3
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b78:	441a      	add	r2, r3
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <PCD_EP_ISR_Handler+0x51a>
 8001b86:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d206      	bcs.n	8001ba0 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f006 fbbf 	bl	800831c <HAL_PCD_DataOutStageCallback>
 8001b9e:	e005      	b.n	8001bac <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fa90 	bl	80050cc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8123 	beq.w	8001e00 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001be8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	441a      	add	r2, r3
 8001bfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0c:	78db      	ldrb	r3, [r3, #3]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	f040 80a2 	bne.w	8001d58 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1c:	7b1b      	ldrb	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8093 	beq.w	8001d4a <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d046      	beq.n	8001cbe <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d126      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x60e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	4413      	add	r3, r2
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	011a      	lsls	r2, r3, #4
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	4413      	add	r3, r2
 8001c5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	e061      	b.n	8001d4a <PCD_EP_ISR_Handler+0x6d2>
 8001c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d15d      	bne.n	8001d4a <PCD_EP_ISR_Handler+0x6d2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca2:	4413      	add	r3, r2
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	011a      	lsls	r2, r3, #4
 8001cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cae:	4413      	add	r3, r2
 8001cb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
 8001cbc:	e045      	b.n	8001d4a <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d126      	bne.n	8001d1a <PCD_EP_ISR_Handler+0x6a2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce0:	4413      	add	r3, r2
 8001ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	011a      	lsls	r2, r3, #4
 8001cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cec:	4413      	add	r3, r2
 8001cee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d02:	801a      	strh	r2, [r3, #0]
 8001d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	e017      	b.n	8001d4a <PCD_EP_ISR_Handler+0x6d2>
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d113      	bne.n	8001d4a <PCD_EP_ISR_Handler+0x6d2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d30:	4413      	add	r3, r2
 8001d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	011a      	lsls	r2, r3, #4
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d46:	2200      	movs	r2, #0
 8001d48:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f006 fafe 	bl	8008352 <HAL_PCD_DataInStageCallback>
 8001d56:	e053      	b.n	8001e00 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d146      	bne.n	8001df2 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d907      	bls.n	8001dac <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001da4:	1ad2      	subs	r2, r2, r3
 8001da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da8:	619a      	str	r2, [r3, #24]
 8001daa:	e002      	b.n	8001db2 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f006 fac6 	bl	8008352 <HAL_PCD_DataInStageCallback>
 8001dc6:	e01b      	b.n	8001e00 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dd0:	441a      	add	r2, r3
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dde:	441a      	add	r2, r3
 8001de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 f96e 	bl	80050cc <USB_EPStartXfer>
 8001df0:	e006      	b.n	8001e00 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001df2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001df6:	461a      	mov	r2, r3
 8001df8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f91b 	bl	8002036 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f6ff ac38 	blt.w	8001682 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3758      	adds	r7, #88	@ 0x58
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d07e      	beq.n	8001f32 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	8b7b      	ldrh	r3, [r7, #26]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d306      	bcc.n	8001e76 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	8b7b      	ldrh	r3, [r7, #26]
 8001e6e:	1ad2      	subs	r2, r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	619a      	str	r2, [r3, #24]
 8001e74:	e002      	b.n	8001e7c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d123      	bne.n	8001ecc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e9e:	833b      	strh	r3, [r7, #24]
 8001ea0:	8b3b      	ldrh	r3, [r7, #24]
 8001ea2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ea6:	833b      	strh	r3, [r7, #24]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	441a      	add	r2, r3
 8001eb6:	8b3b      	ldrh	r3, [r7, #24]
 8001eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01f      	beq.n	8001f16 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ef0:	82fb      	strh	r3, [r7, #22]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	441a      	add	r2, r3
 8001f00:	8afb      	ldrh	r3, [r7, #22]
 8001f02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f16:	8b7b      	ldrh	r3, [r7, #26]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8087 	beq.w	800202c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6959      	ldr	r1, [r3, #20]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	891a      	ldrh	r2, [r3, #8]
 8001f2a:	8b7b      	ldrh	r3, [r7, #26]
 8001f2c:	f004 fe02 	bl	8006b34 <USB_ReadPMA>
 8001f30:	e07c      	b.n	800202c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	3306      	adds	r3, #6
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	8b7b      	ldrh	r3, [r7, #26]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d306      	bcc.n	8001f74 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	8b7b      	ldrh	r3, [r7, #26]
 8001f6c:	1ad2      	subs	r2, r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	619a      	str	r2, [r3, #24]
 8001f72:	e002      	b.n	8001f7a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d123      	bne.n	8001fca <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f9c:	83fb      	strh	r3, [r7, #30]
 8001f9e:	8bfb      	ldrh	r3, [r7, #30]
 8001fa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fa4:	83fb      	strh	r3, [r7, #30]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	441a      	add	r2, r3
 8001fb4:	8bfb      	ldrh	r3, [r7, #30]
 8001fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11f      	bne.n	8002014 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fee:	83bb      	strh	r3, [r7, #28]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	441a      	add	r2, r3
 8001ffe:	8bbb      	ldrh	r3, [r7, #28]
 8002000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800200c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002010:	b29b      	uxth	r3, r3
 8002012:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002014:	8b7b      	ldrh	r3, [r7, #26]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6959      	ldr	r1, [r3, #20]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	895a      	ldrh	r2, [r3, #10]
 8002026:	8b7b      	ldrh	r3, [r7, #26]
 8002028:	f004 fd84 	bl	8006b34 <USB_ReadPMA>
    }
  }

  return count;
 800202c:	8b7b      	ldrh	r3, [r7, #26]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b0a4      	sub	sp, #144	@ 0x90
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	4613      	mov	r3, r2
 8002042:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 81dd 	beq.w	800240a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002058:	b29b      	uxth	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	3302      	adds	r3, #2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002078:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002084:	429a      	cmp	r2, r3
 8002086:	d907      	bls.n	8002098 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	e002      	b.n	800209e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80b9 	bne.w	800221a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d126      	bne.n	80020fe <HAL_PCD_EP_DB_Transmit+0xc8>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c4:	4413      	add	r3, r2
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	011a      	lsls	r2, r3, #4
 80020ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d0:	4413      	add	r3, r2
 80020d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	e01a      	b.n	8002134 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d116      	bne.n	8002134 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211a:	4413      	add	r3, r2
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	011a      	lsls	r2, r3, #4
 8002124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002126:	4413      	add	r3, r2
 8002128:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
 800212e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d126      	bne.n	8002190 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	011a      	lsls	r2, r3, #4
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002174:	b29a      	uxth	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002188:	b29a      	uxth	r2, r3
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	e017      	b.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d113      	bne.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	4413      	add	r3, r2
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	011a      	lsls	r2, r3, #4
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	4413      	add	r3, r2
 80021b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	2200      	movs	r2, #0
 80021be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f006 f8c3 	bl	8008352 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 82fc 	beq.w	80027d0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f2:	82fb      	strh	r3, [r7, #22]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	8afb      	ldrh	r3, [r7, #22]
 8002204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800220c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002214:	b29b      	uxth	r3, r3
 8002216:	8013      	strh	r3, [r2, #0]
 8002218:	e2da      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d021      	beq.n	8002268 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800223a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800223e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800225c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002264:	b29b      	uxth	r3, r3
 8002266:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 82ae 	bne.w	80027d0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800227c:	441a      	add	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800228a:	441a      	add	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d30b      	bcc.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ac:	1ad2      	subs	r2, r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	621a      	str	r2, [r3, #32]
 80022b2:	e017      	b.n	80022e4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80022bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022cc:	e00a      	b.n	80022e4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d165      	bne.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x382>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002300:	4413      	add	r3, r2
 8002302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	011a      	lsls	r2, r3, #4
 800230a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230c:	4413      	add	r3, r2
 800230e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231e:	b29a      	uxth	r2, r3
 8002320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002328:	2b3e      	cmp	r3, #62	@ 0x3e
 800232a:	d91d      	bls.n	8002368 <HAL_PCD_EP_DB_Transmit+0x332>
 800232c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002334:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_PCD_EP_DB_Transmit+0x310>
 8002340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002342:	3b01      	subs	r3, #1
 8002344:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29a      	uxth	r2, r3
 800234c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800234e:	b29b      	uxth	r3, r3
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	b29b      	uxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800235c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002360:	b29a      	uxth	r2, r3
 8002362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	e044      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0x350>
 8002370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237e:	b29a      	uxth	r2, r3
 8002380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	e035      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800238e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x36a>
 800239a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800239c:	3301      	adds	r3, #1
 800239e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	e01c      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	785b      	ldrb	r3, [r3, #1]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d118      	bne.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d4:	4413      	add	r3, r2
 80023d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	011a      	lsls	r2, r3, #4
 80023de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e0:	4413      	add	r3, r2
 80023e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80023e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6959      	ldr	r1, [r3, #20]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	891a      	ldrh	r2, [r3, #8]
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002402:	b29b      	uxth	r3, r3
 8002404:	f004 fb51 	bl	8006aaa <USB_WritePMA>
 8002408:	e1e2      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	3306      	adds	r3, #6
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002432:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800243e:	429a      	cmp	r2, r3
 8002440:	d307      	bcc.n	8002452 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800244a:	1ad2      	subs	r2, r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	619a      	str	r2, [r3, #24]
 8002450:	e002      	b.n	8002458 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 80c0 	bne.w	80025e2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d126      	bne.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x482>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800247e:	4413      	add	r3, r2
 8002480:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	011a      	lsls	r2, r3, #4
 8002488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800248a:	4413      	add	r3, r2
 800248c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002490:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249c:	b29a      	uxth	r2, r3
 800249e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	e01a      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d116      	bne.n	80024ee <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024d4:	4413      	add	r3, r2
 80024d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	011a      	lsls	r2, r3, #4
 80024de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024e0:	4413      	add	r3, r2
 80024e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ea:	2200      	movs	r2, #0
 80024ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d12b      	bne.n	8002554 <HAL_PCD_EP_DB_Transmit+0x51e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002510:	4413      	add	r3, r2
 8002512:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	011a      	lsls	r2, r3, #4
 800251a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251c:	4413      	add	r3, r2
 800251e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002522:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002532:	b29a      	uxth	r2, r3
 8002534:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254a:	b29a      	uxth	r2, r3
 800254c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	e017      	b.n	8002584 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d113      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0x54e>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800256a:	4413      	add	r3, r2
 800256c:	677b      	str	r3, [r7, #116]	@ 0x74
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	011a      	lsls	r2, r3, #4
 8002574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002576:	4413      	add	r3, r2
 8002578:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800257c:	673b      	str	r3, [r7, #112]	@ 0x70
 800257e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f005 fee1 	bl	8008352 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 811a 	bne.w	80027d0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025b6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	441a      	add	r2, r3
 80025c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8013      	strh	r3, [r2, #0]
 80025e0:	e0f6      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d121      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002606:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	441a      	add	r2, r3
 8002618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800261c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800262c:	b29b      	uxth	r3, r3
 800262e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002636:	2b01      	cmp	r3, #1
 8002638:	f040 80ca 	bne.w	80027d0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002644:	441a      	add	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002652:	441a      	add	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d30b      	bcc.n	800267c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002674:	1ad2      	subs	r2, r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	621a      	str	r2, [r3, #32]
 800267a:	e017      	b.n	80026ac <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d108      	bne.n	8002696 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002684:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002694:	e00a      	b.n	80026ac <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d165      	bne.n	8002786 <HAL_PCD_EP_DB_Transmit+0x750>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ce:	4413      	add	r3, r2
 80026d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	011a      	lsls	r2, r3, #4
 80026d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026da:	4413      	add	r3, r2
 80026dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80026f8:	d91d      	bls.n	8002736 <HAL_PCD_EP_DB_Transmit+0x700>
 80026fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <HAL_PCD_EP_DB_Transmit+0x6de>
 800270e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002710:	3b01      	subs	r3, #1
 8002712:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002714:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29a      	uxth	r2, r3
 800271a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800271c:	b29b      	uxth	r3, r3
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	b29b      	uxth	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	b29b      	uxth	r3, r3
 8002726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272e:	b29a      	uxth	r2, r3
 8002730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	e041      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x784>
 8002736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <HAL_PCD_EP_DB_Transmit+0x71e>
 800273e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274c:	b29a      	uxth	r2, r3
 800274e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	e032      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x784>
 8002754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800275c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_PCD_EP_DB_Transmit+0x738>
 8002768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800276a:	3301      	adds	r3, #1
 800276c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800276e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29a      	uxth	r2, r3
 8002774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002776:	b29b      	uxth	r3, r3
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	b29b      	uxth	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	b29a      	uxth	r2, r3
 8002780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002782:	801a      	strh	r2, [r3, #0]
 8002784:	e019      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x784>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d115      	bne.n	80027ba <HAL_PCD_EP_DB_Transmit+0x784>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002796:	b29b      	uxth	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279c:	4413      	add	r3, r2
 800279e:	657b      	str	r3, [r7, #84]	@ 0x54
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	011a      	lsls	r2, r3, #4
 80027a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a8:	4413      	add	r3, r2
 80027aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80027b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	895a      	ldrh	r2, [r3, #10]
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f004 f96d 	bl	8006aaa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ea:	82bb      	strh	r3, [r7, #20]
 80027ec:	8abb      	ldrh	r3, [r7, #20]
 80027ee:	f083 0310 	eor.w	r3, r3, #16
 80027f2:	82bb      	strh	r3, [r7, #20]
 80027f4:	8abb      	ldrh	r3, [r7, #20]
 80027f6:	f083 0320 	eor.w	r3, r3, #32
 80027fa:	82bb      	strh	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	8abb      	ldrh	r3, [r7, #20]
 800280c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800281c:	b29b      	uxth	r3, r3
 800281e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3790      	adds	r7, #144	@ 0x90
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800282a:	b480      	push	{r7}
 800282c:	b087      	sub	sp, #28
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	817b      	strh	r3, [r7, #10]
 8002838:	4613      	mov	r3, r2
 800283a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800283c:	897b      	ldrh	r3, [r7, #10]
 800283e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e009      	b.n	8002874 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002860:	897a      	ldrh	r2, [r7, #10]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	b29a      	uxth	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	80da      	strh	r2, [r3, #6]
 8002888:	e00b      	b.n	80028a2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2201      	movs	r2, #1
 800288e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	b29a      	uxth	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	b29a      	uxth	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e272      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d0:	4b92      	ldr	r3, [pc, #584]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d112      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
 80028e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f4:	d10b      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f6:	4b89      	ldr	r3, [pc, #548]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d06c      	beq.n	80029dc <HAL_RCC_OscConfig+0x12c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d168      	bne.n	80029dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e24c      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x76>
 8002918:	4b80      	ldr	r3, [pc, #512]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e02e      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x98>
 800292e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7a      	ldr	r2, [pc, #488]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b78      	ldr	r3, [pc, #480]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a77      	ldr	r2, [pc, #476]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002940:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0xbc>
 8002952:	4b72      	ldr	r3, [pc, #456]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a71      	ldr	r2, [pc, #452]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6e      	ldr	r2, [pc, #440]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 800296c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6a      	ldr	r2, [pc, #424]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a67      	ldr	r2, [pc, #412]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fd fed4 	bl	8000738 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7fd fed0 	bl	8000738 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	@ 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e200      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xe4>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fd fec0 	bl	8000738 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fd febc 	bl	8000738 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	@ 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1ec      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x10c>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
 8002a02:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1c0      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3d      	ldr	r3, [pc, #244]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4939      	ldr	r1, [pc, #228]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fd fe75 	bl	8000738 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fd fe71 	bl	8000738 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1a1      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4927      	ldr	r1, [pc, #156]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b26      	ldr	r3, [pc, #152]	@ (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fd fe54 	bl	8000738 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fd fe50 	bl	8000738 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e180      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03a      	beq.n	8002b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7fd fe34 	bl	8000738 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fd fe30 	bl	8000738 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e160      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 face 	bl	8003094 <RCC_Delay>
 8002af8:	e01c      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fd fe1a 	bl	8000738 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b06:	e00f      	b.n	8002b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fd fe16 	bl	8000738 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d908      	bls.n	8002b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e146      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	42420000 	.word	0x42420000
 8002b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b92      	ldr	r3, [pc, #584]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e9      	bne.n	8002b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a6 	beq.w	8002c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b8b      	ldr	r3, [pc, #556]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	4b88      	ldr	r3, [pc, #544]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a87      	ldr	r2, [pc, #540]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	4b85      	ldr	r3, [pc, #532]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b82      	ldr	r3, [pc, #520]	@ (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fd fdd7 	bl	8000738 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fd fdd3 	bl	8000738 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	@ 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e103      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b75      	ldr	r3, [pc, #468]	@ (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x312>
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	e02d      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x334>
 8002bca:	4b6a      	ldr	r3, [pc, #424]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a69      	ldr	r2, [pc, #420]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6213      	str	r3, [r2, #32]
 8002bd6:	4b67      	ldr	r3, [pc, #412]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a66      	ldr	r2, [pc, #408]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	e01c      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x356>
 8002bec:	4b61      	ldr	r3, [pc, #388]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4a60      	ldr	r2, [pc, #384]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6213      	str	r3, [r2, #32]
 8002bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002c06:	4b5b      	ldr	r3, [pc, #364]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	4b58      	ldr	r3, [pc, #352]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a57      	ldr	r2, [pc, #348]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fd fd87 	bl	8000738 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fd fd83 	bl	8000738 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0b1      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b4b      	ldr	r3, [pc, #300]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCC_OscConfig+0x37e>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fd fd71 	bl	8000738 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fd fd6d 	bl	8000738 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e09b      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	4b40      	ldr	r3, [pc, #256]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b3c      	ldr	r3, [pc, #240]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c98:	4b36      	ldr	r3, [pc, #216]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d061      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d146      	bne.n	8002d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fd fd41 	bl	8000738 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fd fd3d 	bl	8000738 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e06d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ccc:	4b29      	ldr	r3, [pc, #164]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ce2:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4921      	ldr	r1, [pc, #132]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a19      	ldr	r1, [r3, #32]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	430b      	orrs	r3, r1
 8002d06:	491b      	ldr	r1, [pc, #108]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fd fd11 	bl	8000738 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fd fd0d 	bl	8000738 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46a>
 8002d38:	e035      	b.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fd fcfa 	bl	8000738 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fd fcf6 	bl	8000738 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e026      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x498>
 8002d66:	e01e      	b.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e019      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_OscConfig+0x500>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000

08002db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0d0      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d910      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b67      	ldr	r3, [pc, #412]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4965      	ldr	r1, [pc, #404]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b63      	ldr	r3, [pc, #396]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0b8      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e10:	4b59      	ldr	r3, [pc, #356]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a58      	ldr	r2, [pc, #352]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e28:	4b53      	ldr	r3, [pc, #332]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a52      	ldr	r2, [pc, #328]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b50      	ldr	r3, [pc, #320]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	494d      	ldr	r1, [pc, #308]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d040      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d115      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	4b41      	ldr	r3, [pc, #260]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e073      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	4b3d      	ldr	r3, [pc, #244]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06b      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e92:	4b39      	ldr	r3, [pc, #228]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4936      	ldr	r1, [pc, #216]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7fd fc48 	bl	8000738 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7fd fc44 	bl	8000738 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e053      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 020c 	and.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1eb      	bne.n	8002eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d210      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	4922      	ldr	r1, [pc, #136]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e032      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4916      	ldr	r1, [pc, #88]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f2e:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	490e      	ldr	r1, [pc, #56]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f42:	f000 f821 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	490a      	ldr	r1, [pc, #40]	@ (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	5ccb      	ldrb	r3, [r1, r3]
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a09      	ldr	r2, [pc, #36]	@ (8002f80 <HAL_RCC_ClockConfig+0x1cc>)
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <HAL_RCC_ClockConfig+0x1d0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fba6 	bl	80006b4 <HAL_InitTick>

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08008874 	.word	0x08008874
 8002f80:	20000000 	.word	0x20000000
 8002f84:	20000004 	.word	0x20000004

08002f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800301c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x36>
 8002fb6:	e027      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fba:	613b      	str	r3, [r7, #16]
      break;
 8002fbc:	e027      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a17      	ldr	r2, [pc, #92]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd6:	4b11      	ldr	r3, [pc, #68]	@ (800301c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0c5b      	lsrs	r3, r3, #17
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	4a11      	ldr	r2, [pc, #68]	@ (8003028 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fea:	fb03 f202 	mul.w	r2, r3, r2
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e004      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800302c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	613b      	str	r3, [r7, #16]
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 800300a:	613b      	str	r3, [r7, #16]
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	693b      	ldr	r3, [r7, #16]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	007a1200 	.word	0x007a1200
 8003024:	0800888c 	.word	0x0800888c
 8003028:	0800889c 	.word	0x0800889c
 800302c:	003d0900 	.word	0x003d0900

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	@ (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	@ (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08008884 	.word	0x08008884

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffde 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	0adb      	lsrs	r3, r3, #11
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	@ (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	08008884 	.word	0x08008884

08003094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800309c:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <RCC_Delay+0x34>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <RCC_Delay+0x38>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0a5b      	lsrs	r3, r3, #9
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030b0:	bf00      	nop
  }
  while (Delay --);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	60fa      	str	r2, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f9      	bne.n	80030b0 <RCC_Delay+0x1c>
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	20000000 	.word	0x20000000
 80030cc:	10624dd3 	.word	0x10624dd3

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d07d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	4a4b      	ldr	r2, [pc, #300]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003106:	61d3      	str	r3, [r2, #28]
 8003108:	4b49      	ldr	r3, [pc, #292]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d118      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003124:	4b43      	ldr	r3, [pc, #268]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a42      	ldr	r2, [pc, #264]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003130:	f7fd fb02 	bl	8000738 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	e008      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003138:	f7fd fafe 	bl	8000738 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e06d      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b3a      	ldr	r3, [pc, #232]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003156:	4b36      	ldr	r3, [pc, #216]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02e      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d027      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003174:	4b2e      	ldr	r3, [pc, #184]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800317e:	4b2e      	ldr	r3, [pc, #184]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003184:	4b2c      	ldr	r3, [pc, #176]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800318a:	4a29      	ldr	r2, [pc, #164]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d014      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fd facd 	bl	8000738 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fd fac9 	bl	8000738 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e036      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ee      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4917      	ldr	r1, [pc, #92]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	490b      	ldr	r1, [pc, #44]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4904      	ldr	r1, [pc, #16]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	40007000 	.word	0x40007000
 8003238:	42420440 	.word	0x42420440

0800323c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e041      	b.n	80032d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd f922 	bl	80004ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3304      	adds	r3, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f000 fa74 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d001      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e03a      	b.n	800336a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a18      	ldr	r2, [pc, #96]	@ (8003374 <HAL_TIM_Base_Start_IT+0x98>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00e      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x58>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331e:	d009      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x58>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <HAL_TIM_Base_Start_IT+0x9c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x58>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a13      	ldr	r2, [pc, #76]	@ (800337c <HAL_TIM_Base_Start_IT+0xa0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d010      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	e007      	b.n	8003368 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800

08003380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0202 	mvn.w	r2, #2
 80033ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f9b4 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9a7 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f9b6 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0204 	mvn.w	r2, #4
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f98a 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f97d 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f98c 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b08      	cmp	r3, #8
 800343c:	d122      	bne.n	8003484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d11b      	bne.n	8003484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0208 	mvn.w	r2, #8
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2204      	movs	r2, #4
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f960 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f953 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f962 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b10      	cmp	r3, #16
 8003490:	d122      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	d11b      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0210 	mvn.w	r2, #16
 80034a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2208      	movs	r2, #8
 80034ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f936 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f929 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f938 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10e      	bne.n	8003504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0201 	mvn.w	r2, #1
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fc ff72 	bl	80003e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	2b80      	cmp	r3, #128	@ 0x80
 8003510:	d10e      	bne.n	8003530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351c:	2b80      	cmp	r3, #128	@ 0x80
 800351e:	d107      	bne.n	8003530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa7b 	bl	8003a26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353a:	2b40      	cmp	r3, #64	@ 0x40
 800353c:	d10e      	bne.n	800355c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b40      	cmp	r3, #64	@ 0x40
 800354a:	d107      	bne.n	800355c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8fc 	bl	8003754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b20      	cmp	r3, #32
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0220 	mvn.w	r2, #32
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa46 	bl	8003a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIM_ConfigClockSource+0x1c>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0b4      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x186>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e4:	d03e      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0xd4>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ea:	f200 8087 	bhi.w	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f2:	f000 8086 	beq.w	8003702 <HAL_TIM_ConfigClockSource+0x172>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fa:	d87f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b70      	cmp	r3, #112	@ 0x70
 80035fe:	d01a      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xa6>
 8003600:	2b70      	cmp	r3, #112	@ 0x70
 8003602:	d87b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b60      	cmp	r3, #96	@ 0x60
 8003606:	d050      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x11a>
 8003608:	2b60      	cmp	r3, #96	@ 0x60
 800360a:	d877      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b50      	cmp	r3, #80	@ 0x50
 800360e:	d03c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0xfa>
 8003610:	2b50      	cmp	r3, #80	@ 0x50
 8003612:	d873      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d058      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x13a>
 8003618:	2b40      	cmp	r3, #64	@ 0x40
 800361a:	d86f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b30      	cmp	r3, #48	@ 0x30
 800361e:	d064      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b30      	cmp	r3, #48	@ 0x30
 8003622:	d86b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b20      	cmp	r3, #32
 8003626:	d060      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d867      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	2b10      	cmp	r3, #16
 8003632:	d05a      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003634:	e062      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	f000 f968 	bl	800391a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	609a      	str	r2, [r3, #8]
      break;
 8003662:	e04f      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003674:	f000 f951 	bl	800391a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003686:	609a      	str	r2, [r3, #8]
      break;
 8003688:	e03c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	461a      	mov	r2, r3
 8003698:	f000 f8c8 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2150      	movs	r1, #80	@ 0x50
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f91f 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80036a8:	e02c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b6:	461a      	mov	r2, r3
 80036b8:	f000 f8e6 	bl	8003888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2160      	movs	r1, #96	@ 0x60
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f90f 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80036c8:	e01c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d6:	461a      	mov	r2, r3
 80036d8:	f000 f8a8 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2140      	movs	r1, #64	@ 0x40
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f8ff 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80036e8:	e00c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 f8f6 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80036fa:	e003      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003700:	e000      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
	...

08003768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a29      	ldr	r2, [pc, #164]	@ (8003820 <TIM_Base_SetConfig+0xb8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00b      	beq.n	8003798 <TIM_Base_SetConfig+0x30>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003786:	d007      	beq.n	8003798 <TIM_Base_SetConfig+0x30>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a26      	ldr	r2, [pc, #152]	@ (8003824 <TIM_Base_SetConfig+0xbc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_Base_SetConfig+0x30>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a25      	ldr	r2, [pc, #148]	@ (8003828 <TIM_Base_SetConfig+0xc0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d108      	bne.n	80037aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <TIM_Base_SetConfig+0xb8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b8:	d007      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a19      	ldr	r2, [pc, #100]	@ (8003824 <TIM_Base_SetConfig+0xbc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a18      	ldr	r2, [pc, #96]	@ (8003828 <TIM_Base_SetConfig+0xc0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d108      	bne.n	80037dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a07      	ldr	r2, [pc, #28]	@ (8003820 <TIM_Base_SetConfig+0xb8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800

0800382c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 030a 	bic.w	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0210 	bic.w	r2, r3, #16
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	031b      	lsls	r3, r3, #12
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	621a      	str	r2, [r3, #32]
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	f043 0307 	orr.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003934:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	431a      	orrs	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800396c:	2302      	movs	r3, #2
 800396e:	e046      	b.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a16      	ldr	r2, [pc, #88]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039bc:	d009      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a12      	ldr	r2, [pc, #72]	@ (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a10      	ldr	r2, [pc, #64]	@ (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d10c      	bne.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800

08003a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e042      	b.n	8003ad0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fc fd48 	bl	80004f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2224      	movs	r2, #36	@ 0x24
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fc7f 	bl	8004380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0ba      	sub	sp, #232	@ 0xe8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_UART_IRQHandler+0x66>
 8003b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fb63 	bl	8004202 <UART_Receive_IT>
      return;
 8003b3c:	e25b      	b.n	8003ff6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80de 	beq.w	8003d04 <HAL_UART_IRQHandler+0x22c>
 8003b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80d1 	beq.w	8003d04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_UART_IRQHandler+0xae>
 8003b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_UART_IRQHandler+0xd2>
 8003b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_UART_IRQHandler+0xf6>
 8003bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f043 0204 	orr.w	r2, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d011      	beq.n	8003bfe <HAL_UART_IRQHandler+0x126>
 8003bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	f043 0208 	orr.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 81f2 	beq.w	8003fec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_UART_IRQHandler+0x14e>
 8003c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 faee 	bl	8004202 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <HAL_UART_IRQHandler+0x17a>
 8003c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d04f      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9f8 	bl	8004048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d041      	beq.n	8003cea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1d9      	bne.n	8003c66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d013      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8003eb8 <HAL_UART_IRQHandler+0x3e0>)
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fe88 	bl	80009dc <HAL_DMA_Abort_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	e00e      	b.n	8003d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f99c 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	e00a      	b.n	8003d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f998 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e006      	b.n	8003d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f994 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cfe:	e175      	b.n	8003fec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	bf00      	nop
    return;
 8003d02:	e173      	b.n	8003fec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	f040 814f 	bne.w	8003fac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8148 	beq.w	8003fac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8141 	beq.w	8003fac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80b6 	beq.w	8003ebc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8145 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	f080 813e 	bcs.w	8003ff0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	f000 8088 	beq.w	8003e98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003da2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003db4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003db8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1d9      	bne.n	8003d88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003de4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003df8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e1      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e3      	bne.n	8003e10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e68:	f023 0310 	bic.w	r3, r3, #16
 8003e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e3      	bne.n	8003e56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fd67 	bl	8000966 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8bf 	bl	8004032 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eb4:	e09c      	b.n	8003ff0 <HAL_UART_IRQHandler+0x518>
 8003eb6:	bf00      	nop
 8003eb8:	0800410d 	.word	0x0800410d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 808e 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8089 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f06:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f84:	61fa      	str	r2, [r7, #28]
 8003f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69b9      	ldr	r1, [r7, #24]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	617b      	str	r3, [r7, #20]
   return(result);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e3      	bne.n	8003f60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f844 	bl	8004032 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003faa:	e023      	b.n	8003ff4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_UART_IRQHandler+0x4f4>
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8b5 	bl	8004134 <UART_Transmit_IT>
    return;
 8003fca:	e014      	b.n	8003ff6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x51e>
 8003fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8f4 	bl	80041d2 <UART_EndTransmit_IT>
    return;
 8003fea:	e004      	b.n	8003ff6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fec:	bf00      	nop
 8003fee:	e002      	b.n	8003ff6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ff0:	bf00      	nop
 8003ff2:	e000      	b.n	8003ff6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ff4:	bf00      	nop
  }
}
 8003ff6:	37e8      	adds	r7, #232	@ 0xe8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b095      	sub	sp, #84	@ 0x54
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004070:	643a      	str	r2, [r7, #64]	@ 0x40
 8004072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	61fb      	str	r3, [r7, #28]
   return(result);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e5      	bne.n	8004084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d119      	bne.n	80040f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0310 	bic.w	r3, r3, #16
 80040d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e0:	61ba      	str	r2, [r7, #24]
 80040e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	613b      	str	r3, [r7, #16]
   return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004102:	bf00      	nop
 8004104:	3754      	adds	r7, #84	@ 0x54
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff ff7a 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b21      	cmp	r3, #33	@ 0x21
 8004146:	d13e      	bne.n	80041c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004150:	d114      	bne.n	800417c <UART_Transmit_IT+0x48>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d110      	bne.n	800417c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]
 800417a:	e008      	b.n	800418e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	1c59      	adds	r1, r3, #1
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6211      	str	r1, [r2, #32]
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29b      	uxth	r3, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4619      	mov	r1, r3
 800419c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff02 	bl	8003ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08c      	sub	sp, #48	@ 0x30
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b22      	cmp	r3, #34	@ 0x22
 8004214:	f040 80ae 	bne.w	8004374 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004220:	d117      	bne.n	8004252 <UART_Receive_IT+0x50>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d113      	bne.n	8004252 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	b29a      	uxth	r2, r3
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	1c9a      	adds	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004250:	e026      	b.n	80042a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004264:	d007      	beq.n	8004276 <UART_Receive_IT+0x74>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <UART_Receive_IT+0x82>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e008      	b.n	8004296 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004290:	b2da      	uxtb	r2, r3
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4619      	mov	r1, r3
 80042ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d15d      	bne.n	8004370 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0220 	bic.w	r2, r2, #32
 80042c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d135      	bne.n	8004366 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	613b      	str	r3, [r7, #16]
   return(result);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f023 0310 	bic.w	r3, r3, #16
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	623a      	str	r2, [r7, #32]
 8004322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	69f9      	ldr	r1, [r7, #28]
 8004326:	6a3a      	ldr	r2, [r7, #32]
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	61bb      	str	r3, [r7, #24]
   return(result);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b10      	cmp	r3, #16
 8004340:	d10a      	bne.n	8004358 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fe67 	bl	8004032 <HAL_UARTEx_RxEventCallback>
 8004364:	e002      	b.n	800436c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fe51 	bl	800400e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e002      	b.n	8004376 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3730      	adds	r7, #48	@ 0x30
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043ba:	f023 030c 	bic.w	r3, r3, #12
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004494 <UART_SetConfig+0x114>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d103      	bne.n	80043f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043e8:	f7fe fe40 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	e002      	b.n	80043f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe fe28 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80043f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	4a22      	ldr	r2, [pc, #136]	@ (8004498 <UART_SetConfig+0x118>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	0119      	lsls	r1, r3, #4
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009a      	lsls	r2, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	fbb2 f2f3 	udiv	r2, r2, r3
 800442c:	4b1a      	ldr	r3, [pc, #104]	@ (8004498 <UART_SetConfig+0x118>)
 800442e:	fba3 0302 	umull	r0, r3, r3, r2
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2064      	movs	r0, #100	@ 0x64
 8004436:	fb00 f303 	mul.w	r3, r0, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	3332      	adds	r3, #50	@ 0x32
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <UART_SetConfig+0x118>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800444c:	4419      	add	r1, r3
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009a      	lsls	r2, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	fbb2 f2f3 	udiv	r2, r2, r3
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <UART_SetConfig+0x118>)
 8004466:	fba3 0302 	umull	r0, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2064      	movs	r0, #100	@ 0x64
 800446e:	fb00 f303 	mul.w	r3, r0, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	3332      	adds	r3, #50	@ 0x32
 8004478:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <UART_SetConfig+0x118>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	440a      	add	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40013800 	.word	0x40013800
 8004498:	51eb851f 	.word	0x51eb851f

0800449c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 0014 	add.w	r0, r7, #20
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	b004      	add	sp, #16
 80044ba:	4770      	bx	lr

080044bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044cc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044f0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	b29b      	uxth	r3, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	b29b      	uxth	r3, r3
 8004506:	4013      	ands	r3, r2
 8004508:	b29a      	uxth	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004534:	b084      	sub	sp, #16
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	f107 0014 	add.w	r0, r7, #20
 8004542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	b004      	add	sp, #16
 8004572:	4770      	bx	lr

08004574 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004574:	b480      	push	{r7}
 8004576:	b09d      	sub	sp, #116	@ 0x74
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	78db      	ldrb	r3, [r3, #3]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d81f      	bhi.n	80045e6 <USB_ActivateEndpoint+0x72>
 80045a6:	a201      	add	r2, pc, #4	@ (adr r2, 80045ac <USB_ActivateEndpoint+0x38>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045ef 	.word	0x080045ef
 80045b8:	080045cb 	.word	0x080045cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045c8:	e012      	b.n	80045f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045ce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80045d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045d6:	e00b      	b.n	80045f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045e4:	e004      	b.n	80045f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80045ec:	e000      	b.n	80045f0 <USB_ActivateEndpoint+0x7c>
      break;
 80045ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004628:	b29b      	uxth	r3, r3
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	7b1b      	ldrb	r3, [r3, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8178 	bne.w	8004950 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8084 	beq.w	8004772 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004674:	b29b      	uxth	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	4413      	add	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	011a      	lsls	r2, r3, #4
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	88db      	ldrh	r3, [r3, #6]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	b29b      	uxth	r3, r3
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	827b      	strh	r3, [r7, #18]
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01b      	beq.n	80046ee <USB_ActivateEndpoint+0x17a>
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046cc:	823b      	strh	r3, [r7, #16]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	8a3b      	ldrh	r3, [r7, #16]
 80046da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	78db      	ldrb	r3, [r3, #3]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d020      	beq.n	8004738 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800470c:	81bb      	strh	r3, [r7, #12]
 800470e:	89bb      	ldrh	r3, [r7, #12]
 8004710:	f083 0320 	eor.w	r3, r3, #32
 8004714:	81bb      	strh	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	89bb      	ldrh	r3, [r7, #12]
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800472e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
 8004736:	e2d5      	b.n	8004ce4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800474a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800474e:	81fb      	strh	r3, [r7, #14]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	89fb      	ldrh	r3, [r7, #14]
 800475c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004760:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004764:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476c:	b29b      	uxth	r3, r3
 800476e:	8013      	strh	r3, [r2, #0]
 8004770:	e2b8      	b.n	8004ce4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	633b      	str	r3, [r7, #48]	@ 0x30
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	4413      	add	r3, r2
 8004784:	633b      	str	r3, [r7, #48]	@ 0x30
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	011a      	lsls	r2, r3, #4
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	4413      	add	r3, r2
 8004790:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	88db      	ldrh	r3, [r3, #6]
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b6:	4413      	add	r3, r2
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	011a      	lsls	r2, r3, #4
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	4413      	add	r3, r2
 80047c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b3e      	cmp	r3, #62	@ 0x3e
 80047e0:	d91d      	bls.n	800481e <USB_ActivateEndpoint+0x2aa>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <USB_ActivateEndpoint+0x288>
 80047f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047f8:	3b01      	subs	r3, #1
 80047fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29a      	uxth	r2, r3
 8004802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004804:	b29b      	uxth	r3, r3
 8004806:	029b      	lsls	r3, r3, #10
 8004808:	b29b      	uxth	r3, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004816:	b29a      	uxth	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	e026      	b.n	800486c <USB_ActivateEndpoint+0x2f8>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <USB_ActivateEndpoint+0x2c8>
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004834:	b29a      	uxth	r2, r3
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e017      	b.n	800486c <USB_ActivateEndpoint+0x2f8>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <USB_ActivateEndpoint+0x2e2>
 8004850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004852:	3301      	adds	r3, #1
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800485e:	b29b      	uxth	r3, r3
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29b      	uxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b29a      	uxth	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	847b      	strh	r3, [r7, #34]	@ 0x22
 800487a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800487c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <USB_ActivateEndpoint+0x348>
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	843b      	strh	r3, [r7, #32]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	8c3b      	ldrh	r3, [r7, #32]
 80048a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d124      	bne.n	800490e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048da:	83bb      	strh	r3, [r7, #28]
 80048dc:	8bbb      	ldrh	r3, [r7, #28]
 80048de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048e2:	83bb      	strh	r3, [r7, #28]
 80048e4:	8bbb      	ldrh	r3, [r7, #28]
 80048e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048ea:	83bb      	strh	r3, [r7, #28]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	8bbb      	ldrh	r3, [r7, #28]
 80048f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004908:	b29b      	uxth	r3, r3
 800490a:	8013      	strh	r3, [r2, #0]
 800490c:	e1ea      	b.n	8004ce4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004924:	83fb      	strh	r3, [r7, #30]
 8004926:	8bfb      	ldrh	r3, [r7, #30]
 8004928:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800492c:	83fb      	strh	r3, [r7, #30]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	8bfb      	ldrh	r3, [r7, #30]
 800493a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800493e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]
 800494e:	e1c9      	b.n	8004ce4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	78db      	ldrb	r3, [r3, #3]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d11e      	bne.n	8004996 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004988:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800498c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]
 8004994:	e01d      	b.n	80049d2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80049a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ac:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80049be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049e2:	4413      	add	r3, r2
 80049e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	011a      	lsls	r2, r3, #4
 80049ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	891b      	ldrh	r3, [r3, #8]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a16:	4413      	add	r3, r2
 8004a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	011a      	lsls	r2, r3, #4
 8004a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	895b      	ldrh	r3, [r3, #10]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a38:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 8093 	bne.w	8004b6a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004a54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <USB_ActivateEndpoint+0x524>
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004aa6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <USB_ActivateEndpoint+0x574>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b06:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b0e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b46:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
 8004b68:	e0bc      	b.n	8004ce4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01d      	beq.n	8004bc2 <USB_ActivateEndpoint+0x64e>
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004bd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01d      	beq.n	8004c1a <USB_ActivateEndpoint+0x6a6>
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	78db      	ldrb	r3, [r3, #3]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d024      	beq.n	8004c6c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c40:	f083 0320 	eor.w	r3, r3, #32
 8004c44:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e01d      	b.n	8004ca8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	441a      	add	r2, r3
 8004c90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ce4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3774      	adds	r7, #116	@ 0x74
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop

08004cf4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b08d      	sub	sp, #52	@ 0x34
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	7b1b      	ldrb	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 808e 	bne.w	8004e24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d044      	beq.n	8004d9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	81bb      	strh	r3, [r7, #12]
 8004d1e:	89bb      	ldrh	r3, [r7, #12]
 8004d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <USB_DeactivateEndpoint+0x6c>
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	817b      	strh	r3, [r7, #10]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d76:	813b      	strh	r3, [r7, #8]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	893b      	ldrh	r3, [r7, #8]
 8004d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	8013      	strh	r3, [r2, #0]
 8004d98:	e192      	b.n	80050c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	827b      	strh	r3, [r7, #18]
 8004da8:	8a7b      	ldrh	r3, [r7, #18]
 8004daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <USB_DeactivateEndpoint+0xf6>
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc8:	823b      	strh	r3, [r7, #16]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8a3b      	ldrh	r3, [r7, #16]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e00:	81fb      	strh	r3, [r7, #14]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]
 8004e22:	e14d      	b.n	80050c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 80a5 	bne.w	8004f78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	843b      	strh	r3, [r7, #32]
 8004e3c:	8c3b      	ldrh	r3, [r7, #32]
 8004e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01b      	beq.n	8004e7e <USB_DeactivateEndpoint+0x18a>
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5c:	83fb      	strh	r3, [r7, #30]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8bfb      	ldrh	r3, [r7, #30]
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	83bb      	strh	r3, [r7, #28]
 8004e8c:	8bbb      	ldrh	r3, [r7, #28]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01b      	beq.n	8004ece <USB_DeactivateEndpoint+0x1da>
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eac:	837b      	strh	r3, [r7, #26]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	8b7b      	ldrh	r3, [r7, #26]
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ec6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee4:	833b      	strh	r3, [r7, #24]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	8b3b      	ldrh	r3, [r7, #24]
 8004ef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004efe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1c:	82fb      	strh	r3, [r7, #22]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	441a      	add	r2, r3
 8004f28:	8afb      	ldrh	r3, [r7, #22]
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f54:	82bb      	strh	r3, [r7, #20]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	8abb      	ldrh	r3, [r7, #20]
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]
 8004f76:	e0a3      	b.n	80050c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <USB_DeactivateEndpoint+0x2d4>
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004fd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <USB_DeactivateEndpoint+0x324>
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005010:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800502a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800503c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005066:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800507c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005084:	b29b      	uxth	r3, r3
 8005086:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050bc:	b29b      	uxth	r3, r3
 80050be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3734      	adds	r7, #52	@ 0x34
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b0c2      	sub	sp, #264	@ 0x108
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050da:	6018      	str	r0, [r3, #0]
 80050dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	f040 86b7 	bne.w	8005e66 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	429a      	cmp	r2, r3
 8005112:	d908      	bls.n	8005126 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005124:	e007      	b.n	8005136 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	7b1b      	ldrb	r3, [r3, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d13a      	bne.n	80051bc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6959      	ldr	r1, [r3, #20]
 8005152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	88da      	ldrh	r2, [r3, #6]
 800515e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005162:	b29b      	uxth	r3, r3
 8005164:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005168:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800516c:	6800      	ldr	r0, [r0, #0]
 800516e:	f001 fc9c 	bl	8006aaa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	011a      	lsls	r2, r3, #4
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	f000 be1f 	b.w	8005dfa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	78db      	ldrb	r3, [r3, #3]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	f040 8462 	bne.w	8005a92 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	f240 83df 	bls.w	80059aa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005212:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800523c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005258:	1ad2      	subs	r2, r2, r3
 800525a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 81c7 	beq.w	800561c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800528e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	633b      	str	r3, [r7, #48]	@ 0x30
 800529a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d177      	bne.n	800539a <USB_EPStartXfer+0x2ce>
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	4413      	add	r3, r2
 80052cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	011a      	lsls	r2, r3, #4
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	4413      	add	r3, r2
 80052e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80052fc:	d921      	bls.n	8005342 <USB_EPStartXfer+0x276>
 80052fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <USB_EPStartXfer+0x252>
 8005314:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005318:	3b01      	subs	r3, #1
 800531a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29a      	uxth	r2, r3
 8005324:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005328:	b29b      	uxth	r3, r3
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	b29b      	uxth	r3, r3
 800532e:	4313      	orrs	r3, r2
 8005330:	b29b      	uxth	r3, r3
 8005332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533a:	b29a      	uxth	r2, r3
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e050      	b.n	80053e4 <USB_EPStartXfer+0x318>
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <USB_EPStartXfer+0x294>
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005358:	b29a      	uxth	r2, r3
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	e041      	b.n	80053e4 <USB_EPStartXfer+0x318>
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <USB_EPStartXfer+0x2b4>
 8005376:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800537a:	3301      	adds	r3, #1
 800537c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29b      	uxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b29a      	uxth	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e024      	b.n	80053e4 <USB_EPStartXfer+0x318>
 800539a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d11c      	bne.n	80053e4 <USB_EPStartXfer+0x318>
 80053aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	4413      	add	r3, r2
 80053c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	011a      	lsls	r2, r3, #4
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053de:	b29a      	uxth	r2, r3
 80053e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	895b      	ldrh	r3, [r3, #10]
 80053f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6959      	ldr	r1, [r3, #20]
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	b29b      	uxth	r3, r3
 8005406:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800540a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800540e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005412:	6800      	ldr	r0, [r0, #0]
 8005414:	f001 fb49 	bl	8006aaa <USB_WritePMA>
            ep->xfer_buff += len;
 8005418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005428:	441a      	add	r2, r3
 800542a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	429a      	cmp	r2, r3
 8005450:	d90f      	bls.n	8005472 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005462:	1ad2      	subs	r2, r2, r3
 8005464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	621a      	str	r2, [r3, #32]
 8005470:	e00e      	b.n	8005490 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2200      	movs	r2, #0
 800548e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d177      	bne.n	8005590 <USB_EPStartXfer+0x4c4>
 80054a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	4413      	add	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80054f2:	d921      	bls.n	8005538 <USB_EPStartXfer+0x46c>
 80054f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <USB_EPStartXfer+0x448>
 800550a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550e:	3b01      	subs	r3, #1
 8005510:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29a      	uxth	r2, r3
 800551a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29b      	uxth	r3, r3
 8005524:	4313      	orrs	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005530:	b29a      	uxth	r2, r3
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	e056      	b.n	80055e6 <USB_EPStartXfer+0x51a>
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <USB_EPStartXfer+0x48a>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29a      	uxth	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e047      	b.n	80055e6 <USB_EPStartXfer+0x51a>
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <USB_EPStartXfer+0x4aa>
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005570:	3301      	adds	r3, #1
 8005572:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29a      	uxth	r2, r3
 800557c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005580:	b29b      	uxth	r3, r3
 8005582:	029b      	lsls	r3, r3, #10
 8005584:	b29b      	uxth	r3, r3
 8005586:	4313      	orrs	r3, r2
 8005588:	b29a      	uxth	r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	e02a      	b.n	80055e6 <USB_EPStartXfer+0x51a>
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d122      	bne.n	80055e6 <USB_EPStartXfer+0x51a>
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	4413      	add	r3, r2
 80055c2:	623b      	str	r3, [r7, #32]
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	011a      	lsls	r2, r3, #4
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	891b      	ldrh	r3, [r3, #8]
 80055f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6959      	ldr	r1, [r3, #20]
 8005602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005606:	b29b      	uxth	r3, r3
 8005608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800560c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005610:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005614:	6800      	ldr	r0, [r0, #0]
 8005616:	f001 fa48 	bl	8006aaa <USB_WritePMA>
 800561a:	e3ee      	b.n	8005dfa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800561c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d177      	bne.n	800571c <USB_EPStartXfer+0x650>
 800562c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800564c:	4413      	add	r3, r2
 800564e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	011a      	lsls	r2, r3, #4
 800565e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005660:	4413      	add	r3, r2
 8005662:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005666:	647b      	str	r3, [r7, #68]	@ 0x44
 8005668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005672:	b29a      	uxth	r2, r3
 8005674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	2b3e      	cmp	r3, #62	@ 0x3e
 800567e:	d921      	bls.n	80056c4 <USB_EPStartXfer+0x5f8>
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <USB_EPStartXfer+0x5d4>
 8005696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800569a:	3b01      	subs	r3, #1
 800569c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	029b      	lsls	r3, r3, #10
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	4313      	orrs	r3, r2
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056bc:	b29a      	uxth	r2, r3
 80056be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	e056      	b.n	8005772 <USB_EPStartXfer+0x6a6>
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <USB_EPStartXfer+0x616>
 80056cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e047      	b.n	8005772 <USB_EPStartXfer+0x6a6>
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <USB_EPStartXfer+0x636>
 80056f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056fc:	3301      	adds	r3, #1
 80056fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29a      	uxth	r2, r3
 8005708:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800570c:	b29b      	uxth	r3, r3
 800570e:	029b      	lsls	r3, r3, #10
 8005710:	b29b      	uxth	r3, r3
 8005712:	4313      	orrs	r3, r2
 8005714:	b29a      	uxth	r2, r3
 8005716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e02a      	b.n	8005772 <USB_EPStartXfer+0x6a6>
 800571c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d122      	bne.n	8005772 <USB_EPStartXfer+0x6a6>
 800572c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	653b      	str	r3, [r7, #80]	@ 0x50
 8005738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574c:	4413      	add	r3, r2
 800574e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	011a      	lsls	r2, r3, #4
 800575e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005760:	4413      	add	r3, r2
 8005762:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576c:	b29a      	uxth	r2, r3
 800576e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005770:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	891b      	ldrh	r3, [r3, #8]
 800577e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6959      	ldr	r1, [r3, #20]
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005792:	b29b      	uxth	r3, r3
 8005794:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005798:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800579c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057a0:	6800      	ldr	r0, [r0, #0]
 80057a2:	f001 f982 	bl	8006aaa <USB_WritePMA>
            ep->xfer_buff += len;
 80057a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b6:	441a      	add	r2, r3
 80057b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a1a      	ldr	r2, [r3, #32]
 80057d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d90f      	bls.n	8005800 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a1a      	ldr	r2, [r3, #32]
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	1ad2      	subs	r2, r2, r3
 80057f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	621a      	str	r2, [r3, #32]
 80057fe:	e00e      	b.n	800581e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800581e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	643b      	str	r3, [r7, #64]	@ 0x40
 800582a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d177      	bne.n	800592a <USB_EPStartXfer+0x85e>
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585a:	4413      	add	r3, r2
 800585c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800585e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	011a      	lsls	r2, r3, #4
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	4413      	add	r3, r2
 8005870:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
 8005876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005880:	b29a      	uxth	r2, r3
 8005882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588a:	2b3e      	cmp	r3, #62	@ 0x3e
 800588c:	d921      	bls.n	80058d2 <USB_EPStartXfer+0x806>
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <USB_EPStartXfer+0x7e2>
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	3b01      	subs	r3, #1
 80058aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	029b      	lsls	r3, r3, #10
 80058bc:	b29b      	uxth	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	e050      	b.n	8005974 <USB_EPStartXfer+0x8a8>
 80058d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <USB_EPStartXfer+0x824>
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e041      	b.n	8005974 <USB_EPStartXfer+0x8a8>
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <USB_EPStartXfer+0x844>
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	3301      	adds	r3, #1
 800590c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29a      	uxth	r2, r3
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591a:	b29b      	uxth	r3, r3
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	b29b      	uxth	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	b29a      	uxth	r2, r3
 8005924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e024      	b.n	8005974 <USB_EPStartXfer+0x8a8>
 800592a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d11c      	bne.n	8005974 <USB_EPStartXfer+0x8a8>
 800593a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005948:	b29b      	uxth	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800594e:	4413      	add	r3, r2
 8005950:	643b      	str	r3, [r7, #64]	@ 0x40
 8005952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	011a      	lsls	r2, r3, #4
 8005960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005962:	4413      	add	r3, r2
 8005964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	b29a      	uxth	r2, r3
 8005970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005972:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	895b      	ldrh	r3, [r3, #10]
 8005980:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6959      	ldr	r1, [r3, #20]
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	b29b      	uxth	r3, r3
 8005996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800599a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800599e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	f001 f881 	bl	8006aaa <USB_WritePMA>
 80059a8:	e227      	b.n	8005dfa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80059dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80059e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a36:	4413      	add	r3, r2
 8005a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	011a      	lsls	r2, r3, #4
 8005a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	891b      	ldrh	r3, [r3, #8]
 8005a68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6959      	ldr	r1, [r3, #20]
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	f001 f80d 	bl	8006aaa <USB_WritePMA>
 8005a90:	e1b3      	b.n	8005dfa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80c6 	beq.w	8005c64 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d177      	bne.n	8005be4 <USB_EPStartXfer+0xb18>
 8005af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b14:	4413      	add	r3, r2
 8005b16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	011a      	lsls	r2, r3, #4
 8005b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b46:	d921      	bls.n	8005b8c <USB_EPStartXfer+0xac0>
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <USB_EPStartXfer+0xa9c>
 8005b5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b62:	3b01      	subs	r3, #1
 8005b64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e050      	b.n	8005c2e <USB_EPStartXfer+0xb62>
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <USB_EPStartXfer+0xade>
 8005b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e041      	b.n	8005c2e <USB_EPStartXfer+0xb62>
 8005baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <USB_EPStartXfer+0xafe>
 8005bc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e024      	b.n	8005c2e <USB_EPStartXfer+0xb62>
 8005be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d11c      	bne.n	8005c2e <USB_EPStartXfer+0xb62>
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c08:	4413      	add	r3, r2
 8005c0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	011a      	lsls	r2, r3, #4
 8005c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	895b      	ldrh	r3, [r3, #10]
 8005c3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6959      	ldr	r1, [r3, #20]
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c5c:	6800      	ldr	r0, [r0, #0]
 8005c5e:	f000 ff24 	bl	8006aaa <USB_WritePMA>
 8005c62:	e0ca      	b.n	8005dfa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d177      	bne.n	8005d64 <USB_EPStartXfer+0xc98>
 8005c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c94:	4413      	add	r3, r2
 8005c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	011a      	lsls	r2, r3, #4
 8005ca6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ca8:	4413      	add	r3, r2
 8005caa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cc6:	d921      	bls.n	8005d0c <USB_EPStartXfer+0xc40>
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d104      	bne.n	8005ce8 <USB_EPStartXfer+0xc1c>
 8005cde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	e05c      	b.n	8005dc6 <USB_EPStartXfer+0xcfa>
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <USB_EPStartXfer+0xc5e>
 8005d14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e04d      	b.n	8005dc6 <USB_EPStartXfer+0xcfa>
 8005d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <USB_EPStartXfer+0xc7e>
 8005d40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d44:	3301      	adds	r3, #1
 8005d46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	e030      	b.n	8005dc6 <USB_EPStartXfer+0xcfa>
 8005d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d128      	bne.n	8005dc6 <USB_EPStartXfer+0xcfa>
 8005d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d98:	4413      	add	r3, r2
 8005d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	011a      	lsls	r2, r3, #4
 8005dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005db6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	891b      	ldrh	r3, [r3, #8]
 8005dd2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6959      	ldr	r1, [r3, #20]
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005dec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005df0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005df4:	6800      	ldr	r0, [r0, #0]
 8005df6:	f000 fe58 	bl	8006aaa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e20:	817b      	strh	r3, [r7, #10]
 8005e22:	897b      	ldrh	r3, [r7, #10]
 8005e24:	f083 0310 	eor.w	r3, r3, #16
 8005e28:	817b      	strh	r3, [r7, #10]
 8005e2a:	897b      	ldrh	r3, [r7, #10]
 8005e2c:	f083 0320 	eor.w	r3, r3, #32
 8005e30:	817b      	strh	r3, [r7, #10]
 8005e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	441a      	add	r2, r3
 8005e4c:	897b      	ldrh	r3, [r7, #10]
 8005e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	8013      	strh	r3, [r2, #0]
 8005e62:	f000 bcde 	b.w	8006822 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	7b1b      	ldrb	r3, [r3, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f040 80bb 	bne.w	8005fee <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d917      	bls.n	8005ec4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	1ad2      	subs	r2, r2, r3
 8005eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	e00e      	b.n	8005ee2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f06:	4413      	add	r3, r2
 8005f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	011a      	lsls	r2, r3, #4
 8005f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f1e:	4413      	add	r3, r2
 8005f20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f3a:	801a      	strh	r2, [r3, #0]
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f42:	d924      	bls.n	8005f8e <USB_EPStartXfer+0xec2>
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d104      	bne.n	8005f64 <USB_EPStartXfer+0xe98>
 8005f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	029b      	lsls	r3, r3, #10
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	f000 bc10 	b.w	80067ae <USB_EPStartXfer+0x16e2>
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10c      	bne.n	8005fb0 <USB_EPStartXfer+0xee4>
 8005f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	e3fe      	b.n	80067ae <USB_EPStartXfer+0x16e2>
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <USB_EPStartXfer+0xf04>
 8005fc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	029b      	lsls	r3, r3, #10
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	e3df      	b.n	80067ae <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	78db      	ldrb	r3, [r3, #3]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	f040 8218 	bne.w	8006430 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 809d 	bne.w	800614c <USB_EPStartXfer+0x1080>
 8006012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006036:	4413      	add	r3, r2
 8006038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800603c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	011a      	lsls	r2, r3, #4
 800604a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800604e:	4413      	add	r3, r2
 8006050:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006064:	b29a      	uxth	r2, r3
 8006066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b3e      	cmp	r3, #62	@ 0x3e
 800607a:	d92b      	bls.n	80060d4 <USB_EPStartXfer+0x1008>
 800607c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800608e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <USB_EPStartXfer+0xfe0>
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a6:	3b01      	subs	r3, #1
 80060a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	029b      	lsls	r3, r3, #10
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	e070      	b.n	80061b6 <USB_EPStartXfer+0x10ea>
 80060d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10c      	bne.n	80060fe <USB_EPStartXfer+0x1032>
 80060e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e05b      	b.n	80061b6 <USB_EPStartXfer+0x10ea>
 80060fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <USB_EPStartXfer+0x1062>
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006128:	3301      	adds	r3, #1
 800612a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800612e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613a:	b29b      	uxth	r3, r3
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	b29b      	uxth	r3, r3
 8006140:	4313      	orrs	r3, r2
 8006142:	b29a      	uxth	r2, r3
 8006144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e034      	b.n	80061b6 <USB_EPStartXfer+0x10ea>
 800614c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d12c      	bne.n	80061b6 <USB_EPStartXfer+0x10ea>
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800616a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006178:	b29b      	uxth	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006180:	4413      	add	r3, r2
 8006182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	011a      	lsls	r2, r3, #4
 8006194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006198:	4413      	add	r3, r2
 800619a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800619e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 809d 	bne.w	8006310 <USB_EPStartXfer+0x1244>
 80061d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061fa:	4413      	add	r3, r2
 80061fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	011a      	lsls	r2, r3, #4
 800620e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006212:	4413      	add	r3, r2
 8006214:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800621c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b3e      	cmp	r3, #62	@ 0x3e
 800623e:	d92b      	bls.n	8006298 <USB_EPStartXfer+0x11cc>
 8006240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <USB_EPStartXfer+0x11a4>
 8006266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626a:	3b01      	subs	r3, #1
 800626c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006270:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627c:	b29b      	uxth	r3, r3
 800627e:	029b      	lsls	r3, r3, #10
 8006280:	b29b      	uxth	r3, r3
 8006282:	4313      	orrs	r3, r2
 8006284:	b29b      	uxth	r3, r3
 8006286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628e:	b29a      	uxth	r2, r3
 8006290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006294:	801a      	strh	r2, [r3, #0]
 8006296:	e069      	b.n	800636c <USB_EPStartXfer+0x12a0>
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10c      	bne.n	80062c2 <USB_EPStartXfer+0x11f6>
 80062a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062be:	801a      	strh	r2, [r3, #0]
 80062c0:	e054      	b.n	800636c <USB_EPStartXfer+0x12a0>
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <USB_EPStartXfer+0x1226>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ec:	3301      	adds	r3, #1
 80062ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fe:	b29b      	uxth	r3, r3
 8006300:	029b      	lsls	r3, r3, #10
 8006302:	b29b      	uxth	r3, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	b29a      	uxth	r2, r3
 8006308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	e02d      	b.n	800636c <USB_EPStartXfer+0x12a0>
 8006310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d125      	bne.n	800636c <USB_EPStartXfer+0x12a0>
 8006320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006336:	4413      	add	r3, r2
 8006338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800633c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	011a      	lsls	r2, r3, #4
 800634a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800634e:	4413      	add	r3, r2
 8006350:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800636a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800636c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8218 	beq.w	80067ae <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800639e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <USB_EPStartXfer+0x12ea>
 80063aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 81f5 	bne.w	80067ae <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 81ee 	bne.w	80067ae <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800641a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800641e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006426:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800642a:	b29b      	uxth	r3, r3
 800642c:	8013      	strh	r3, [r2, #0]
 800642e:	e1be      	b.n	80067ae <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	78db      	ldrb	r3, [r3, #3]
 800643c:	2b01      	cmp	r3, #1
 800643e:	f040 81b4 	bne.w	80067aa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	d917      	bls.n	800648e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	619a      	str	r2, [r3, #24]
 800648c:	e00e      	b.n	80064ac <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800649e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2200      	movs	r2, #0
 80064aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 8085 	bne.w	80065c8 <USB_EPStartXfer+0x14fc>
 80064be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064e2:	4413      	add	r3, r2
 80064e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	011a      	lsls	r2, r3, #4
 80064f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064fa:	4413      	add	r3, r2
 80064fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006510:	b29a      	uxth	r2, r3
 8006512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	2b3e      	cmp	r3, #62	@ 0x3e
 800651e:	d923      	bls.n	8006568 <USB_EPStartXfer+0x149c>
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <USB_EPStartXfer+0x1474>
 8006536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653a:	3b01      	subs	r3, #1
 800653c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800654c:	b29b      	uxth	r3, r3
 800654e:	029b      	lsls	r3, r3, #10
 8006550:	b29b      	uxth	r3, r3
 8006552:	4313      	orrs	r3, r2
 8006554:	b29b      	uxth	r3, r3
 8006556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e060      	b.n	800662a <USB_EPStartXfer+0x155e>
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <USB_EPStartXfer+0x14be>
 8006570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006580:	b29a      	uxth	r2, r3
 8006582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	e04f      	b.n	800662a <USB_EPStartXfer+0x155e>
 800658a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <USB_EPStartXfer+0x14de>
 80065a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065a4:	3301      	adds	r3, #1
 80065a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4313      	orrs	r3, r2
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	e030      	b.n	800662a <USB_EPStartXfer+0x155e>
 80065c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d128      	bne.n	800662a <USB_EPStartXfer+0x155e>
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065fc:	4413      	add	r3, r2
 80065fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	011a      	lsls	r2, r3, #4
 8006610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006614:	4413      	add	r3, r2
 8006616:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800661a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	b29a      	uxth	r2, r3
 8006624:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8085 	bne.w	8006754 <USB_EPStartXfer+0x1688>
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006666:	b29b      	uxth	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800666e:	4413      	add	r3, r2
 8006670:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	011a      	lsls	r2, r3, #4
 8006682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006686:	4413      	add	r3, r2
 8006688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800668c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669c:	b29a      	uxth	r2, r3
 800669e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066aa:	d923      	bls.n	80066f4 <USB_EPStartXfer+0x1628>
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <USB_EPStartXfer+0x1600>
 80066c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066c6:	3b01      	subs	r3, #1
 80066c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066d8:	b29b      	uxth	r3, r3
 80066da:	029b      	lsls	r3, r3, #10
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4313      	orrs	r3, r2
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	e05c      	b.n	80067ae <USB_EPStartXfer+0x16e2>
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10c      	bne.n	8006716 <USB_EPStartXfer+0x164a>
 80066fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e04b      	b.n	80067ae <USB_EPStartXfer+0x16e2>
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <USB_EPStartXfer+0x166a>
 800672c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006730:	3301      	adds	r3, #1
 8006732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29b      	uxth	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b29a      	uxth	r2, r3
 800674c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	e02c      	b.n	80067ae <USB_EPStartXfer+0x16e2>
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d124      	bne.n	80067ae <USB_EPStartXfer+0x16e2>
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800677a:	4413      	add	r3, r2
 800677c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	011a      	lsls	r2, r3, #4
 800678e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006792:	4413      	add	r3, r2
 8006794:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e001      	b.n	80067ae <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e03a      	b.n	8006824 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	441a      	add	r2, r3
 800680a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800680e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d020      	beq.n	8006882 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006856:	81bb      	strh	r3, [r7, #12]
 8006858:	89bb      	ldrh	r3, [r7, #12]
 800685a:	f083 0310 	eor.w	r3, r3, #16
 800685e:	81bb      	strh	r3, [r7, #12]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	89bb      	ldrh	r3, [r7, #12]
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
 8006880:	e01f      	b.n	80068c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006898:	81fb      	strh	r3, [r7, #14]
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068a0:	81fb      	strh	r3, [r7, #14]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	89fb      	ldrh	r3, [r7, #14]
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	7b1b      	ldrb	r3, [r3, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 809d 	bne.w	8006a1c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d04c      	beq.n	8006984 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	823b      	strh	r3, [r7, #16]
 80068f8:	8a3b      	ldrh	r3, [r7, #16]
 80068fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01b      	beq.n	800693a <USB_EPClearStall+0x6c>
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006918:	81fb      	strh	r3, [r7, #14]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	441a      	add	r2, r3
 8006924:	89fb      	ldrh	r3, [r7, #14]
 8006926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800692e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006932:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006936:	b29b      	uxth	r3, r3
 8006938:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	78db      	ldrb	r3, [r3, #3]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d06c      	beq.n	8006a1c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006958:	81bb      	strh	r3, [r7, #12]
 800695a:	89bb      	ldrh	r3, [r7, #12]
 800695c:	f083 0320 	eor.w	r3, r3, #32
 8006960:	81bb      	strh	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	89bb      	ldrh	r3, [r7, #12]
 800696e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697e:	b29b      	uxth	r3, r3
 8006980:	8013      	strh	r3, [r2, #0]
 8006982:	e04b      	b.n	8006a1c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	82fb      	strh	r3, [r7, #22]
 8006992:	8afb      	ldrh	r3, [r7, #22]
 8006994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01b      	beq.n	80069d4 <USB_EPClearStall+0x106>
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b2:	82bb      	strh	r3, [r7, #20]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	441a      	add	r2, r3
 80069be:	8abb      	ldrh	r3, [r7, #20]
 80069c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ea:	827b      	strh	r3, [r7, #18]
 80069ec:	8a7b      	ldrh	r3, [r7, #18]
 80069ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069f2:	827b      	strh	r3, [r7, #18]
 80069f4:	8a7b      	ldrh	r3, [r7, #18]
 80069f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069fa:	827b      	strh	r3, [r7, #18]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	8a7b      	ldrh	r3, [r7, #18]
 8006a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2280      	movs	r2, #128	@ 0x80
 8006a3e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr

08006a62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a88:	68fb      	ldr	r3, [r7, #12]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b08b      	sub	sp, #44	@ 0x2c
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	460b      	mov	r3, r1
 8006aba:	80fb      	strh	r3, [r7, #6]
 8006abc:	4613      	mov	r3, r2
 8006abe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ac0:	88bb      	ldrh	r3, [r7, #4]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	085b      	lsrs	r3, r3, #1
 8006ac6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	005a      	lsls	r2, r3, #1
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006adc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae2:	e01e      	b.n	8006b22 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	3301      	adds	r3, #1
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	b21a      	sxth	r2, r3
 8006af4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b21b      	sxth	r3, r3
 8006afc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	8a7a      	ldrh	r2, [r7, #18]
 8006b02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	3302      	adds	r3, #2
 8006b08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1dd      	bne.n	8006ae4 <USB_WritePMA+0x3a>
  }
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	372c      	adds	r7, #44	@ 0x2c
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b08b      	sub	sp, #44	@ 0x2c
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	460b      	mov	r3, r1
 8006b44:	80fb      	strh	r3, [r7, #6]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b4a:	88bb      	ldrh	r3, [r7, #4]
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	005a      	lsls	r2, r3, #1
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b6c:	e01b      	b.n	8006ba6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	3302      	adds	r3, #2
 8006b7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	3302      	adds	r3, #2
 8006b9e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e0      	bne.n	8006b6e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bac:	88bb      	ldrh	r3, [r7, #4]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	701a      	strb	r2, [r3, #0]
  }
}
 8006bc8:	bf00      	nop
 8006bca:	372c      	adds	r7, #44	@ 0x2c
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006bde:	2304      	movs	r3, #4
 8006be0:	2203      	movs	r2, #3
 8006be2:	2181      	movs	r1, #129	@ 0x81
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fc86 	bl	80084f6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006bf0:	2010      	movs	r0, #16
 8006bf2:	f001 fd95 	bl	8008720 <USBD_static_malloc>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e005      	b.n	8006c18 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c12:	2200      	movs	r2, #0
 8006c14:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006c2c:	2181      	movs	r1, #129	@ 0x81
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 fc87 	bl	8008542 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 fd74 	bl	8008738 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c74:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d045      	beq.n	8006d1e <USBD_HID_Setup+0xba>
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	f040 80d3 	bne.w	8006e3e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	3b02      	subs	r3, #2
 8006c9e:	2b09      	cmp	r3, #9
 8006ca0:	d835      	bhi.n	8006d0e <USBD_HID_Setup+0xaa>
 8006ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca8 <USBD_HID_Setup+0x44>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006cff 	.word	0x08006cff
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006d0f 	.word	0x08006d0f
 8006cb4:	08006d0f 	.word	0x08006d0f
 8006cb8:	08006d0f 	.word	0x08006d0f
 8006cbc:	08006d0f 	.word	0x08006d0f
 8006cc0:	08006d0f 	.word	0x08006d0f
 8006cc4:	08006d0f 	.word	0x08006d0f
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006cd1 	.word	0x08006cd1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	885b      	ldrh	r3, [r3, #2]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	601a      	str	r2, [r3, #0]
          break;
 8006cdc:	e01e      	b.n	8006d1c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f957 	bl	8007f98 <USBD_CtlSendData>
          break;
 8006cea:	e017      	b.n	8006d1c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	885b      	ldrh	r3, [r3, #2]
 8006cf0:	0a1b      	lsrs	r3, r3, #8
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	605a      	str	r2, [r3, #4]
          break;
 8006cfc:	e00e      	b.n	8006d1c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3304      	adds	r3, #4
 8006d02:	2201      	movs	r2, #1
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 f946 	bl	8007f98 <USBD_CtlSendData>
          break;
 8006d0c:	e006      	b.n	8006d1c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 f8d7 	bl	8007ec4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d16:	2302      	movs	r3, #2
 8006d18:	75fb      	strb	r3, [r7, #23]
          break;
 8006d1a:	bf00      	nop
      }
      break;
 8006d1c:	e096      	b.n	8006e4c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b0b      	cmp	r3, #11
 8006d24:	f200 8083 	bhi.w	8006e2e <USBD_HID_Setup+0x1ca>
 8006d28:	a201      	add	r2, pc, #4	@ (adr r2, 8006d30 <USBD_HID_Setup+0xcc>)
 8006d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2e:	bf00      	nop
 8006d30:	08006d61 	.word	0x08006d61
 8006d34:	08006e2f 	.word	0x08006e2f
 8006d38:	08006e2f 	.word	0x08006e2f
 8006d3c:	08006e2f 	.word	0x08006e2f
 8006d40:	08006e2f 	.word	0x08006e2f
 8006d44:	08006e2f 	.word	0x08006e2f
 8006d48:	08006d89 	.word	0x08006d89
 8006d4c:	08006e2f 	.word	0x08006e2f
 8006d50:	08006e2f 	.word	0x08006e2f
 8006d54:	08006e2f 	.word	0x08006e2f
 8006d58:	08006de1 	.word	0x08006de1
 8006d5c:	08006e09 	.word	0x08006e09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d107      	bne.n	8006d7a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d6a:	f107 030e 	add.w	r3, r7, #14
 8006d6e:	2202      	movs	r2, #2
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f910 	bl	8007f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d78:	e060      	b.n	8006e3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 f8a1 	bl	8007ec4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d82:	2302      	movs	r3, #2
 8006d84:	75fb      	strb	r3, [r7, #23]
          break;
 8006d86:	e059      	b.n	8006e3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	885b      	ldrh	r3, [r3, #2]
 8006d8c:	0a1b      	lsrs	r3, r3, #8
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b22      	cmp	r3, #34	@ 0x22
 8006d92:	d108      	bne.n	8006da6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	88db      	ldrh	r3, [r3, #6]
 8006d98:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d9a:	bf28      	it	cs
 8006d9c:	233f      	movcs	r3, #63	@ 0x3f
 8006d9e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006da0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e58 <USBD_HID_Setup+0x1f4>)
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	e015      	b.n	8006dd2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b21      	cmp	r3, #33	@ 0x21
 8006db0:	d108      	bne.n	8006dc4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006db2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e5c <USBD_HID_Setup+0x1f8>)
 8006db4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b09      	cmp	r3, #9
 8006dbc:	bf28      	it	cs
 8006dbe:	2309      	movcs	r3, #9
 8006dc0:	83fb      	strh	r3, [r7, #30]
 8006dc2:	e006      	b.n	8006dd2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 f87c 	bl	8007ec4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	75fb      	strb	r3, [r7, #23]
            break;
 8006dd0:	e034      	b.n	8006e3c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006dd2:	8bfb      	ldrh	r3, [r7, #30]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	69b9      	ldr	r1, [r7, #24]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 f8dd 	bl	8007f98 <USBD_CtlSendData>
          break;
 8006dde:	e02d      	b.n	8006e3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d107      	bne.n	8006dfa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3308      	adds	r3, #8
 8006dee:	2201      	movs	r2, #1
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 f8d0 	bl	8007f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006df8:	e020      	b.n	8006e3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f861 	bl	8007ec4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e02:	2302      	movs	r3, #2
 8006e04:	75fb      	strb	r3, [r7, #23]
          break;
 8006e06:	e019      	b.n	8006e3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d106      	bne.n	8006e20 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e1e:	e00d      	b.n	8006e3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f84e 	bl	8007ec4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2c:	e006      	b.n	8006e3c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 f847 	bl	8007ec4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e36:	2302      	movs	r3, #2
 8006e38:	75fb      	strb	r3, [r7, #23]
          break;
 8006e3a:	bf00      	nop
      }
      break;
 8006e3c:	e006      	b.n	8006e4c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f83f 	bl	8007ec4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4a:	bf00      	nop
  }

  return ret;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200000c8 	.word	0x200000c8
 8006e5c:	200000b0 	.word	0x200000b0

08006e60 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e74:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d10c      	bne.n	8006e9a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	7b1b      	ldrb	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d108      	bne.n	8006e9a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	2181      	movs	r1, #129	@ 0x81
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f001 fbfc 	bl	8008692 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7c1b      	ldrb	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8006eb8:	2308      	movs	r3, #8
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e001      	b.n	8006ec2 <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bc80      	pop	{r7}
 8006ecc:	4770      	bx	lr
	...

08006ed0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2222      	movs	r2, #34	@ 0x22
 8006edc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006ede:	4b03      	ldr	r3, [pc, #12]	@ (8006eec <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20000044 	.word	0x20000044

08006ef0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2222      	movs	r2, #34	@ 0x22
 8006efc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006efe:	4b03      	ldr	r3, [pc, #12]	@ (8006f0c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000068 	.word	0x20000068

08006f10 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2222      	movs	r2, #34	@ 0x22
 8006f1c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006f1e:	4b03      	ldr	r3, [pc, #12]	@ (8006f2c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	2000008c 	.word	0x2000008c

08006f30 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f42:	2200      	movs	r2, #0
 8006f44:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr
	...

08006f54 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	220a      	movs	r2, #10
 8006f60:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006f62:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	200000bc 	.word	0x200000bc

08006f74 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e01a      	b.n	8006fc2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	79fa      	ldrb	r2, [r7, #7]
 8006fb8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f001 fa38 	bl	8008430 <USBD_LL_Init>

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d006      	beq.n	8006fec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
 8006fea:	e001      	b.n	8006ff0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006fec:	2302      	movs	r3, #2
 8006fee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fa5b 	bl	80084c0 <USBD_LL_Start>

  return USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007034:	2302      	movs	r3, #2
 8007036:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	4611      	mov	r1, r2
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	4611      	mov	r1, r2
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fed7 	bl	8007e52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d016      	beq.n	80070f6 <USBD_LL_SetupStage+0x6a>
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d81c      	bhi.n	8007106 <USBD_LL_SetupStage+0x7a>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <USBD_LL_SetupStage+0x4a>
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d008      	beq.n	80070e6 <USBD_LL_SetupStage+0x5a>
 80070d4:	e017      	b.n	8007106 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9ca 	bl	8007478 <USBD_StdDevReq>
      break;
 80070e4:	e01a      	b.n	800711c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa2c 	bl	800754c <USBD_StdItfReq>
      break;
 80070f4:	e012      	b.n	800711c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa6c 	bl	80075dc <USBD_StdEPReq>
      break;
 8007104:	e00a      	b.n	800711c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800710c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007110:	b2db      	uxtb	r3, r3
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fa33 	bl	8008580 <USBD_LL_StallEP>
      break;
 800711a:	bf00      	nop
  }

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b086      	sub	sp, #24
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	460b      	mov	r3, r1
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d14b      	bne.n	80071d2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007140:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007148:	2b03      	cmp	r3, #3
 800714a:	d134      	bne.n	80071b6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	429a      	cmp	r2, r3
 8007156:	d919      	bls.n	800718c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	1ad2      	subs	r2, r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800716e:	429a      	cmp	r2, r3
 8007170:	d203      	bcs.n	800717a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007176:	b29b      	uxth	r3, r3
 8007178:	e002      	b.n	8007180 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800717e:	b29b      	uxth	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 ff35 	bl	8007ff4 <USBD_CtlContinueRx>
 800718a:	e038      	b.n	80071fe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d105      	bne.n	80071ae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 ff32 	bl	8008018 <USBD_CtlSendStatus>
 80071b4:	e023      	b.n	80071fe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071bc:	2b05      	cmp	r3, #5
 80071be:	d11e      	bne.n	80071fe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071c8:	2100      	movs	r1, #0
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f001 f9d8 	bl	8008580 <USBD_LL_StallEP>
 80071d0:	e015      	b.n	80071fe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d108      	bne.n	80071fa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	7afa      	ldrb	r2, [r7, #11]
 80071f2:	4611      	mov	r1, r2
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	4798      	blx	r3
 80071f8:	e001      	b.n	80071fe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	e000      	b.n	8007200 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	460b      	mov	r3, r1
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d17f      	bne.n	800731c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3314      	adds	r3, #20
 8007220:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007228:	2b02      	cmp	r3, #2
 800722a:	d15c      	bne.n	80072e6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	429a      	cmp	r2, r3
 8007236:	d915      	bls.n	8007264 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	1ad2      	subs	r2, r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	b29b      	uxth	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 febd 	bl	8007fd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007256:	2300      	movs	r3, #0
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f001 fa3b 	bl	80086d8 <USBD_LL_PrepareReceive>
 8007262:	e04e      	b.n	8007302 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	6912      	ldr	r2, [r2, #16]
 800726c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007270:	fb01 f202 	mul.w	r2, r1, r2
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d11c      	bne.n	80072b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007282:	429a      	cmp	r2, r3
 8007284:	d316      	bcc.n	80072b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007290:	429a      	cmp	r2, r3
 8007292:	d20f      	bcs.n	80072b4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007294:	2200      	movs	r2, #0
 8007296:	2100      	movs	r1, #0
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fe99 	bl	8007fd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072a6:	2300      	movs	r3, #0
 80072a8:	2200      	movs	r2, #0
 80072aa:	2100      	movs	r1, #0
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f001 fa13 	bl	80086d8 <USBD_LL_PrepareReceive>
 80072b2:	e026      	b.n	8007302 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d105      	bne.n	80072d6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072d6:	2180      	movs	r1, #128	@ 0x80
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f001 f951 	bl	8008580 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fead 	bl	800803e <USBD_CtlReceiveStatus>
 80072e4:	e00d      	b.n	8007302 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d004      	beq.n	80072fa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80072fa:	2180      	movs	r1, #128	@ 0x80
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 f93f 	bl	8008580 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007308:	2b01      	cmp	r3, #1
 800730a:	d11d      	bne.n	8007348 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff fe81 	bl	8007014 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800731a:	e015      	b.n	8007348 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800732e:	2b03      	cmp	r3, #3
 8007330:	d108      	bne.n	8007344 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	7afa      	ldrb	r2, [r7, #11]
 800733c:	4611      	mov	r1, r2
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	4798      	blx	r3
 8007342:	e001      	b.n	8007348 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007344:	2302      	movs	r3, #2
 8007346:	e000      	b.n	800734a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800735a:	2340      	movs	r3, #64	@ 0x40
 800735c:	2200      	movs	r2, #0
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f8c8 	bl	80084f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2240      	movs	r2, #64	@ 0x40
 8007372:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007376:	2340      	movs	r3, #64	@ 0x40
 8007378:	2200      	movs	r2, #0
 800737a:	2180      	movs	r1, #128	@ 0x80
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f8ba 	bl	80084f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2240      	movs	r2, #64	@ 0x40
 800738c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6852      	ldr	r2, [r2, #4]
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	4611      	mov	r1, r2
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
  }

  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr

080073f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2204      	movs	r2, #4
 800740a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr

0800741a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007428:	2b04      	cmp	r3, #4
 800742a:	d105      	bne.n	8007438 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	bc80      	pop	{r7}
 8007442:	4770      	bx	lr

08007444 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007452:	2b03      	cmp	r3, #3
 8007454:	d10b      	bne.n	800746e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d005      	beq.n	800749e <USBD_StdDevReq+0x26>
 8007492:	2b40      	cmp	r3, #64	@ 0x40
 8007494:	d84f      	bhi.n	8007536 <USBD_StdDevReq+0xbe>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <USBD_StdDevReq+0x36>
 800749a:	2b20      	cmp	r3, #32
 800749c:	d14b      	bne.n	8007536 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
      break;
 80074ac:	e048      	b.n	8007540 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d839      	bhi.n	800752a <USBD_StdDevReq+0xb2>
 80074b6:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <USBD_StdDevReq+0x44>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	0800750d 	.word	0x0800750d
 80074c0:	08007521 	.word	0x08007521
 80074c4:	0800752b 	.word	0x0800752b
 80074c8:	08007517 	.word	0x08007517
 80074cc:	0800752b 	.word	0x0800752b
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	0800752b 	.word	0x0800752b
 80074dc:	08007503 	.word	0x08007503
 80074e0:	080074f9 	.word	0x080074f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9dc 	bl	80078a4 <USBD_GetDescriptor>
          break;
 80074ec:	e022      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb3f 	bl	8007b74 <USBD_SetAddress>
          break;
 80074f6:	e01d      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb7e 	bl	8007bfc <USBD_SetConfig>
          break;
 8007500:	e018      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc07 	bl	8007d18 <USBD_GetConfig>
          break;
 800750a:	e013      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fc37 	bl	8007d82 <USBD_GetStatus>
          break;
 8007514:	e00e      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc65 	bl	8007de8 <USBD_SetFeature>
          break;
 800751e:	e009      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc74 	bl	8007e10 <USBD_ClrFeature>
          break;
 8007528:	e004      	b.n	8007534 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fcc9 	bl	8007ec4 <USBD_CtlError>
          break;
 8007532:	bf00      	nop
      }
      break;
 8007534:	e004      	b.n	8007540 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fcc3 	bl	8007ec4 <USBD_CtlError>
      break;
 800753e:	bf00      	nop
  }

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop

0800754c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d005      	beq.n	8007572 <USBD_StdItfReq+0x26>
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d82e      	bhi.n	80075c8 <USBD_StdItfReq+0x7c>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <USBD_StdItfReq+0x26>
 800756e:	2b20      	cmp	r3, #32
 8007570:	d12a      	bne.n	80075c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007578:	3b01      	subs	r3, #1
 800757a:	2b02      	cmp	r3, #2
 800757c:	d81d      	bhi.n	80075ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	889b      	ldrh	r3, [r3, #4]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d813      	bhi.n	80075b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d110      	bne.n	80075c4 <USBD_StdItfReq+0x78>
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fd35 	bl	8008018 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ae:	e009      	b.n	80075c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc86 	bl	8007ec4 <USBD_CtlError>
          break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fc81 	bl	8007ec4 <USBD_CtlError>
          break;
 80075c2:	e000      	b.n	80075c6 <USBD_StdItfReq+0x7a>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e004      	b.n	80075d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fc7a 	bl	8007ec4 <USBD_CtlError>
      break;
 80075d0:	bf00      	nop
  }

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	889b      	ldrh	r3, [r3, #4]
 80075ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075f8:	2b40      	cmp	r3, #64	@ 0x40
 80075fa:	d007      	beq.n	800760c <USBD_StdEPReq+0x30>
 80075fc:	2b40      	cmp	r3, #64	@ 0x40
 80075fe:	f200 8146 	bhi.w	800788e <USBD_StdEPReq+0x2b2>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <USBD_StdEPReq+0x40>
 8007606:	2b20      	cmp	r3, #32
 8007608:	f040 8141 	bne.w	800788e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      break;
 800761a:	e13d      	b.n	8007898 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007624:	2b20      	cmp	r3, #32
 8007626:	d10a      	bne.n	800763e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]

        return ret;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	e12d      	b.n	800789a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d007      	beq.n	8007656 <USBD_StdEPReq+0x7a>
 8007646:	2b03      	cmp	r3, #3
 8007648:	f300 811b 	bgt.w	8007882 <USBD_StdEPReq+0x2a6>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d072      	beq.n	8007736 <USBD_StdEPReq+0x15a>
 8007650:	2b01      	cmp	r3, #1
 8007652:	d03a      	beq.n	80076ca <USBD_StdEPReq+0xee>
 8007654:	e115      	b.n	8007882 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765c:	2b02      	cmp	r3, #2
 800765e:	d002      	beq.n	8007666 <USBD_StdEPReq+0x8a>
 8007660:	2b03      	cmp	r3, #3
 8007662:	d015      	beq.n	8007690 <USBD_StdEPReq+0xb4>
 8007664:	e02b      	b.n	80076be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00c      	beq.n	8007686 <USBD_StdEPReq+0xaa>
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b80      	cmp	r3, #128	@ 0x80
 8007670:	d009      	beq.n	8007686 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 ff82 	bl	8008580 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800767c:	2180      	movs	r1, #128	@ 0x80
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 ff7e 	bl	8008580 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007684:	e020      	b.n	80076c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc1b 	bl	8007ec4 <USBD_CtlError>
              break;
 800768e:	e01b      	b.n	80076c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	885b      	ldrh	r3, [r3, #2]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USBD_StdEPReq+0xda>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b80      	cmp	r3, #128	@ 0x80
 80076a2:	d008      	beq.n	80076b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	88db      	ldrh	r3, [r3, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 ff65 	bl	8008580 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fcae 	bl	8008018 <USBD_CtlSendStatus>

              break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fbff 	bl	8007ec4 <USBD_CtlError>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e0e0      	b.n	800788c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d002      	beq.n	80076da <USBD_StdEPReq+0xfe>
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d015      	beq.n	8007704 <USBD_StdEPReq+0x128>
 80076d8:	e026      	b.n	8007728 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <USBD_StdEPReq+0x11e>
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b80      	cmp	r3, #128	@ 0x80
 80076e4:	d009      	beq.n	80076fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff48 	bl	8008580 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076f0:	2180      	movs	r1, #128	@ 0x80
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 ff44 	bl	8008580 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076f8:	e01c      	b.n	8007734 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbe1 	bl	8007ec4 <USBD_CtlError>
              break;
 8007702:	e017      	b.n	8007734 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	885b      	ldrh	r3, [r3, #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d112      	bne.n	8007732 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 ff4f 	bl	80085be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc79 	bl	8008018 <USBD_CtlSendStatus>
              }
              break;
 8007726:	e004      	b.n	8007732 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fbca 	bl	8007ec4 <USBD_CtlError>
              break;
 8007730:	e000      	b.n	8007734 <USBD_StdEPReq+0x158>
              break;
 8007732:	bf00      	nop
          }
          break;
 8007734:	e0aa      	b.n	800788c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773c:	2b02      	cmp	r3, #2
 800773e:	d002      	beq.n	8007746 <USBD_StdEPReq+0x16a>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d032      	beq.n	80077aa <USBD_StdEPReq+0x1ce>
 8007744:	e097      	b.n	8007876 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <USBD_StdEPReq+0x180>
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b80      	cmp	r3, #128	@ 0x80
 8007750:	d004      	beq.n	800775c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fbb5 	bl	8007ec4 <USBD_CtlError>
                break;
 800775a:	e091      	b.n	8007880 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800775c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0b      	bge.n	800777c <USBD_StdEPReq+0x1a0>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3310      	adds	r3, #16
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	3304      	adds	r3, #4
 800777a:	e00b      	b.n	8007794 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2202      	movs	r2, #2
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fbf8 	bl	8007f98 <USBD_CtlSendData>
              break;
 80077a8:	e06a      	b.n	8007880 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da11      	bge.n	80077d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	f003 020f 	and.w	r2, r3, #15
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	3318      	adds	r3, #24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d117      	bne.n	80077fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb78 	bl	8007ec4 <USBD_CtlError>
                  break;
 80077d4:	e054      	b.n	8007880 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	f003 020f 	and.w	r2, r3, #15
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d104      	bne.n	80077fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb65 	bl	8007ec4 <USBD_CtlError>
                  break;
 80077fa:	e041      	b.n	8007880 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	da0b      	bge.n	800781c <USBD_StdEPReq+0x240>
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	3310      	adds	r3, #16
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	4413      	add	r3, r2
 8007818:	3304      	adds	r3, #4
 800781a:	e00b      	b.n	8007834 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	3304      	adds	r3, #4
 8007834:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <USBD_StdEPReq+0x266>
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b80      	cmp	r3, #128	@ 0x80
 8007840:	d103      	bne.n	800784a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e00e      	b.n	8007868 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fed4 	bl	80085fc <USBD_LL_IsStallEP>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e002      	b.n	8007868 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2202      	movs	r2, #2
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb92 	bl	8007f98 <USBD_CtlSendData>
              break;
 8007874:	e004      	b.n	8007880 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fb23 	bl	8007ec4 <USBD_CtlError>
              break;
 800787e:	bf00      	nop
          }
          break;
 8007880:	e004      	b.n	800788c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb1d 	bl	8007ec4 <USBD_CtlError>
          break;
 800788a:	bf00      	nop
      }
      break;
 800788c:	e004      	b.n	8007898 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb17 	bl	8007ec4 <USBD_CtlError>
      break;
 8007896:	bf00      	nop
  }

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	885b      	ldrh	r3, [r3, #2]
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	2b06      	cmp	r3, #6
 80078c6:	f200 8128 	bhi.w	8007b1a <USBD_GetDescriptor+0x276>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <USBD_GetDescriptor+0x2c>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	08007905 	.word	0x08007905
 80078d8:	08007945 	.word	0x08007945
 80078dc:	08007b1b 	.word	0x08007b1b
 80078e0:	08007b1b 	.word	0x08007b1b
 80078e4:	08007abb 	.word	0x08007abb
 80078e8:	08007ae7 	.word	0x08007ae7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	f107 0108 	add.w	r1, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
      break;
 8007902:	e112      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7c1b      	ldrb	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10d      	bne.n	8007928 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007914:	f107 0208 	add.w	r2, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	2202      	movs	r2, #2
 8007924:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007926:	e100      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	f107 0208 	add.w	r2, r7, #8
 8007934:	4610      	mov	r0, r2
 8007936:	4798      	blx	r3
 8007938:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	2202      	movs	r2, #2
 8007940:	701a      	strb	r2, [r3, #0]
      break;
 8007942:	e0f2      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	885b      	ldrh	r3, [r3, #2]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b05      	cmp	r3, #5
 800794c:	f200 80ac 	bhi.w	8007aa8 <USBD_GetDescriptor+0x204>
 8007950:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <USBD_GetDescriptor+0xb4>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007971 	.word	0x08007971
 800795c:	080079a5 	.word	0x080079a5
 8007960:	080079d9 	.word	0x080079d9
 8007964:	08007a0d 	.word	0x08007a0d
 8007968:	08007a41 	.word	0x08007a41
 800796c:	08007a75 	.word	0x08007a75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e091      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa94 	bl	8007ec4 <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e089      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e077      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa7a 	bl	8007ec4 <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e06f      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e05d      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa60 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e055      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e043      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa46 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e03b      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a62:	e029      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa2c 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
          break;
 8007a72:	e021      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e00f      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa12 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e007      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa0a 	bl	8007ec4 <USBD_CtlError>
          err++;
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ab6:	e038      	b.n	8007b2a <USBD_GetDescriptor+0x286>
 8007ab8:	e037      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7c1b      	ldrb	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aca:	f107 0208 	add.w	r2, r7, #8
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4798      	blx	r3
 8007ad2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ad4:	e029      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9f3 	bl	8007ec4 <USBD_CtlError>
        err++;
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae4:	e021      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7c1b      	ldrb	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10d      	bne.n	8007b0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af6:	f107 0208 	add.w	r2, r7, #8
 8007afa:	4610      	mov	r0, r2
 8007afc:	4798      	blx	r3
 8007afe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	2207      	movs	r2, #7
 8007b06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b08:	e00f      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9d9 	bl	8007ec4 <USBD_CtlError>
        err++;
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	3301      	adds	r3, #1
 8007b16:	72fb      	strb	r3, [r7, #11]
      break;
 8007b18:	e007      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9d1 	bl	8007ec4 <USBD_CtlError>
      err++;
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	3301      	adds	r3, #1
 8007b26:	72fb      	strb	r3, [r7, #11]
      break;
 8007b28:	bf00      	nop
  }

  if (err != 0U)
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11c      	bne.n	8007b6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d011      	beq.n	8007b5a <USBD_GetDescriptor+0x2b6>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	88db      	ldrh	r3, [r3, #6]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	88da      	ldrh	r2, [r3, #6]
 8007b42:	893b      	ldrh	r3, [r7, #8]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bf28      	it	cs
 8007b48:	4613      	movcs	r3, r2
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b4e:	893b      	ldrh	r3, [r7, #8]
 8007b50:	461a      	mov	r2, r3
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa1f 	bl	8007f98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	88db      	ldrh	r3, [r3, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa58 	bl	8008018 <USBD_CtlSendStatus>
 8007b68:	e000      	b.n	8007b6c <USBD_GetDescriptor+0x2c8>
    return;
 8007b6a:	bf00      	nop
    }
  }
}
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop

08007b74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	889b      	ldrh	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d130      	bne.n	8007be8 <USBD_SetAddress+0x74>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	88db      	ldrh	r3, [r3, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d12c      	bne.n	8007be8 <USBD_SetAddress+0x74>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b94:	d828      	bhi.n	8007be8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d104      	bne.n	8007bb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f988 	bl	8007ec4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb4:	e01d      	b.n	8007bf2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7bfa      	ldrb	r2, [r7, #15]
 8007bba:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fd46 	bl	8008654 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa25 	bl	8008018 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bdc:	e009      	b.n	8007bf2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be6:	e004      	b.n	8007bf2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f96a 	bl	8007ec4 <USBD_CtlError>
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	4b41      	ldr	r3, [pc, #260]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c10:	4b40      	ldr	r3, [pc, #256]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d904      	bls.n	8007c22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f952 	bl	8007ec4 <USBD_CtlError>
 8007c20:	e075      	b.n	8007d0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d002      	beq.n	8007c32 <USBD_SetConfig+0x36>
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d023      	beq.n	8007c78 <USBD_SetConfig+0x7c>
 8007c30:	e062      	b.n	8007cf8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c32:	4b38      	ldr	r3, [pc, #224]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01a      	beq.n	8007c70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c3a:	4b36      	ldr	r3, [pc, #216]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c4c:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff f9e8 	bl	8007028 <USBD_SetClassConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d104      	bne.n	8007c68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f92f 	bl	8007ec4 <USBD_CtlError>
            return;
 8007c66:	e052      	b.n	8007d0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f9d5 	bl	8008018 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c6e:	e04e      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9d1 	bl	8008018 <USBD_CtlSendStatus>
        break;
 8007c76:	e04a      	b.n	8007d0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c78:	4b26      	ldr	r3, [pc, #152]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d112      	bne.n	8007ca6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c88:	4b22      	ldr	r3, [pc, #136]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c92:	4b20      	ldr	r3, [pc, #128]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff f9e4 	bl	8007066 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9ba 	bl	8008018 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ca4:	e033      	b.n	8007d0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d01d      	beq.n	8007cf0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff f9d2 	bl	8007066 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cc2:	4b14      	ldr	r3, [pc, #80]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ccc:	4b11      	ldr	r3, [pc, #68]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff f9a8 	bl	8007028 <USBD_SetClassConfig>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d104      	bne.n	8007ce8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f8ef 	bl	8007ec4 <USBD_CtlError>
            return;
 8007ce6:	e012      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f995 	bl	8008018 <USBD_CtlSendStatus>
        break;
 8007cee:	e00e      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f991 	bl	8008018 <USBD_CtlSendStatus>
        break;
 8007cf6:	e00a      	b.n	8007d0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8e2 	bl	8007ec4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d00:	4b04      	ldr	r3, [pc, #16]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff f9ad 	bl	8007066 <USBD_ClrClassConfig>
        break;
 8007d0c:	bf00      	nop
    }
  }
}
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000214 	.word	0x20000214

08007d18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d004      	beq.n	8007d34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8c9 	bl	8007ec4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d32:	e022      	b.n	8007d7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	dc02      	bgt.n	8007d44 <USBD_GetConfig+0x2c>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dc03      	bgt.n	8007d4a <USBD_GetConfig+0x32>
 8007d42:	e015      	b.n	8007d70 <USBD_GetConfig+0x58>
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetConfig+0x48>
 8007d48:	e012      	b.n	8007d70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3308      	adds	r3, #8
 8007d54:	2201      	movs	r2, #1
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f91d 	bl	8007f98 <USBD_CtlSendData>
        break;
 8007d5e:	e00c      	b.n	8007d7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3304      	adds	r3, #4
 8007d64:	2201      	movs	r2, #1
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f915 	bl	8007f98 <USBD_CtlSendData>
        break;
 8007d6e:	e004      	b.n	8007d7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8a6 	bl	8007ec4 <USBD_CtlError>
        break;
 8007d78:	bf00      	nop
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d92:	3b01      	subs	r3, #1
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d81e      	bhi.n	8007dd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	88db      	ldrh	r3, [r3, #6]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d004      	beq.n	8007daa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f88e 	bl	8007ec4 <USBD_CtlError>
        break;
 8007da8:	e01a      	b.n	8007de0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f043 0202 	orr.w	r2, r3, #2
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	2202      	movs	r2, #2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f8e2 	bl	8007f98 <USBD_CtlSendData>
      break;
 8007dd4:	e004      	b.n	8007de0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f873 	bl	8007ec4 <USBD_CtlError>
      break;
 8007dde:	bf00      	nop
  }
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d106      	bne.n	8007e08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f908 	bl	8008018 <USBD_CtlSendStatus>
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e20:	3b01      	subs	r3, #1
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d80b      	bhi.n	8007e3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	885b      	ldrh	r3, [r3, #2]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10c      	bne.n	8007e48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f8ee 	bl	8008018 <USBD_CtlSendStatus>
      }
      break;
 8007e3c:	e004      	b.n	8007e48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f83f 	bl	8007ec4 <USBD_CtlError>
      break;
 8007e46:	e000      	b.n	8007e4a <USBD_ClrFeature+0x3a>
      break;
 8007e48:	bf00      	nop
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	785a      	ldrb	r2, [r3, #1]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	3303      	adds	r3, #3
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	3305      	adds	r3, #5
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	3306      	adds	r3, #6
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	3307      	adds	r3, #7
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	80da      	strh	r2, [r3, #6]

}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ece:	2180      	movs	r1, #128	@ 0x80
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fb55 	bl	8008580 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fb51 	bl	8008580 <USBD_LL_StallEP>
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d032      	beq.n	8007f62 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f834 	bl	8007f6a <USBD_GetLen>
 8007f02:	4603      	mov	r3, r0
 8007f04:	3301      	adds	r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	75fa      	strb	r2, [r7, #23]
 8007f16:	461a      	mov	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	75fa      	strb	r2, [r7, #23]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	2203      	movs	r2, #3
 8007f30:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f32:	e012      	b.n	8007f5a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	60fa      	str	r2, [r7, #12]
 8007f3a:	7dfa      	ldrb	r2, [r7, #23]
 8007f3c:	1c51      	adds	r1, r2, #1
 8007f3e:	75f9      	strb	r1, [r7, #23]
 8007f40:	4611      	mov	r1, r2
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	440a      	add	r2, r1
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	75fa      	strb	r2, [r7, #23]
 8007f50:	461a      	mov	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4413      	add	r3, r2
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e8      	bne.n	8007f34 <USBD_GetString+0x4e>
    }
  }
}
 8007f62:	bf00      	nop
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f76:	e005      	b.n	8007f84 <USBD_GetLen+0x1a>
  {
    len++;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3301      	adds	r3, #1
 8007f82:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f5      	bne.n	8007f78 <USBD_GetLen+0xe>
  }

  return len;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr

08007f98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fb66 	bl	8008692 <USBD_LL_Transmit>

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fb54 	bl	8008692 <USBD_LL_Transmit>

  return USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	2100      	movs	r1, #0
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fb65 	bl	80086d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2204      	movs	r2, #4
 8008024:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008028:	2300      	movs	r3, #0
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fb2f 	bl	8008692 <USBD_LL_Transmit>

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2205      	movs	r2, #5
 800804a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800804e:	2300      	movs	r3, #0
 8008050:	2200      	movs	r2, #0
 8008052:	2100      	movs	r1, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fb3f 	bl	80086d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008068:	2200      	movs	r2, #0
 800806a:	490e      	ldr	r1, [pc, #56]	@ (80080a4 <MX_USB_DEVICE_Init+0x40>)
 800806c:	480e      	ldr	r0, [pc, #56]	@ (80080a8 <MX_USB_DEVICE_Init+0x44>)
 800806e:	f7fe ff81 	bl	8006f74 <USBD_Init>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008078:	f7f8 f9e0 	bl	800043c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800807c:	490b      	ldr	r1, [pc, #44]	@ (80080ac <MX_USB_DEVICE_Init+0x48>)
 800807e:	480a      	ldr	r0, [pc, #40]	@ (80080a8 <MX_USB_DEVICE_Init+0x44>)
 8008080:	f7fe ffa3 	bl	8006fca <USBD_RegisterClass>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800808a:	f7f8 f9d7 	bl	800043c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800808e:	4806      	ldr	r0, [pc, #24]	@ (80080a8 <MX_USB_DEVICE_Init+0x44>)
 8008090:	f7fe ffb4 	bl	8006ffc <USBD_Start>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800809a:	f7f8 f9cf 	bl	800043c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800809e:	bf00      	nop
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000108 	.word	0x20000108
 80080a8:	20000218 	.word	0x20000218
 80080ac:	2000000c 	.word	0x2000000c

080080b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2212      	movs	r2, #18
 80080c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	@ (80080d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000124 	.word	0x20000124

080080d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2204      	movs	r2, #4
 80080e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	@ (80080f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000138 	.word	0x20000138

080080f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d105      	bne.n	8008116 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	4907      	ldr	r1, [pc, #28]	@ (800812c <USBD_FS_ProductStrDescriptor+0x34>)
 800810e:	4808      	ldr	r0, [pc, #32]	@ (8008130 <USBD_FS_ProductStrDescriptor+0x38>)
 8008110:	f7ff fee9 	bl	8007ee6 <USBD_GetString>
 8008114:	e004      	b.n	8008120 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4904      	ldr	r1, [pc, #16]	@ (800812c <USBD_FS_ProductStrDescriptor+0x34>)
 800811a:	4805      	ldr	r0, [pc, #20]	@ (8008130 <USBD_FS_ProductStrDescriptor+0x38>)
 800811c:	f7ff fee3 	bl	8007ee6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	200004dc 	.word	0x200004dc
 8008130:	08008828 	.word	0x08008828

08008134 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4904      	ldr	r1, [pc, #16]	@ (8008154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008144:	4804      	ldr	r0, [pc, #16]	@ (8008158 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008146:	f7ff fece 	bl	8007ee6 <USBD_GetString>
  return USBD_StrDesc;
 800814a:	4b02      	ldr	r3, [pc, #8]	@ (8008154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200004dc 	.word	0x200004dc
 8008158:	08008840 	.word	0x08008840

0800815c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	221a      	movs	r2, #26
 800816c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800816e:	f000 f843 	bl	80081f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008172:	4b02      	ldr	r3, [pc, #8]	@ (800817c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	2000013c 	.word	0x2000013c

08008180 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	4907      	ldr	r1, [pc, #28]	@ (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008196:	4808      	ldr	r0, [pc, #32]	@ (80081b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008198:	f7ff fea5 	bl	8007ee6 <USBD_GetString>
 800819c:	e004      	b.n	80081a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4904      	ldr	r1, [pc, #16]	@ (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081a2:	4805      	ldr	r0, [pc, #20]	@ (80081b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081a4:	f7ff fe9f 	bl	8007ee6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a8:	4b02      	ldr	r3, [pc, #8]	@ (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200004dc 	.word	0x200004dc
 80081b8:	08008854 	.word	0x08008854

080081bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4907      	ldr	r1, [pc, #28]	@ (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081d2:	4808      	ldr	r0, [pc, #32]	@ (80081f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081d4:	f7ff fe87 	bl	8007ee6 <USBD_GetString>
 80081d8:	e004      	b.n	80081e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4904      	ldr	r1, [pc, #16]	@ (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081de:	4805      	ldr	r0, [pc, #20]	@ (80081f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e0:	f7ff fe81 	bl	8007ee6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081e4:	4b02      	ldr	r3, [pc, #8]	@ (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200004dc 	.word	0x200004dc
 80081f4:	08008864 	.word	0x08008864

080081f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800820c:	2208      	movs	r2, #8
 800820e:	4906      	ldr	r1, [pc, #24]	@ (8008228 <Get_SerialNum+0x30>)
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 f80d 	bl	8008230 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008216:	2204      	movs	r2, #4
 8008218:	4904      	ldr	r1, [pc, #16]	@ (800822c <Get_SerialNum+0x34>)
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f808 	bl	8008230 <IntToUnicode>
  }
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	2000013e 	.word	0x2000013e
 800822c:	2000014e 	.word	0x2000014e

08008230 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4613      	mov	r3, r2
 800823c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]
 8008246:	e027      	b.n	8008298 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	0f1b      	lsrs	r3, r3, #28
 800824c:	2b09      	cmp	r3, #9
 800824e:	d80b      	bhi.n	8008268 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	0f1b      	lsrs	r3, r3, #28
 8008254:	b2da      	uxtb	r2, r3
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	4619      	mov	r1, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	440b      	add	r3, r1
 8008260:	3230      	adds	r2, #48	@ 0x30
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e00a      	b.n	800827e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	0f1b      	lsrs	r3, r3, #28
 800826c:	b2da      	uxtb	r2, r3
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	4619      	mov	r1, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	440b      	add	r3, r1
 8008278:	3237      	adds	r2, #55	@ 0x37
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	3301      	adds	r3, #1
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	3301      	adds	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
 8008298:	7dfa      	ldrb	r2, [r7, #23]
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	429a      	cmp	r2, r3
 800829e:	d3d3      	bcc.n	8008248 <IntToUnicode+0x18>
  }
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a0d      	ldr	r2, [pc, #52]	@ (80082f0 <HAL_PCD_MspInit+0x44>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d113      	bne.n	80082e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <HAL_PCD_MspInit+0x48>)
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	4a0c      	ldr	r2, [pc, #48]	@ (80082f4 <HAL_PCD_MspInit+0x48>)
 80082c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082c8:	61d3      	str	r3, [r2, #28]
 80082ca:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <HAL_PCD_MspInit+0x48>)
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80082d6:	2200      	movs	r2, #0
 80082d8:	2100      	movs	r1, #0
 80082da:	2014      	movs	r0, #20
 80082dc:	f7f8 fb0d 	bl	80008fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80082e0:	2014      	movs	r0, #20
 80082e2:	f7f8 fb26 	bl	8000932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40005c00 	.word	0x40005c00
 80082f4:	40021000 	.word	0x40021000

080082f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe febc 	bl	800708c <USBD_LL_SetupStage>
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	440b      	add	r3, r1
 800833c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	4619      	mov	r1, r3
 8008346:	f7fe feee 	bl	8007126 <USBD_LL_DataOutStage>
}
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008364:	78fa      	ldrb	r2, [r7, #3]
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	440b      	add	r3, r1
 8008372:	333c      	adds	r3, #60	@ 0x3c
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	4619      	mov	r1, r3
 800837a:	f7fe ff45 	bl	8007208 <USBD_LL_DataInStage>
}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff f855 	bl	8007444 <USBD_LL_SOF>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083aa:	2301      	movs	r3, #1
 80083ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d001      	beq.n	80083ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083b6:	f7f8 f841 	bl	800043c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083c0:	7bfa      	ldrb	r2, [r7, #15]
 80083c2:	4611      	mov	r1, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7ff f805 	bl	80073d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe ffbe 	bl	8007352 <USBD_LL_Reset>
}
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe ffff 	bl	80073f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083fc:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <HAL_PCD_SuspendCallback+0x30>)
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	4a03      	ldr	r2, [pc, #12]	@ (8008410 <HAL_PCD_SuspendCallback+0x30>)
 8008402:	f043 0306 	orr.w	r3, r3, #6
 8008406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	e000ed00 	.word	0xe000ed00

08008414 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fff9 	bl	800741a <USBD_LL_Resume>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008438:	4a1f      	ldr	r2, [pc, #124]	@ (80084b8 <USBD_LL_Init+0x88>)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a1d      	ldr	r2, [pc, #116]	@ (80084b8 <USBD_LL_Init+0x88>)
 8008444:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008448:	4b1b      	ldr	r3, [pc, #108]	@ (80084b8 <USBD_LL_Init+0x88>)
 800844a:	4a1c      	ldr	r2, [pc, #112]	@ (80084bc <USBD_LL_Init+0x8c>)
 800844c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800844e:	4b1a      	ldr	r3, [pc, #104]	@ (80084b8 <USBD_LL_Init+0x88>)
 8008450:	2208      	movs	r2, #8
 8008452:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008454:	4b18      	ldr	r3, [pc, #96]	@ (80084b8 <USBD_LL_Init+0x88>)
 8008456:	2202      	movs	r2, #2
 8008458:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800845a:	4b17      	ldr	r3, [pc, #92]	@ (80084b8 <USBD_LL_Init+0x88>)
 800845c:	2200      	movs	r2, #0
 800845e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008460:	4b15      	ldr	r3, [pc, #84]	@ (80084b8 <USBD_LL_Init+0x88>)
 8008462:	2200      	movs	r2, #0
 8008464:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008466:	4b14      	ldr	r3, [pc, #80]	@ (80084b8 <USBD_LL_Init+0x88>)
 8008468:	2200      	movs	r2, #0
 800846a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800846c:	4812      	ldr	r0, [pc, #72]	@ (80084b8 <USBD_LL_Init+0x88>)
 800846e:	f7f8 fcc8 	bl	8000e02 <HAL_PCD_Init>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008478:	f7f7 ffe0 	bl	800043c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008482:	2318      	movs	r3, #24
 8008484:	2200      	movs	r2, #0
 8008486:	2100      	movs	r1, #0
 8008488:	f7fa f9cf 	bl	800282a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008492:	2358      	movs	r3, #88	@ 0x58
 8008494:	2200      	movs	r2, #0
 8008496:	2180      	movs	r1, #128	@ 0x80
 8008498:	f7fa f9c7 	bl	800282a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084a6:	2200      	movs	r2, #0
 80084a8:	2181      	movs	r1, #129	@ 0x81
 80084aa:	f7fa f9be 	bl	800282a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	200006dc 	.word	0x200006dc
 80084bc:	40005c00 	.word	0x40005c00

080084c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7f8 fd92 	bl	8001000 <HAL_PCD_Start>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f93c 	bl	8008760 <USBD_Get_USB_Status>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	4608      	mov	r0, r1
 8008500:	4611      	mov	r1, r2
 8008502:	461a      	mov	r2, r3
 8008504:	4603      	mov	r3, r0
 8008506:	70fb      	strb	r3, [r7, #3]
 8008508:	460b      	mov	r3, r1
 800850a:	70bb      	strb	r3, [r7, #2]
 800850c:	4613      	mov	r3, r2
 800850e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800851e:	78bb      	ldrb	r3, [r7, #2]
 8008520:	883a      	ldrh	r2, [r7, #0]
 8008522:	78f9      	ldrb	r1, [r7, #3]
 8008524:	f7f8 fee7 	bl	80012f6 <HAL_PCD_EP_Open>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f916 	bl	8008760 <USBD_Get_USB_Status>
 8008534:	4603      	mov	r3, r0
 8008536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008538:	7bbb      	ldrb	r3, [r7, #14]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7f8 ff25 	bl	80013b0 <HAL_PCD_EP_Close>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f8f7 	bl	8008760 <USBD_Get_USB_Status>
 8008572:	4603      	mov	r3, r0
 8008574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008576:	7bbb      	ldrb	r3, [r7, #14]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f8 ffb6 	bl	8001510 <HAL_PCD_EP_SetStall>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f8d8 	bl	8008760 <USBD_Get_USB_Status>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f7f8 fff7 	bl	80015d0 <HAL_PCD_EP_ClrStall>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f8b9 	bl	8008760 <USBD_Get_USB_Status>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800860e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008614:	2b00      	cmp	r3, #0
 8008616:	da0c      	bge.n	8008632 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	440b      	add	r3, r1
 800862c:	3302      	adds	r3, #2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	e00b      	b.n	800864a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008638:	68f9      	ldr	r1, [r7, #12]
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	440b      	add	r3, r1
 8008644:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008648:	781b      	ldrb	r3, [r3, #0]
  }
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr

08008654 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	4611      	mov	r1, r2
 8008672:	4618      	mov	r0, r3
 8008674:	f7f8 fe1a 	bl	80012ac <HAL_PCD_SetAddress>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f86e 	bl	8008760 <USBD_Get_USB_Status>
 8008684:	4603      	mov	r3, r0
 8008686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008688:	7bbb      	ldrb	r3, [r7, #14]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b086      	sub	sp, #24
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	461a      	mov	r2, r3
 800869e:	460b      	mov	r3, r1
 80086a0:	72fb      	strb	r3, [r7, #11]
 80086a2:	4613      	mov	r3, r2
 80086a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086b4:	893b      	ldrh	r3, [r7, #8]
 80086b6:	7af9      	ldrb	r1, [r7, #11]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	f7f8 fef2 	bl	80014a2 <HAL_PCD_EP_Transmit>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f84b 	bl	8008760 <USBD_Get_USB_Status>
 80086ca:	4603      	mov	r3, r0
 80086cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	461a      	mov	r2, r3
 80086e4:	460b      	mov	r3, r1
 80086e6:	72fb      	strb	r3, [r7, #11]
 80086e8:	4613      	mov	r3, r2
 80086ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086fa:	893b      	ldrh	r3, [r7, #8]
 80086fc:	7af9      	ldrb	r1, [r7, #11]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	f7f8 fe9e 	bl	8001440 <HAL_PCD_EP_Receive>
 8008704:	4603      	mov	r3, r0
 8008706:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f828 	bl	8008760 <USBD_Get_USB_Status>
 8008710:	4603      	mov	r3, r0
 8008712:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008714:	7dbb      	ldrb	r3, [r7, #22]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008728:	4b02      	ldr	r3, [pc, #8]	@ (8008734 <USBD_static_malloc+0x14>)
}
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	bc80      	pop	{r7}
 8008732:	4770      	bx	lr
 8008734:	200009cc 	.word	0x200009cc

08008738 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]

}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr

0800874a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d817      	bhi.n	80087a4 <USBD_Get_USB_Status+0x44>
 8008774:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <USBD_Get_USB_Status+0x1c>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	0800878d 	.word	0x0800878d
 8008780:	08008793 	.word	0x08008793
 8008784:	08008799 	.word	0x08008799
 8008788:	0800879f 	.word	0x0800879f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
    break;
 8008790:	e00b      	b.n	80087aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008792:	2302      	movs	r3, #2
 8008794:	73fb      	strb	r3, [r7, #15]
    break;
 8008796:	e008      	b.n	80087aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
    break;
 800879c:	e005      	b.n	80087aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800879e:	2302      	movs	r3, #2
 80087a0:	73fb      	strb	r3, [r7, #15]
    break;
 80087a2:	e002      	b.n	80087aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087a4:	2302      	movs	r3, #2
 80087a6:	73fb      	strb	r3, [r7, #15]
    break;
 80087a8:	bf00      	nop
  }
  return usb_status;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop

080087b8 <memset>:
 80087b8:	4603      	mov	r3, r0
 80087ba:	4402      	add	r2, r0
 80087bc:	4293      	cmp	r3, r2
 80087be:	d100      	bne.n	80087c2 <memset+0xa>
 80087c0:	4770      	bx	lr
 80087c2:	f803 1b01 	strb.w	r1, [r3], #1
 80087c6:	e7f9      	b.n	80087bc <memset+0x4>

080087c8 <__libc_init_array>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	2600      	movs	r6, #0
 80087cc:	4d0c      	ldr	r5, [pc, #48]	@ (8008800 <__libc_init_array+0x38>)
 80087ce:	4c0d      	ldr	r4, [pc, #52]	@ (8008804 <__libc_init_array+0x3c>)
 80087d0:	1b64      	subs	r4, r4, r5
 80087d2:	10a4      	asrs	r4, r4, #2
 80087d4:	42a6      	cmp	r6, r4
 80087d6:	d109      	bne.n	80087ec <__libc_init_array+0x24>
 80087d8:	f000 f81a 	bl	8008810 <_init>
 80087dc:	2600      	movs	r6, #0
 80087de:	4d0a      	ldr	r5, [pc, #40]	@ (8008808 <__libc_init_array+0x40>)
 80087e0:	4c0a      	ldr	r4, [pc, #40]	@ (800880c <__libc_init_array+0x44>)
 80087e2:	1b64      	subs	r4, r4, r5
 80087e4:	10a4      	asrs	r4, r4, #2
 80087e6:	42a6      	cmp	r6, r4
 80087e8:	d105      	bne.n	80087f6 <__libc_init_array+0x2e>
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f0:	4798      	blx	r3
 80087f2:	3601      	adds	r6, #1
 80087f4:	e7ee      	b.n	80087d4 <__libc_init_array+0xc>
 80087f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fa:	4798      	blx	r3
 80087fc:	3601      	adds	r6, #1
 80087fe:	e7f2      	b.n	80087e6 <__libc_init_array+0x1e>
 8008800:	080088a0 	.word	0x080088a0
 8008804:	080088a0 	.word	0x080088a0
 8008808:	080088a0 	.word	0x080088a0
 800880c:	080088a4 	.word	0x080088a4

08008810 <_init>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	bf00      	nop
 8008814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008816:	bc08      	pop	{r3}
 8008818:	469e      	mov	lr, r3
 800881a:	4770      	bx	lr

0800881c <_fini>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	bf00      	nop
 8008820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008822:	bc08      	pop	{r3}
 8008824:	469e      	mov	lr, r3
 8008826:	4770      	bx	lr
